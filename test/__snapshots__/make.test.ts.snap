// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`create 'js' 'none' 'js': --js_none_js--.gitignore 1`] = `
[
  "--js_none_js--.gitignore",
  "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
# Developer note: near.gitignore will be renamed to .gitignore upon project creation
# dependencies
node_modules
/.pnp
.pnp.js

# build
/out
/dist

# keys
/templates/react/neardev

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local
/.cache

npm-debug.log*
yarn-debug.log*
yarn-error.log*
",
]
`;

exports[`create 'js' 'none' 'js': --js_none_js--.gitpod.yml 1`] = `
[
  "--js_none_js--.gitpod.yml",
  "tasks:
  - init: npm dev
    command: npm run dev
ports:
  - port: 1234
    onOpen: open-browser
",
]
`;

exports[`create 'js' 'none' 'js': --js_none_js--README.md 1`] = `
[
  "--js_none_js--README.md",
  "near-blank-project
==================

This app was initialized with [create-near-app]


Quick Start
===========

If you haven't installed dependencies during setup:

    npm install


Build and deploy your contract to TestNet with a temporary dev account:

    npm run deploy

Test your contract:

    npm test

If you have a frontend, run \`npm start\`. This will run a dev server.


Exploring The Code
==================

1. The smart-contract code lives in the \`/contract\` folder. See the README there for
   more info. In blockchain apps the smart contract is the "backend" of your app.
2. The frontend code lives in the \`/frontend\` folder. \`/frontend/index.html\` is a great
   place to start exploring. Note that it loads in \`/frontend/index.js\`,
   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.
3. Test your contract: \`npm test\`, this will run the tests in \`integration-tests\` directory.


Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. 
When you run \`npm run deploy\`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.
When you're ready to make it permanent, here's how:


Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local \`node_modules\` folder when you ran \`npm install\`, but for best ergonomics you may want to install it globally:

    npm install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all \`near\` commands with \`npx\`

Ensure that it's installed with \`near --version\` (or \`npx near --version\`)


Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as \`your-name.testnet\`, you can deploy your contract to \`near-blank-project.your-name.testnet\`. Assuming you've already created an account on [NEAR Wallet], here's how to create \`near-blank-project.your-name.testnet\`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace \`YOUR-NAME\` below with your actual account name):

      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: deploy the contract
---------------------------

Use the CLI to deploy the contract to TestNet with your account ID.
Replace \`PATH_TO_WASM_FILE\` with the \`wasm\` that was generated in \`contract\` build directory.

    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile PATH_TO_WASM_FILE


Step 3: set contract name in your frontend code
-----------------------------------------------

Modify the line in \`src/config.js\` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-blank-project.YOUR-NAME.testnet'



Troubleshooting
===============

On Windows, if you're seeing an error containing \`EPERM\` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.


  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/concepts/basics/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages
",
]
`;

exports[`create 'js' 'none' 'js': --js_none_js--contract--.gitignore 1`] = `
[
  "--js_none_js--contract--.gitignore",
  "node_modules
build
neardev
",
]
`;

exports[`create 'js' 'none' 'js': --js_none_js--contract--README.md 1`] = `
[
  "--js_none_js--contract--README.md",
  "# Hello NEAR Contract

The smart contract exposes two methods to enable storing and retrieving a greeting in the NEAR network.

\`\`\`ts
@NearBindgen({})
class HelloNear {
  greeting: string = "Hello";

  @view // This method is read-only and can be called for free
  get_greeting(): string {
    return this.greeting;
  }

  @call // This method changes the state, for which it cost gas
  set_greeting({ greeting }: { greeting: string }): void {
    // Record a log permanently to the blockchain!
    near.log(\`Saving greeting \${greeting}\`);
    this.greeting = greeting;
  }
}
\`\`\`

<br />

# Quickstart

1. Make sure you have installed [node.js](https://nodejs.org/en/download/package-manager/) >= 16.
2. Install the [\`NEAR CLI\`](https://github.com/near/near-cli#setup)

<br />

## 1. Build and Deploy the Contract
You can automatically compile and deploy the contract in the NEAR testnet by running:

\`\`\`bash
npm run deploy
\`\`\`

Once finished, check the \`neardev/dev-account\` file to find the address in which the contract was deployed:

\`\`\`bash
cat ./neardev/dev-account
# e.g. dev-1659899566943-21539992274727
\`\`\`

<br />

## 2. Retrieve the Greeting

\`get_greeting\` is a read-only method (aka \`view\` method).

\`View\` methods can be called for **free** by anyone, even people **without a NEAR account**!

\`\`\`bash
# Use near-cli to get the greeting
near view <dev-account> get_greeting
\`\`\`

<br />

## 3. Store a New Greeting
\`set_greeting\` changes the contract's state, for which it is a \`call\` method.

\`Call\` methods can only be invoked using a NEAR account, since the account needs to pay GAS for the transaction.

\`\`\`bash
# Use near-cli to set a new greeting
near call <dev-account> set_greeting '{"greeting":"howdy"}' --accountId <dev-account>
\`\`\`

**Tip:** If you would like to call \`set_greeting\` using your own account, first login into NEAR using:

\`\`\`bash
# Use near-cli to login your NEAR account
near login
\`\`\`

and then use the logged account to sign the transaction: \`--accountId <your-account>\`.",
]
`;

exports[`create 'js' 'none' 'js': --js_none_js--contract--build.sh 1`] = `
[
  "--js_none_js--contract--build.sh",
  "#!/bin/sh

echo ">> Building contract"

near-sdk-js build src/contract.ts build/hello_near.wasm
",
]
`;

exports[`create 'js' 'none' 'js': --js_none_js--contract--deploy.sh 1`] = `
[
  "--js_none_js--contract--deploy.sh",
  "#!/bin/sh

./build.sh

if [ $? -ne 0 ]; then
  echo ">> Error building contract"
  exit 1
fi

echo ">> Deploying contract"

# https://docs.near.org/tools/near-cli#near-dev-deploy
near dev-deploy --wasmFile build/hello_near.wasm",
]
`;

exports[`create 'js' 'none' 'js': --js_none_js--contract--package.json 1`] = `
[
  "--js_none_js--contract--package.json",
  "{
  "name": "hello_near",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "type": "module",
  "scripts": {
    "build": "./build.sh",
    "deploy": "./deploy.sh",
    "test": "echo use integration-tests"
  },
  "dependencies": {
    "near-cli": "^3.4.2",
    "near-sdk-js": "1.0.0"
  },
  "devDependencies": {
    "typescript": "^4.7.4",
    "ts-morph": "^16.0.0"
  }
}
",
]
`;

exports[`create 'js' 'none' 'js': --js_none_js--contract--src--contract.ts 1`] = `
[
  "--js_none_js--contract--src--contract.ts",
  "// Find all our documentation at https://docs.near.org
import { NearBindgen, near, call, view } from 'near-sdk-js';

@NearBindgen({})
class HelloNear {
  message: string = "Hello";

  @view({}) // This method is read-only and can be called for free
  get_greeting(): string {
    return this.message;
  }

  @call({}) // This method changes the state, for which it cost gas
  set_greeting({ message }: { message: string }): void {
    near.log(\`Saving greeting \${message}\`);
    this.message = message;
  }
}",
]
`;

exports[`create 'js' 'none' 'js': --js_none_js--contract--tsconfig.json 1`] = `
[
  "--js_none_js--contract--tsconfig.json",
  "{
  "compilerOptions": {
    "experimentalDecorators": true,
    "target": "es5",
    "noEmit": true
  },
  "exclude": [
    "node_modules"
  ],
}",
]
`;

exports[`create 'js' 'none' 'js': --js_none_js--integration-tests--ava.config.cjs 1`] = `
[
  "--js_none_js--integration-tests--ava.config.cjs",
  "require("util").inspect.defaultOptions.depth = 5; // Increase AVA's printing depth

module.exports = {
  timeout: "300000",
  files: ["src/*.ava.ts"],
  failWithoutAssertions: false,
  extensions: ["ts"],
  require: ["ts-node/register"],
};
",
]
`;

exports[`create 'js' 'none' 'js': --js_none_js--integration-tests--package.json 1`] = `
[
  "--js_none_js--integration-tests--package.json",
  "{
  "name": "ava-testing",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "test": "ava"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/node": "^18.6.2",
    "ava": "^4.2.0",
    "near-workspaces": "^3.2.1",
    "ts-node": "^10.8.0",
    "typescript": "^4.7.2"
  },
  "dependencies": {}
}
",
]
`;

exports[`create 'js' 'none' 'js': --js_none_js--integration-tests--src--main.ava.ts 1`] = `
[
  "--js_none_js--integration-tests--src--main.ava.ts",
  "import { Worker, NearAccount } from 'near-workspaces';
import anyTest, { TestFn } from 'ava';

const test = anyTest as TestFn<{
  worker: Worker;
  accounts: Record<string, NearAccount>;
}>;

test.beforeEach(async (t) => {
  // Init the worker and start a Sandbox server
  const worker = await Worker.init();

  // Deploy contract
  const root = worker.rootAccount;
  const contract = await root.createSubAccount('test-account');
  // Get wasm file path from package.json test script in folder above
  await contract.deploy(
    process.argv[2],
  );

  // Save state for test runs, it is unique for each test
  t.context.worker = worker;
  t.context.accounts = { root, contract };
});

test.afterEach.always(async (t) => {
  // Stop Sandbox server
  await t.context.worker.tearDown().catch((error) => {
    console.log('Failed to stop the Sandbox:', error);
  });
});

test('returns the default greeting', async (t) => {
  const { contract } = t.context.accounts;
  const message: string = await contract.view('get_greeting', {});
  t.is(message, 'Hello');
});

test('changes the message', async (t) => {
  const { root, contract } = t.context.accounts;
  await root.call(contract, 'set_greeting', { message: 'Howdy' });
  const message: string = await contract.view('get_greeting', {});
  t.is(message, 'Howdy');
});",
]
`;

exports[`create 'js' 'none' 'js': --js_none_js--package.json 1`] = `
[
  "--js_none_js--package.json",
  "{
  "name": "js_none_js",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "deploy": "cd contract && npm run deploy",
    "build": "npm run build:contract",
    "build:contract": "cd contract && npm run build",
    "test": "npm run test:unit && npm run test:integration",
    "test:unit": "cd contract && npm test",
    "test:integration": "npm run build:contract && cd integration-tests && npm test -- -- \\"./contract/build/hello_near.wasm\\"",
    "postinstall": "echo no frontend && cd integration-tests && npm install && cd .. && cd contract && npm install"
  },
  "devDependencies": {
    "near-cli": "^3.3.0"
  },
  "dependencies": {}
}",
]
`;

exports[`create 'js' 'none' 'js': --js_none_js--rust-toolchain.toml 1`] = `
[
  "--js_none_js--rust-toolchain.toml",
  "[toolchain]
channel = "1.69"
",
]
`;

exports[`create 'js' 'none' 'rust': --js_none_rust--.gitignore 1`] = `
[
  "--js_none_rust--.gitignore",
  "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
# Developer note: near.gitignore will be renamed to .gitignore upon project creation
# dependencies
node_modules
/.pnp
.pnp.js

# build
/out
/dist

# keys
/templates/react/neardev

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local
/.cache

npm-debug.log*
yarn-debug.log*
yarn-error.log*
",
]
`;

exports[`create 'js' 'none' 'rust': --js_none_rust--.gitpod.yml 1`] = `
[
  "--js_none_rust--.gitpod.yml",
  "tasks:
  - init: npm dev
    command: npm run dev
ports:
  - port: 1234
    onOpen: open-browser
",
]
`;

exports[`create 'js' 'none' 'rust': --js_none_rust--README.md 1`] = `
[
  "--js_none_rust--README.md",
  "near-blank-project
==================

This app was initialized with [create-near-app]


Quick Start
===========

If you haven't installed dependencies during setup:

    npm install


Build and deploy your contract to TestNet with a temporary dev account:

    npm run deploy

Test your contract:

    npm test

If you have a frontend, run \`npm start\`. This will run a dev server.


Exploring The Code
==================

1. The smart-contract code lives in the \`/contract\` folder. See the README there for
   more info. In blockchain apps the smart contract is the "backend" of your app.
2. The frontend code lives in the \`/frontend\` folder. \`/frontend/index.html\` is a great
   place to start exploring. Note that it loads in \`/frontend/index.js\`,
   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.
3. Test your contract: \`npm test\`, this will run the tests in \`integration-tests\` directory.


Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. 
When you run \`npm run deploy\`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.
When you're ready to make it permanent, here's how:


Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local \`node_modules\` folder when you ran \`npm install\`, but for best ergonomics you may want to install it globally:

    npm install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all \`near\` commands with \`npx\`

Ensure that it's installed with \`near --version\` (or \`npx near --version\`)


Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as \`your-name.testnet\`, you can deploy your contract to \`near-blank-project.your-name.testnet\`. Assuming you've already created an account on [NEAR Wallet], here's how to create \`near-blank-project.your-name.testnet\`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace \`YOUR-NAME\` below with your actual account name):

      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: deploy the contract
---------------------------

Use the CLI to deploy the contract to TestNet with your account ID.
Replace \`PATH_TO_WASM_FILE\` with the \`wasm\` that was generated in \`contract\` build directory.

    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile PATH_TO_WASM_FILE


Step 3: set contract name in your frontend code
-----------------------------------------------

Modify the line in \`src/config.js\` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-blank-project.YOUR-NAME.testnet'



Troubleshooting
===============

On Windows, if you're seeing an error containing \`EPERM\` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.


  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/concepts/basics/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages
",
]
`;

exports[`create 'js' 'none' 'rust': --js_none_rust--contract--.gitignore 1`] = `
[
  "--js_none_rust--contract--.gitignore",
  "node_modules
build
neardev
",
]
`;

exports[`create 'js' 'none' 'rust': --js_none_rust--contract--README.md 1`] = `
[
  "--js_none_rust--contract--README.md",
  "# Hello NEAR Contract

The smart contract exposes two methods to enable storing and retrieving a greeting in the NEAR network.

\`\`\`ts
@NearBindgen({})
class HelloNear {
  greeting: string = "Hello";

  @view // This method is read-only and can be called for free
  get_greeting(): string {
    return this.greeting;
  }

  @call // This method changes the state, for which it cost gas
  set_greeting({ greeting }: { greeting: string }): void {
    // Record a log permanently to the blockchain!
    near.log(\`Saving greeting \${greeting}\`);
    this.greeting = greeting;
  }
}
\`\`\`

<br />

# Quickstart

1. Make sure you have installed [node.js](https://nodejs.org/en/download/package-manager/) >= 16.
2. Install the [\`NEAR CLI\`](https://github.com/near/near-cli#setup)

<br />

## 1. Build and Deploy the Contract
You can automatically compile and deploy the contract in the NEAR testnet by running:

\`\`\`bash
npm run deploy
\`\`\`

Once finished, check the \`neardev/dev-account\` file to find the address in which the contract was deployed:

\`\`\`bash
cat ./neardev/dev-account
# e.g. dev-1659899566943-21539992274727
\`\`\`

<br />

## 2. Retrieve the Greeting

\`get_greeting\` is a read-only method (aka \`view\` method).

\`View\` methods can be called for **free** by anyone, even people **without a NEAR account**!

\`\`\`bash
# Use near-cli to get the greeting
near view <dev-account> get_greeting
\`\`\`

<br />

## 3. Store a New Greeting
\`set_greeting\` changes the contract's state, for which it is a \`call\` method.

\`Call\` methods can only be invoked using a NEAR account, since the account needs to pay GAS for the transaction.

\`\`\`bash
# Use near-cli to set a new greeting
near call <dev-account> set_greeting '{"greeting":"howdy"}' --accountId <dev-account>
\`\`\`

**Tip:** If you would like to call \`set_greeting\` using your own account, first login into NEAR using:

\`\`\`bash
# Use near-cli to login your NEAR account
near login
\`\`\`

and then use the logged account to sign the transaction: \`--accountId <your-account>\`.",
]
`;

exports[`create 'js' 'none' 'rust': --js_none_rust--contract--build.sh 1`] = `
[
  "--js_none_rust--contract--build.sh",
  "#!/bin/sh

echo ">> Building contract"

near-sdk-js build src/contract.ts build/hello_near.wasm
",
]
`;

exports[`create 'js' 'none' 'rust': --js_none_rust--contract--deploy.sh 1`] = `
[
  "--js_none_rust--contract--deploy.sh",
  "#!/bin/sh

./build.sh

if [ $? -ne 0 ]; then
  echo ">> Error building contract"
  exit 1
fi

echo ">> Deploying contract"

# https://docs.near.org/tools/near-cli#near-dev-deploy
near dev-deploy --wasmFile build/hello_near.wasm",
]
`;

exports[`create 'js' 'none' 'rust': --js_none_rust--contract--package.json 1`] = `
[
  "--js_none_rust--contract--package.json",
  "{
  "name": "hello_near",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "type": "module",
  "scripts": {
    "build": "./build.sh",
    "deploy": "./deploy.sh",
    "test": "echo use integration-tests"
  },
  "dependencies": {
    "near-cli": "^3.4.2",
    "near-sdk-js": "1.0.0"
  },
  "devDependencies": {
    "typescript": "^4.7.4",
    "ts-morph": "^16.0.0"
  }
}
",
]
`;

exports[`create 'js' 'none' 'rust': --js_none_rust--contract--src--contract.ts 1`] = `
[
  "--js_none_rust--contract--src--contract.ts",
  "// Find all our documentation at https://docs.near.org
import { NearBindgen, near, call, view } from 'near-sdk-js';

@NearBindgen({})
class HelloNear {
  message: string = "Hello";

  @view({}) // This method is read-only and can be called for free
  get_greeting(): string {
    return this.message;
  }

  @call({}) // This method changes the state, for which it cost gas
  set_greeting({ message }: { message: string }): void {
    near.log(\`Saving greeting \${message}\`);
    this.message = message;
  }
}",
]
`;

exports[`create 'js' 'none' 'rust': --js_none_rust--contract--tsconfig.json 1`] = `
[
  "--js_none_rust--contract--tsconfig.json",
  "{
  "compilerOptions": {
    "experimentalDecorators": true,
    "target": "es5",
    "noEmit": true
  },
  "exclude": [
    "node_modules"
  ],
}",
]
`;

exports[`create 'js' 'none' 'rust': --js_none_rust--integration-tests--Cargo.toml 1`] = `
[
  "--js_none_rust--integration-tests--Cargo.toml",
  "[package]
name = "integration-tests"
version = "1.0.0"
publish = false
edition = "2018"

[dev-dependencies]
anyhow = "1.0"
borsh = "0.9"
maplit = "1.0"
near-units = "0.2.0"
# arbitrary_precision enabled for u128 types that workspaces requires for Balance types
serde_json = { version = "1.0", features = ["arbitrary_precision"] }
tokio = { version = "1.18.1", features = ["full"] }
tracing = "0.1"
tracing-subscriber = { version = "0.3.11", features = ["env-filter"] }
workspaces = "0.6.0"
pkg-config = "0.3.1"

[[example]]
name = "integration-tests"
path = "src/tests.rs"
",
]
`;

exports[`create 'js' 'none' 'rust': --js_none_rust--integration-tests--src--tests.rs 1`] = `
[
  "--js_none_rust--integration-tests--src--tests.rs",
  "use std::{env, fs};
use near_units::parse_near;
use serde_json::json;
use workspaces::{Account, Contract};

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    let wasm_arg: &str = &(env::args().nth(1).unwrap());
    let wasm_filepath = fs::canonicalize(env::current_dir()?.join(wasm_arg))?;

    let worker = workspaces::sandbox().await?;
    let wasm = std::fs::read(wasm_filepath)?;
    let contract = worker.dev_deploy(&wasm).await?;

    // create accounts
    let account = worker.dev_create_account().await?;
    let alice = account
        .create_subaccount( "alice")
        .initial_balance(parse_near!("30 N"))
        .transact()
        .await?
        .into_result()?;

    // begin tests
    test_default_message(&alice, &contract).await?;
    test_changes_message(&alice, &contract).await?;
    Ok(())
}

async fn test_default_message(
    user: &Account,
    contract: &Contract,
) -> anyhow::Result<()> {
    let message: String = user
        .call( contract.id(), "get_greeting")
        .args_json(json!({}))
        .transact()
        .await?
        .json()?;

    assert_eq!(message, "Hello".to_string());
    println!("      Passed ✅ gets default message");
    Ok(())
}

async fn test_changes_message(
    user: &Account,
    contract: &Contract,
) -> anyhow::Result<()> {
    user.call(contract.id(), "set_greeting")
        .args_json(json!({"message": "Howdy"}))
        .transact()
        .await?
        .into_result()?;

    let message: String = user
        .call(contract.id(), "get_greeting")
        .args_json(json!({}))
        .transact()
        .await?
        .json()?;

    assert_eq!(message, "Howdy".to_string());
    println!("      Passed ✅ changes message");
    Ok(())
}",
]
`;

exports[`create 'js' 'none' 'rust': --js_none_rust--package.json 1`] = `
[
  "--js_none_rust--package.json",
  "{
  "name": "js_none_rust",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "deploy": "cd contract && npm run deploy",
    "build": "npm run build:contract",
    "build:contract": "cd contract && npm run build",
    "test": "npm run test:unit && npm run test:integration",
    "test:unit": "cd contract && npm test",
    "test:integration": "npm run build:contract && cd integration-tests && cargo run --example integration-tests \\"../contract/build/hello_near.wasm\\"",
    "postinstall": "echo no frontend && echo rs tests && cd contract && npm install"
  },
  "devDependencies": {
    "near-cli": "^3.3.0"
  },
  "dependencies": {}
}",
]
`;

exports[`create 'js' 'none' 'rust': --js_none_rust--rust-toolchain.toml 1`] = `
[
  "--js_none_rust--rust-toolchain.toml",
  "[toolchain]
channel = "1.69"
",
]
`;

exports[`create 'js' 'react' 'js': --js_react_js--.gitignore 1`] = `
[
  "--js_react_js--.gitignore",
  "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
# Developer note: near.gitignore will be renamed to .gitignore upon project creation
# dependencies
node_modules
/.pnp
.pnp.js

# build
/out
/dist

# keys
/templates/react/neardev

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local
/.cache

npm-debug.log*
yarn-debug.log*
yarn-error.log*
",
]
`;

exports[`create 'js' 'react' 'js': --js_react_js--.gitpod.yml 1`] = `
[
  "--js_react_js--.gitpod.yml",
  "tasks:
  - init: npm dev
    command: npm run dev
ports:
  - port: 1234
    onOpen: open-browser
",
]
`;

exports[`create 'js' 'react' 'js': --js_react_js--README.md 1`] = `
[
  "--js_react_js--README.md",
  "near-blank-project
==================

This app was initialized with [create-near-app]


Quick Start
===========

If you haven't installed dependencies during setup:

    npm install


Build and deploy your contract to TestNet with a temporary dev account:

    npm run deploy

Test your contract:

    npm test

If you have a frontend, run \`npm start\`. This will run a dev server.


Exploring The Code
==================

1. The smart-contract code lives in the \`/contract\` folder. See the README there for
   more info. In blockchain apps the smart contract is the "backend" of your app.
2. The frontend code lives in the \`/frontend\` folder. \`/frontend/index.html\` is a great
   place to start exploring. Note that it loads in \`/frontend/index.js\`,
   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.
3. Test your contract: \`npm test\`, this will run the tests in \`integration-tests\` directory.


Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. 
When you run \`npm run deploy\`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.
When you're ready to make it permanent, here's how:


Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local \`node_modules\` folder when you ran \`npm install\`, but for best ergonomics you may want to install it globally:

    npm install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all \`near\` commands with \`npx\`

Ensure that it's installed with \`near --version\` (or \`npx near --version\`)


Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as \`your-name.testnet\`, you can deploy your contract to \`near-blank-project.your-name.testnet\`. Assuming you've already created an account on [NEAR Wallet], here's how to create \`near-blank-project.your-name.testnet\`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace \`YOUR-NAME\` below with your actual account name):

      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: deploy the contract
---------------------------

Use the CLI to deploy the contract to TestNet with your account ID.
Replace \`PATH_TO_WASM_FILE\` with the \`wasm\` that was generated in \`contract\` build directory.

    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile PATH_TO_WASM_FILE


Step 3: set contract name in your frontend code
-----------------------------------------------

Modify the line in \`src/config.js\` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-blank-project.YOUR-NAME.testnet'



Troubleshooting
===============

On Windows, if you're seeing an error containing \`EPERM\` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.


  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/concepts/basics/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages
",
]
`;

exports[`create 'js' 'react' 'js': --js_react_js--contract--.gitignore 1`] = `
[
  "--js_react_js--contract--.gitignore",
  "node_modules
build
neardev
",
]
`;

exports[`create 'js' 'react' 'js': --js_react_js--contract--README.md 1`] = `
[
  "--js_react_js--contract--README.md",
  "# Hello NEAR Contract

The smart contract exposes two methods to enable storing and retrieving a greeting in the NEAR network.

\`\`\`ts
@NearBindgen({})
class HelloNear {
  greeting: string = "Hello";

  @view // This method is read-only and can be called for free
  get_greeting(): string {
    return this.greeting;
  }

  @call // This method changes the state, for which it cost gas
  set_greeting({ greeting }: { greeting: string }): void {
    // Record a log permanently to the blockchain!
    near.log(\`Saving greeting \${greeting}\`);
    this.greeting = greeting;
  }
}
\`\`\`

<br />

# Quickstart

1. Make sure you have installed [node.js](https://nodejs.org/en/download/package-manager/) >= 16.
2. Install the [\`NEAR CLI\`](https://github.com/near/near-cli#setup)

<br />

## 1. Build and Deploy the Contract
You can automatically compile and deploy the contract in the NEAR testnet by running:

\`\`\`bash
npm run deploy
\`\`\`

Once finished, check the \`neardev/dev-account\` file to find the address in which the contract was deployed:

\`\`\`bash
cat ./neardev/dev-account
# e.g. dev-1659899566943-21539992274727
\`\`\`

<br />

## 2. Retrieve the Greeting

\`get_greeting\` is a read-only method (aka \`view\` method).

\`View\` methods can be called for **free** by anyone, even people **without a NEAR account**!

\`\`\`bash
# Use near-cli to get the greeting
near view <dev-account> get_greeting
\`\`\`

<br />

## 3. Store a New Greeting
\`set_greeting\` changes the contract's state, for which it is a \`call\` method.

\`Call\` methods can only be invoked using a NEAR account, since the account needs to pay GAS for the transaction.

\`\`\`bash
# Use near-cli to set a new greeting
near call <dev-account> set_greeting '{"greeting":"howdy"}' --accountId <dev-account>
\`\`\`

**Tip:** If you would like to call \`set_greeting\` using your own account, first login into NEAR using:

\`\`\`bash
# Use near-cli to login your NEAR account
near login
\`\`\`

and then use the logged account to sign the transaction: \`--accountId <your-account>\`.",
]
`;

exports[`create 'js' 'react' 'js': --js_react_js--contract--build.sh 1`] = `
[
  "--js_react_js--contract--build.sh",
  "#!/bin/sh

echo ">> Building contract"

near-sdk-js build src/contract.ts build/hello_near.wasm
",
]
`;

exports[`create 'js' 'react' 'js': --js_react_js--contract--deploy.sh 1`] = `
[
  "--js_react_js--contract--deploy.sh",
  "#!/bin/sh

./build.sh

if [ $? -ne 0 ]; then
  echo ">> Error building contract"
  exit 1
fi

echo ">> Deploying contract"

# https://docs.near.org/tools/near-cli#near-dev-deploy
near dev-deploy --wasmFile build/hello_near.wasm",
]
`;

exports[`create 'js' 'react' 'js': --js_react_js--contract--package.json 1`] = `
[
  "--js_react_js--contract--package.json",
  "{
  "name": "hello_near",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "type": "module",
  "scripts": {
    "build": "./build.sh",
    "deploy": "./deploy.sh",
    "test": "echo use integration-tests"
  },
  "dependencies": {
    "near-cli": "^3.4.2",
    "near-sdk-js": "1.0.0"
  },
  "devDependencies": {
    "typescript": "^4.7.4",
    "ts-morph": "^16.0.0"
  }
}
",
]
`;

exports[`create 'js' 'react' 'js': --js_react_js--contract--src--contract.ts 1`] = `
[
  "--js_react_js--contract--src--contract.ts",
  "// Find all our documentation at https://docs.near.org
import { NearBindgen, near, call, view } from 'near-sdk-js';

@NearBindgen({})
class HelloNear {
  message: string = "Hello";

  @view({}) // This method is read-only and can be called for free
  get_greeting(): string {
    return this.message;
  }

  @call({}) // This method changes the state, for which it cost gas
  set_greeting({ message }: { message: string }): void {
    near.log(\`Saving greeting \${message}\`);
    this.message = message;
  }
}",
]
`;

exports[`create 'js' 'react' 'js': --js_react_js--contract--tsconfig.json 1`] = `
[
  "--js_react_js--contract--tsconfig.json",
  "{
  "compilerOptions": {
    "experimentalDecorators": true,
    "target": "es5",
    "noEmit": true
  },
  "exclude": [
    "node_modules"
  ],
}",
]
`;

exports[`create 'js' 'react' 'js': --js_react_js--frontend--App.js 1`] = `
[
  "--js_react_js--frontend--App.js",
  "import 'regenerator-runtime/runtime';
import React from 'react';

import './assets/global.css';

import { EducationalText, SignInPrompt, SignOutButton } from './ui-components';


export default function App({ isSignedIn, contractId, wallet }) {
  const [valueFromBlockchain, setValueFromBlockchain] = React.useState();

  const [uiPleaseWait, setUiPleaseWait] = React.useState(true);

  // Get blockchian state once on component load
  React.useEffect(() => {
    getGreeting()
      .then(setValueFromBlockchain)
      .catch(alert)
      .finally(() => {
        setUiPleaseWait(false);
      });
    }
  , []);

  /// If user not signed-in with wallet - show prompt
  if (!isSignedIn) {
    // Sign-in flow will reload the page later
    return <SignInPrompt greeting={valueFromBlockchain} onClick={() => wallet.signIn()}/>;
  }

  function changeGreeting(e) {
    e.preventDefault();
    setUiPleaseWait(true);
    const { greetingInput } = e.target.elements;
    
    // use the wallet to send the greeting to the contract
    wallet.callMethod({ method: 'set_greeting', args: { message: greetingInput.value }, contractId })
      .then(async () => {return getGreeting();})
      .then(setValueFromBlockchain)
      .finally(() => {
        setUiPleaseWait(false);
      });
  }

  function getGreeting(){
    // use the wallet to query the contract's greeting
    return wallet.viewMethod({ method: 'get_greeting', contractId })
  }

  return (
    <>
      <SignOutButton accountId={wallet.accountId} onClick={() => wallet.signOut()}/>
      <main className={uiPleaseWait ? 'please-wait' : ''}>
        <h1>
          The contract says: <span className="greeting">{valueFromBlockchain}</span>
        </h1>
        <form onSubmit={changeGreeting} className="change">
          <label>Change greeting:</label>
          <div>
            <input
              autoComplete="off"
              defaultValue={valueFromBlockchain}
              id="greetingInput"
            />
            <button>
              <span>Save</span>
              <div className="loader"></div>
            </button>
          </div>
        </form>
        <EducationalText/>
      </main>
    </>
  );
}",
]
`;

exports[`create 'js' 'react' 'js': --js_react_js--frontend--assets--favicon.ico 1`] = `
[
  "--js_react_js--frontend--assets--favicon.ico",
  "�PNG

   
IHDR  @  @   ��Na   	pHYs  %  %IR$�    IDATx���p��}�qɖdK����6 c������6	?B�
m�����N���܄?n&����M��t�!�^2-�9���ޅ��p�~�#l�1�e�mY��Y�1�m�c��y����4F�����v��/_|�
 �� " $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ �[e�j�عq����;���pG[뎡��y�O��иh���Ο�����;�g��G��ŗ�ٱ��pGOW�)�����q55���]�h�'?2y֌�/!���#.��qp����/��]7�b�Y��MW�Xt劺I�g�B8�]��nx��Z��t��kΠ����K/\\q�ͽ����J�Ҽ����7_ze�w��U+>���ia�g�^�a����������������/�؟��^	,-�랹���{���H�-[|����E>P��
?������+��7~ܒիd,{����<q�E��p�V���[������ֺ��\`L��_��߿y�Mk
>C&,O]�O��Ћ?\\[ƣ�k���s7,��_����?������\\��S_���#K��������W�^��V�Xs׭�n�~��o���YSW���[?t͇>Cl�?���"�IK���w�����[o<�Ҝ%M
ӧ��9���<�寗���۷��:��sٲ�O��e��y��o���ݓ�Au�?��/�=�5�b�4���׾]�k��-����oZ���3D�8�1X�4��p��������!�\\3_~��G������e"�z
Ұʔ�5S�r"\`9H�^�vpw*��1�vnܒ�5��G�|���w���G��kk��ĽD9���?�ڷ��;
>Cn�Z�����N�~��c�>�l��	F�b�j�h�羮Ñz�ֺ��� �����[��^3����s_:c]FF�b{���y�װ��rC�[��@���7��]�����%z�!��vn�R�������y]���i��ex���ݶ}��-.Ǹ,��7b�~�>���4�s�X��a�' 4�������U.F��y�_�7��tú�u�{���������(1'-������P?J�I�Bji^W���kF�yhk��Ɉ����FXPRK�S9�Qbtm����=��~�*���sp��@��Qb\\]�?��c=�}�|���F$\`�!��2J�h�)_ܡ��U�,��P+�a1J'��N���2&\`�t�w���┌ci���_n��X�Zw��#\`�d��F�Q�4������U9��\`�V��DF���>�R	?\\��\`v��"�H4JLY�w��
��ʉ�z�<,F�i|�W������ʆ��񂣐Qbj"����U�W�t%&e�)_~˓#iF��x��ԋ��3JL��>��h�%�WK���M���˥u�����E�0�K��u�� I���Qb�ܽ/ק|�#�Ēx���}K�H���Qbix��0�1Jkټ�y0B2J;�����|���Q�X����g�QUuu~�F~������M�>���PUU=n\\���>#0��"����G��ށv���0B0b3J,��������謮��0�0�3J��;c���ή�q��h90J������;vU
dk�����	�đy�;�߽嵣Ū�0b02a�8-�Om[�B�����0�0�a�8,�ֽ��?Hӱ~i�Y1J��;�Z���UJÈI�ȍQ�ڿs��o|w�MF\\F��Ϡ�����|����X�4���<%�RwG�c��ǎ��O������'��Sz��ص���Pi�	�2J|����]/o;�+
#<#gF�'�����/�<��ws�a�&\`d�(���j�/ox���[�adB��_����w��?�
#FE��Q���m��\`OWw�I��0� \`T��%�tv��G{�{N�G�ȉ�Q)*m�������j{��i90*HE�7?��}���ڼ7BF6��R!��W��ӻ^�z�.F�����(q��[�oh썆�1�e<Jlkݾy����l���>� \`�J��A�����o~��C�t���?�/|�A������%v:������9ћ�v�m�46-,�0��1*�MW�yk�s��(�������ޞ�cMJ�a���g��YUp0<�h-]�j�M����lF��~���kO�
[�z��O�)86���햦�+���F�[�z�㝃�*�v��-[�殨7�I��Qk�iAГz��s㖶��&'��\\�����(8!�8�&��w%�X�k;vmz����۰	�n�򿭛d:O�E3e���R:���ן�8���6aR�M_�S�(.���K�ȁC��7�"��]���o<7�=�$K�(2�����y����z{O�'�]w��{���U�0��(qL�v�l[�Bo_ՉT$ܰ��|�G.O�|��1&����o�<t�ؽsi7�˖]�'���$:cL%��7_z�c���<j��:{�շݒ�9$�X1J,����:��ޓ�l�&5N��[]����!90ƐQbxk�W__?�lX]C�uw��z1���e�X]��_y�X��o�u���Z87��F��1g�8J]�;v��e0-�7l���4k��=cT��G���w�������x�οne�?VG�(�đ���}kskOW��NT'ް�+.^񙏗�,Q��1J�}���s�s�I�z�næ/��]�(1�t�������84���6mެk��o�N�P��FI%Q���Gߣ�X{RnXm��K��E�	�f���:�9�ή�'�G�rî��ߜ6w�X�($\`��Q��tvڳ�=�H�a����sg��h\`	e\`�x:=]��w����R�d�_włKOs(0���0J,���׾�����w�.�6l��%���>)���Q6F�'���;�{_oO�\`*oٍؔ]�т���0��(�����r��}D�
�2k��}}�@�	ef�XUUu�\`{����7q�nX턺7���PWpPjF�U�(�������og�h�j&�]����8er�A@�Wɣ�������'�'�-���g�UpPF*s�����u�ȱ�$߰�lΒEe#\`���F�����G�T��J�
�s~����/8('#!4J�����x�׉tO�a���\\|�� e&\`��BF��=����G��z�&͘�d�UG �'\`$'�Qb_o_UU�IMJ�a5�.��55u��'\`$'�Qb��iDU�
���[���ת�0R��(�DB�oXӕ+�O-8 H�����G�v�O�?��[����y��v�f�3o�9��iH�����G��6lڼYg_���ۅ���y��^��M^�₂oR$\`�.�QbJ
���شr��ښ��R$\`��+%�Ѱ�u�/�P�D��!�WJL�a�/�8eR�w�0�����ڰ���)_�#\`D��+%��a��ϙ:gf�w�0����Kް)sg.ZX�}@ F0��}s	V�P�x�',��O�o�\\���M�8���ƍ_������1n�����s��	Q����cٰY:��~B��"0���Ǧag-��^d@��-��o.z�&ϜQ?}J���0b��XԆ5L�2y�Y�I�/�Qb�V;qٍ�4D%\`� �Q�V3�nڼY�(&\`d"�Q�(6n��)�f|%d��|�?JQêǏ�<k��|�#+���߰��S��Y0�R���4l�I��E���T�(qh
��0A�Ș����%~P�����M
yK�H��SE�O߰����&|5dE��VE�Oհ�7��8�����K!+F�*b�Xа�u��E%0rV)�ē6���Z��F�*e�8ذ���|�$\`�RF�Pa��P)�D�$F���Q"T��T�(*��QA*h�@��,4J��	�(� \`T"�DȀ�Q��!:�r%BhF�2J����f�q	��(�00J����!"�c�!�c�!�w%B �a�Q���������(B0*CowO__�Pf��0*BoO�@�����RÌ!qF�z:�n~���o�
3J��	���������7܆%B����vww�wFkd
3J�d	����=r���x�F�0�DH�������������;��mÌ!AF����������[�?�"4�(R#\`d���}=�]U�����0�DH����C{��WU�@���0�DH�����}�9p��s���0�DH����#����n�ƦaF��#]�;���}�Ic�0�DH�����#��^���&�mÌ�����z����zow���aF�PvFl}����l���=�6�(�K��m��׺ڏ���
3J�20۳��#��VYf��"\`D��������?P��6�(�B�����{��q�7eo�Q"���O�ûZ���O�m�Q"���̑���?��x�j�Q"���Iow���7�tu�*��%B)	a�v�l[�B����J�aF�P2Fo<���;�N�Q�
3J��0bx㹗���X\`�o�Q"���@�k;�^�1���I�aF�PF��Zw������/PÌa�	I;�������!��0�DSF������g��tu�G��%��0�������tv�V�
;E��2J�1"\`����{�Ï���7i7�������tg�(Ƃ���mO=���c�H�a?H�ǟ�4%�X0�����j�Vur~nXUuuM]��C�D(:#-�^޺cC�@4��"oXUU��	U����dF�P\\FB�l}��G�8���6x���5�(�H�H��=�6���w˔|�������)%B�I8r��3�?��q�x�Ro��)�����)%BQ������?���H�{��p�j'N��8a���(�B�(�u�������T��V;qB����<iF�0zF�mx��G���2%ڰq55�fL+�3J�Q0�i���x~�ɡJ�a���M�;�z\\�~j�a4��y㹗Z��z�S��mXUUմ���X�AF�0bFy�ݶ������䖤ݰ��g�L��se�##\`��;;w?�?�ϱ�Ghشy��n4h�##\`�ZwG�c���9я�6�q��g�gf�# \`�TwG����ݮ���mI�
��>e���%8EF�0\\FI����i���
��f�j&֝�pn�ΏQ"��Q:���������OI6��~�������Q"��Q"/���mO�p�>%ְ�q�f�wN��5�(�H�(��O>��?=�w�>�԰��?�V)�\`�C$\`����x�{F���Y�h¤�2^1�a(�����7��o����W�
klZ8u�̲_+��	c��p����t����߰isg�\\�0���Q"���1V�w<���ypϾ��߰	��_|~R��D8c�<��h{m��)J�a&7,���F�p:ƘX��ﶮ���ޤ۰q5��]�||mM�W�D8��Z�׵�]w�ޤذq������OL��\`��$\`YK�߸������\`���iS�%B!���Z����*B�^rA�G���}��ik���/}���Ix�ݰ�s�Y�(��(N&\`GW{G�=���^�Rmؔ�3λ��p��Q"� \`AW{���7m�;N�O�װ��S��^U��\`�'E�����^�Rj��ښ�n�hM]m�w�Q"0F�{ؼv�ϧѰ�5�o\\�^���xU�h�4�{�k���$а�����8��;��(�Qx�װ��aK?~UcS*��;zF�T8���԰��7��evqG%|�A�(��7l梳/�ĵ�]��G��a0ʤ�
�<s�E�_��z��!\`�OI6qʤ����fB]�t�Q"���QVcܰ����>�ɼ�5(�(FF�(��l؇���sfV�Ez�# \`$\`lv��o<7�BodB�a��4�a�V]r�e�*��
=J��0�Q���}����ʼd��FJ�Ѱ�sg.�iM%_�F�T#1�k�Թ�>���[[?��/V�D*�����6�fB���ߤ^��ɞ���5l�]�N_0�z�Q"y0R5̆���_���%�7#aCn��?�h�%.�BF�dL�H�v�U�.�tE���(�\\	�;cæ/�s�m����(�,	��ag-��ow	�Q"�0�(hX�ĺ���Y(�Q"�0�8�a��n��6y�Y.��3J$3F(�v��F���|Q%�#������7�|�J��%�
#�%�W͏�Q"y0"��l��z(�D2 \`��ش����py�Q"�	1�5��?�E�$��1J$:#��z}��UtF��&\`p�ή�.��\`�H\\F�V�ykӕ�c�(����-Y�j�U.��f�HDF��V�0�/�D�0�ش@�J�(�p�M�5�h���E�HN]C���]���(�@��|��ۍ���(�(���������B)/�DB0����F�0J$}F*��^u�m��8a�H�,�\\�(nlZp�z%��F�nq�#\`�d�qc���4U�(���p,���6p�k�_s׭ꕬ�%��Õ=ffv���|�F󉫐Qb~?\\��\`2��������P	�D��G����T����?w��|ُ��;�g��~�/Y����X�aҕ�(1��J#\`�4]yI�C�J�Ae<J��Ǫ	X<SfϘ�lq��p4_�ab�r�8o��)�g|��	XHK�\\�;x��/������%����p��5��̊�c]C�g���f �Q�Y3�����.����[����(1��,��kV���������;7'y���Z�%\`�]��7G�旬^���k
>Ll��Bh����\\��y���*�(q�M���Fhۧ�x{�w$66-���;
>L>���x*}t��Y3V�ukUuu�G10;�>) �(�{ �A����5����&x��y�#*A�Q�Al,���o]�kW�v G�*�;�R�C4l���Z�A�2�?������[�����8Yc����^9��?��J?�hZ���m��m��{<u
����n[���>C��O=�_�ų��=	�zeF��Ҵry�û_y�\\5���ir%l�[�[;�L�4�5�_w���+3��s.[v��9�?�����ć6o������0evc�g�,
ӧ.����;�ڿ���s9n?��e�!��|�a~����}��w'^��<���y�_�������)��7���s7Z�fI�r���������1=ƣ/��^c�S:�{��>���
����jlZp�m��C;c��G����k׍�=�o�u��~A��vn����z�͗^)ͩ�2k�埻�#^��J��7�����ug�Թ3/���o���C[��
��v��ucw��-[�t�U�U!���ڴuÃ������ݯ�0}����_������4IDW{Ƕ�Z�o(���zUӕ��+��X�:�g�K?�Ů��ڶ����9]���k�j�-����noQt;7nٹqK۶�퇇uccӂ�����?�i���ηѨL@H^J
������������������������������������������������������������������������@D>�  �IDAT���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������x����?�"7�>\`�    IEND�B\`�",
]
`;

exports[`create 'js' 'react' 'js': --js_react_js--frontend--assets--global.css 1`] = `
[
  "--js_react_js--frontend--assets--global.css",
  "* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #FF585D;
  --secondary: #0072CE;

  background-color: var(--bg);
  color: var(--fg);
  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 1em;
}

main {
  margin: 0 auto;
  max-width: 26em;
}

main.please-wait {
}

h1 {
  background-image: url(./logo-black.svg);
  background-position: center 1em;
  background-repeat: no-repeat;
  background-size: auto 1.5em;
  margin-top: 0;
  padding: 3.5em 0 0;
  text-align: center;
  font-size: 1.5em;
}
.greeting {
  color: var(--secondary);
  text-decoration: underline;
}
h2 {
  text-align: center;
}

.please-wait .change {
  pointer-events: none;
}

ul.information  {
  margin: 2em 0 2em 0;
  padding: 0;
  text-align: left;
  font-size: 0.8em;

}
.information li:first-child {
  border-top: 1px solid var(--light-gray);
}
.information li {
  padding: 0.5em 0;
  border-bottom: 1px solid var(--light-gray);
  list-style: none;
}

.change {
  display: flex;
  flex-direction: column;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
  font-size: 1em;
  border: 2px solid var(--light-gray);
  padding: 0.5em;
}
.change > div {
  display: flex;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
}
.change input {
  flex: 1;
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}
.change label {
  display: block;
  text-align: left;
  margin-right: 10px;
  padding-bottom: 0.5em;
}
.change button {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--secondary);
}

button, input {
  font: inherit;
  outline: none;
}
main.please-wait .change button {
  position: relative;
  pointer-events: none;
  background-color: white;
}
main.please-wait .change button span {
  visibility: hidden;
}
button {
  background-color: var(--secondary);
  border-radius: 5px;
  border: none;
  color: #efefef;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}
button:hover, button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}
input {
  background-color: var(--light-gray);
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 0.5em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

@media (prefers-color-scheme: dark) {
  html {
    --bg: #1e1e1e;
    --fg: #efefef;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
  }
  h1 {
    background-image: url(./logo-white.svg);
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}

main.please-wait .loader,
main.please-wait .loader:after{
  display: inline-block;
}
.loader,
.loader:after {
  display: none;
  border-radius: 50%;
  width: 20px;
  height: 20px;
}
.loader {
  font-size: 10px;
  position: absolute;
  top: calc(50% - 10px);
  left: calc(50% - 10px);
  text-indent: -9999em;
  border-top: 3px solid var(--secondary);
  border-right: 3px solid var(--secondary);
  border-bottom: 3px solid var(--secondary);
  border-left: 3px solid #ffffff;
  -webkit-transform: translateZ(0);
  -ms-transform: translateZ(0);
  transform: translateZ(0);
  -webkit-animation: load8 1.1s infinite linear;
  animation: load8 1.1s infinite linear;
}
@-webkit-keyframes load8 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
@keyframes load8 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
",
]
`;

exports[`create 'js' 'react' 'js': --js_react_js--frontend--assets--logo-black.svg 1`] = `
[
  "--js_react_js--frontend--assets--logo-black.svg",
  "<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>",
]
`;

exports[`create 'js' 'react' 'js': --js_react_js--frontend--assets--logo-white.svg 1`] = `
[
  "--js_react_js--frontend--assets--logo-white.svg",
  "<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>",
]
`;

exports[`create 'js' 'react' 'js': --js_react_js--frontend--index.html 1`] = `
[
  "--js_react_js--frontend--index.html",
  "<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="assets/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="assets/favicon.ico" />
    <title>Welcome to NEAR with React</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <script src="./index.js" type="module"></script>
  </body>
</html>
",
]
`;

exports[`create 'js' 'react' 'js': --js_react_js--frontend--index.js 1`] = `
[
  "--js_react_js--frontend--index.js",
  "// React
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

// NEAR
import { Wallet } from './near-wallet';

const CONTRACT_ADDRESS = process.env.CONTRACT_NAME

// When creating the wallet you can optionally ask to create an access key
// Having the key enables to call non-payable methods without interrupting the user to sign
const wallet = new Wallet({ createAccessKeyFor: CONTRACT_ADDRESS })

// Setup on page load
window.onload = async () => {
  const isSignedIn = await wallet.startUp()
 
  ReactDOM.render(
    <App isSignedIn={isSignedIn} contractId={CONTRACT_ADDRESS} wallet={wallet} />,
    document.getElementById('root')
  );
}",
]
`;

exports[`create 'js' 'react' 'js': --js_react_js--frontend--near-wallet.js 1`] = `
[
  "--js_react_js--frontend--near-wallet.js",
  "/* A helper file that simplifies using the wallet selector */

// near api js
import { providers } from 'near-api-js';

// wallet selector
import '@near-wallet-selector/modal-ui/styles.css';
import { setupModal } from '@near-wallet-selector/modal-ui';
import { setupWalletSelector } from '@near-wallet-selector/core';
import { setupMyNearWallet } from '@near-wallet-selector/my-near-wallet';

const THIRTY_TGAS = '30000000000000';
const NO_DEPOSIT = '0';

// Wallet that simplifies using the wallet selector
export class Wallet {
  walletSelector;
  wallet;
  network;
  createAccessKeyFor;

  constructor({ createAccessKeyFor = undefined, network = 'testnet' }) {
    // Login to a wallet passing a contractId will create a local
    // key, so the user skips signing non-payable transactions.
    // Omitting the accountId will result in the user being
    // asked to sign all transactions.
    this.createAccessKeyFor = createAccessKeyFor
    this.network = 'testnet'
  }

  // To be called when the website loads
  async startUp() {
    this.walletSelector = await setupWalletSelector({
      network: this.network,
      modules: [setupMyNearWallet()],
    });

    const isSignedIn = this.walletSelector.isSignedIn();

    if (isSignedIn) {
      this.wallet = await this.walletSelector.wallet();
      this.accountId = this.walletSelector.store.getState().accounts[0].accountId;
    }

    return isSignedIn;
  }

  // Sign-in method
  signIn() {
    const description = 'Please select a wallet to sign in.';
    const modal = setupModal(this.walletSelector, { contractId: this.createAccessKeyFor, description });
    modal.show();
  }

  // Sign-out method
  signOut() {
    this.wallet.signOut();
    this.wallet = this.accountId = this.createAccessKeyFor = null;
    window.location.replace(window.location.origin + window.location.pathname);
  }

  // Make a read-only call to retrieve information from the network
  async viewMethod({ contractId, method, args = {} }) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    let res = await provider.query({
      request_type: 'call_function',
      account_id: contractId,
      method_name: method,
      args_base64: Buffer.from(JSON.stringify(args)).toString('base64'),
      finality: 'optimistic',
    });
    return JSON.parse(Buffer.from(res.result).toString());
  }

  // Call a method that changes the contract's state
  async callMethod({ contractId, method, args = {}, gas = THIRTY_TGAS, deposit = NO_DEPOSIT }) {
    // Sign a transaction with the "FunctionCall" action
    return await this.wallet.signAndSendTransaction({
      signerId: this.accountId,
      receiverId: contractId,
      actions: [
        {
          type: 'FunctionCall',
          params: {
            methodName: method,
            args,
            gas,
            deposit,
          },
        },
      ],
    });
  }

  // Get transaction result from the network
  async getTransactionResult(txhash) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    // Retrieve transaction result from the network
    const transaction = await provider.txStatus(txhash, 'unnused');
    return providers.getTransactionLastResult(transaction);
  }
}",
]
`;

exports[`create 'js' 'react' 'js': --js_react_js--frontend--package.json 1`] = `
[
  "--js_react_js--frontend--package.json",
  "{
  "name": "my-near-app",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "start": "./start.sh",
    "build": "parcel build index.html --public-url ./"
  },
  "devDependencies": {
    "@babel/core": "^7.22.5",
    "@babel/preset-env": "^7.22.5",
    "@babel/preset-react": "^7.22.5",
    "@types/node": "^20.3.2",
    "buffer": "^5.5.0||^6.0.0",
    "env-cmd": "^10.1.0",
    "events": "^3.1.0",
    "https-browserify": "^1.0.0",
    "nodemon": "^2.0.22",
    "parcel": "^2.9.3",
    "process": "^0.11.10",
    "punycode": "^1.4.1",
    "react-test-renderer": "^18.2.0",
    "stream-http": "^3.1.0",
    "ts-node": "^10.9.1",
    "typescript": "^5.1.3",
    "url": "^0.11.0"
  },
  "dependencies": {
    "@near-wallet-selector/core": "^8.1.4",
    "@near-wallet-selector/modal-ui": "^8.1.4",
    "@near-wallet-selector/my-near-wallet": "^8.1.4",
    "near-api-js": "^2.1.4",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "regenerator-runtime": "^0.13.11"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
",
]
`;

exports[`create 'js' 'react' 'js': --js_react_js--frontend--start.sh 1`] = `
[
  "--js_react_js--frontend--start.sh",
  "#!/bin/sh

CONTRACT_DIRECTORY=../contract
DEV_ACCOUNT_FILE="\${CONTRACT_DIRECTORY}/neardev/dev-account.env"

start () {
  echo The app is starting!
  env-cmd -f $DEV_ACCOUNT_FILE parcel index.html --open
}

alert () {
  GREEN='\\033[1;32m'
  NC='\\033[0m' # No Color

  echo "======================================================"
  echo "It looks like you didn't deploy your contract"
  echo ">> Run \${GREEN}'npm run deploy'\${NC} from the your project's root directory"
  echo "This frontend template works with contracts deployed to NEAR TestNet"
  echo "======================================================"
}

if [ -f "$DEV_ACCOUNT_FILE" ]; then
  start
else
  alert
fi
",
]
`;

exports[`create 'js' 'react' 'js': --js_react_js--frontend--ui-components.js 1`] = `
[
  "--js_react_js--frontend--ui-components.js",
  "import React from 'react';

export function SignInPrompt({greeting, onClick}) {
  return (
    <main>
      <h1>
        The contract says: <span className="greeting">{greeting}</span>
      </h1>
      <h3>
        Welcome to NEAR!
      </h3>
      <p>
        Your contract is storing a greeting message in the NEAR blockchain. To
        change it you need to sign in using the NEAR Wallet. It is very simple,
        just use the button below.
      </p>
      <p>
        Do not worry, this app runs in the test network ("testnet"). It works
        just like the main network ("mainnet"), but using NEAR Tokens that are
        only for testing!
      </p>
      <br/>
      <p style={{ textAlign: 'center' }}>
        <button onClick={onClick}>Sign in with NEAR Wallet</button>
      </p>
    </main>
  );
}

export function SignOutButton({accountId, onClick}) {
  return (
    <button style={{ float: 'right' }} onClick={onClick}>
      Sign out {accountId}
    </button>
  );
}

export function EducationalText() {
  return (
    <>
      <p>
        Look at that! A Hello World app! This greeting is stored on the NEAR blockchain. Check it out:
      </p>
      <ol>
        <li>
          Look in <code>frontend/App.js</code> - you'll see <code>getGreeting</code> and <code>setGreeting</code> being called on <code>contract</code>. What's this?
        </li>
        <li>
          Ultimately, this <code>contract</code> code is defined in <code>./contract</code> – this is the source code for your <a target="_blank" rel="noreferrer" href="https://docs.near.org/docs/develop/contracts/overview">smart contract</a>.</li>
        <li>
          When you run <code>npm run deploy</code>, the code in <code>./contract</code> gets deployed to the NEAR testnet. You can see how this happens by looking in <code>package.json</code>.</li>
      </ol>
      <hr />
      <p>
        To keep learning, check out <a target="_blank" rel="noreferrer" href="https://docs.near.org">the NEAR docs</a> or look through some <a target="_blank" rel="noreferrer" href="https://examples.near.org">example apps</a>.
      </p>
    </>
  );
}
",
]
`;

exports[`create 'js' 'react' 'js': --js_react_js--integration-tests--ava.config.cjs 1`] = `
[
  "--js_react_js--integration-tests--ava.config.cjs",
  "require("util").inspect.defaultOptions.depth = 5; // Increase AVA's printing depth

module.exports = {
  timeout: "300000",
  files: ["src/*.ava.ts"],
  failWithoutAssertions: false,
  extensions: ["ts"],
  require: ["ts-node/register"],
};
",
]
`;

exports[`create 'js' 'react' 'js': --js_react_js--integration-tests--package.json 1`] = `
[
  "--js_react_js--integration-tests--package.json",
  "{
  "name": "ava-testing",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "test": "ava"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/node": "^18.6.2",
    "ava": "^4.2.0",
    "near-workspaces": "^3.2.1",
    "ts-node": "^10.8.0",
    "typescript": "^4.7.2"
  },
  "dependencies": {}
}
",
]
`;

exports[`create 'js' 'react' 'js': --js_react_js--integration-tests--src--main.ava.ts 1`] = `
[
  "--js_react_js--integration-tests--src--main.ava.ts",
  "import { Worker, NearAccount } from 'near-workspaces';
import anyTest, { TestFn } from 'ava';

const test = anyTest as TestFn<{
  worker: Worker;
  accounts: Record<string, NearAccount>;
}>;

test.beforeEach(async (t) => {
  // Init the worker and start a Sandbox server
  const worker = await Worker.init();

  // Deploy contract
  const root = worker.rootAccount;
  const contract = await root.createSubAccount('test-account');
  // Get wasm file path from package.json test script in folder above
  await contract.deploy(
    process.argv[2],
  );

  // Save state for test runs, it is unique for each test
  t.context.worker = worker;
  t.context.accounts = { root, contract };
});

test.afterEach.always(async (t) => {
  // Stop Sandbox server
  await t.context.worker.tearDown().catch((error) => {
    console.log('Failed to stop the Sandbox:', error);
  });
});

test('returns the default greeting', async (t) => {
  const { contract } = t.context.accounts;
  const message: string = await contract.view('get_greeting', {});
  t.is(message, 'Hello');
});

test('changes the message', async (t) => {
  const { root, contract } = t.context.accounts;
  await root.call(contract, 'set_greeting', { message: 'Howdy' });
  const message: string = await contract.view('get_greeting', {});
  t.is(message, 'Howdy');
});",
]
`;

exports[`create 'js' 'react' 'js': --js_react_js--package.json 1`] = `
[
  "--js_react_js--package.json",
  "{
  "name": "js_react_js",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "start": "cd frontend && npm run start",
    "deploy": "cd contract && npm run deploy",
    "build": "npm run build:contract && npm run build:web",
    "build:web": "cd frontend && npm run build",
    "build:contract": "cd contract && npm run build",
    "test": "npm run test:unit && npm run test:integration",
    "test:unit": "cd contract && npm test",
    "test:integration": "npm run build:contract && cd integration-tests && npm test -- -- \\"./contract/build/hello_near.wasm\\"",
    "postinstall": "cd frontend && npm install && cd .. && cd integration-tests && npm install && cd .. && cd contract && npm install"
  },
  "devDependencies": {
    "near-cli": "^3.3.0"
  },
  "dependencies": {}
}",
]
`;

exports[`create 'js' 'react' 'js': --js_react_js--rust-toolchain.toml 1`] = `
[
  "--js_react_js--rust-toolchain.toml",
  "[toolchain]
channel = "1.69"
",
]
`;

exports[`create 'js' 'react' 'rust': --js_react_rust--.gitignore 1`] = `
[
  "--js_react_rust--.gitignore",
  "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
# Developer note: near.gitignore will be renamed to .gitignore upon project creation
# dependencies
node_modules
/.pnp
.pnp.js

# build
/out
/dist

# keys
/templates/react/neardev

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local
/.cache

npm-debug.log*
yarn-debug.log*
yarn-error.log*
",
]
`;

exports[`create 'js' 'react' 'rust': --js_react_rust--.gitpod.yml 1`] = `
[
  "--js_react_rust--.gitpod.yml",
  "tasks:
  - init: npm dev
    command: npm run dev
ports:
  - port: 1234
    onOpen: open-browser
",
]
`;

exports[`create 'js' 'react' 'rust': --js_react_rust--README.md 1`] = `
[
  "--js_react_rust--README.md",
  "near-blank-project
==================

This app was initialized with [create-near-app]


Quick Start
===========

If you haven't installed dependencies during setup:

    npm install


Build and deploy your contract to TestNet with a temporary dev account:

    npm run deploy

Test your contract:

    npm test

If you have a frontend, run \`npm start\`. This will run a dev server.


Exploring The Code
==================

1. The smart-contract code lives in the \`/contract\` folder. See the README there for
   more info. In blockchain apps the smart contract is the "backend" of your app.
2. The frontend code lives in the \`/frontend\` folder. \`/frontend/index.html\` is a great
   place to start exploring. Note that it loads in \`/frontend/index.js\`,
   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.
3. Test your contract: \`npm test\`, this will run the tests in \`integration-tests\` directory.


Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. 
When you run \`npm run deploy\`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.
When you're ready to make it permanent, here's how:


Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local \`node_modules\` folder when you ran \`npm install\`, but for best ergonomics you may want to install it globally:

    npm install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all \`near\` commands with \`npx\`

Ensure that it's installed with \`near --version\` (or \`npx near --version\`)


Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as \`your-name.testnet\`, you can deploy your contract to \`near-blank-project.your-name.testnet\`. Assuming you've already created an account on [NEAR Wallet], here's how to create \`near-blank-project.your-name.testnet\`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace \`YOUR-NAME\` below with your actual account name):

      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: deploy the contract
---------------------------

Use the CLI to deploy the contract to TestNet with your account ID.
Replace \`PATH_TO_WASM_FILE\` with the \`wasm\` that was generated in \`contract\` build directory.

    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile PATH_TO_WASM_FILE


Step 3: set contract name in your frontend code
-----------------------------------------------

Modify the line in \`src/config.js\` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-blank-project.YOUR-NAME.testnet'



Troubleshooting
===============

On Windows, if you're seeing an error containing \`EPERM\` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.


  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/concepts/basics/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages
",
]
`;

exports[`create 'js' 'react' 'rust': --js_react_rust--contract--.gitignore 1`] = `
[
  "--js_react_rust--contract--.gitignore",
  "node_modules
build
neardev
",
]
`;

exports[`create 'js' 'react' 'rust': --js_react_rust--contract--README.md 1`] = `
[
  "--js_react_rust--contract--README.md",
  "# Hello NEAR Contract

The smart contract exposes two methods to enable storing and retrieving a greeting in the NEAR network.

\`\`\`ts
@NearBindgen({})
class HelloNear {
  greeting: string = "Hello";

  @view // This method is read-only and can be called for free
  get_greeting(): string {
    return this.greeting;
  }

  @call // This method changes the state, for which it cost gas
  set_greeting({ greeting }: { greeting: string }): void {
    // Record a log permanently to the blockchain!
    near.log(\`Saving greeting \${greeting}\`);
    this.greeting = greeting;
  }
}
\`\`\`

<br />

# Quickstart

1. Make sure you have installed [node.js](https://nodejs.org/en/download/package-manager/) >= 16.
2. Install the [\`NEAR CLI\`](https://github.com/near/near-cli#setup)

<br />

## 1. Build and Deploy the Contract
You can automatically compile and deploy the contract in the NEAR testnet by running:

\`\`\`bash
npm run deploy
\`\`\`

Once finished, check the \`neardev/dev-account\` file to find the address in which the contract was deployed:

\`\`\`bash
cat ./neardev/dev-account
# e.g. dev-1659899566943-21539992274727
\`\`\`

<br />

## 2. Retrieve the Greeting

\`get_greeting\` is a read-only method (aka \`view\` method).

\`View\` methods can be called for **free** by anyone, even people **without a NEAR account**!

\`\`\`bash
# Use near-cli to get the greeting
near view <dev-account> get_greeting
\`\`\`

<br />

## 3. Store a New Greeting
\`set_greeting\` changes the contract's state, for which it is a \`call\` method.

\`Call\` methods can only be invoked using a NEAR account, since the account needs to pay GAS for the transaction.

\`\`\`bash
# Use near-cli to set a new greeting
near call <dev-account> set_greeting '{"greeting":"howdy"}' --accountId <dev-account>
\`\`\`

**Tip:** If you would like to call \`set_greeting\` using your own account, first login into NEAR using:

\`\`\`bash
# Use near-cli to login your NEAR account
near login
\`\`\`

and then use the logged account to sign the transaction: \`--accountId <your-account>\`.",
]
`;

exports[`create 'js' 'react' 'rust': --js_react_rust--contract--build.sh 1`] = `
[
  "--js_react_rust--contract--build.sh",
  "#!/bin/sh

echo ">> Building contract"

near-sdk-js build src/contract.ts build/hello_near.wasm
",
]
`;

exports[`create 'js' 'react' 'rust': --js_react_rust--contract--deploy.sh 1`] = `
[
  "--js_react_rust--contract--deploy.sh",
  "#!/bin/sh

./build.sh

if [ $? -ne 0 ]; then
  echo ">> Error building contract"
  exit 1
fi

echo ">> Deploying contract"

# https://docs.near.org/tools/near-cli#near-dev-deploy
near dev-deploy --wasmFile build/hello_near.wasm",
]
`;

exports[`create 'js' 'react' 'rust': --js_react_rust--contract--package.json 1`] = `
[
  "--js_react_rust--contract--package.json",
  "{
  "name": "hello_near",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "type": "module",
  "scripts": {
    "build": "./build.sh",
    "deploy": "./deploy.sh",
    "test": "echo use integration-tests"
  },
  "dependencies": {
    "near-cli": "^3.4.2",
    "near-sdk-js": "1.0.0"
  },
  "devDependencies": {
    "typescript": "^4.7.4",
    "ts-morph": "^16.0.0"
  }
}
",
]
`;

exports[`create 'js' 'react' 'rust': --js_react_rust--contract--src--contract.ts 1`] = `
[
  "--js_react_rust--contract--src--contract.ts",
  "// Find all our documentation at https://docs.near.org
import { NearBindgen, near, call, view } from 'near-sdk-js';

@NearBindgen({})
class HelloNear {
  message: string = "Hello";

  @view({}) // This method is read-only and can be called for free
  get_greeting(): string {
    return this.message;
  }

  @call({}) // This method changes the state, for which it cost gas
  set_greeting({ message }: { message: string }): void {
    near.log(\`Saving greeting \${message}\`);
    this.message = message;
  }
}",
]
`;

exports[`create 'js' 'react' 'rust': --js_react_rust--contract--tsconfig.json 1`] = `
[
  "--js_react_rust--contract--tsconfig.json",
  "{
  "compilerOptions": {
    "experimentalDecorators": true,
    "target": "es5",
    "noEmit": true
  },
  "exclude": [
    "node_modules"
  ],
}",
]
`;

exports[`create 'js' 'react' 'rust': --js_react_rust--frontend--App.js 1`] = `
[
  "--js_react_rust--frontend--App.js",
  "import 'regenerator-runtime/runtime';
import React from 'react';

import './assets/global.css';

import { EducationalText, SignInPrompt, SignOutButton } from './ui-components';


export default function App({ isSignedIn, contractId, wallet }) {
  const [valueFromBlockchain, setValueFromBlockchain] = React.useState();

  const [uiPleaseWait, setUiPleaseWait] = React.useState(true);

  // Get blockchian state once on component load
  React.useEffect(() => {
    getGreeting()
      .then(setValueFromBlockchain)
      .catch(alert)
      .finally(() => {
        setUiPleaseWait(false);
      });
    }
  , []);

  /// If user not signed-in with wallet - show prompt
  if (!isSignedIn) {
    // Sign-in flow will reload the page later
    return <SignInPrompt greeting={valueFromBlockchain} onClick={() => wallet.signIn()}/>;
  }

  function changeGreeting(e) {
    e.preventDefault();
    setUiPleaseWait(true);
    const { greetingInput } = e.target.elements;
    
    // use the wallet to send the greeting to the contract
    wallet.callMethod({ method: 'set_greeting', args: { message: greetingInput.value }, contractId })
      .then(async () => {return getGreeting();})
      .then(setValueFromBlockchain)
      .finally(() => {
        setUiPleaseWait(false);
      });
  }

  function getGreeting(){
    // use the wallet to query the contract's greeting
    return wallet.viewMethod({ method: 'get_greeting', contractId })
  }

  return (
    <>
      <SignOutButton accountId={wallet.accountId} onClick={() => wallet.signOut()}/>
      <main className={uiPleaseWait ? 'please-wait' : ''}>
        <h1>
          The contract says: <span className="greeting">{valueFromBlockchain}</span>
        </h1>
        <form onSubmit={changeGreeting} className="change">
          <label>Change greeting:</label>
          <div>
            <input
              autoComplete="off"
              defaultValue={valueFromBlockchain}
              id="greetingInput"
            />
            <button>
              <span>Save</span>
              <div className="loader"></div>
            </button>
          </div>
        </form>
        <EducationalText/>
      </main>
    </>
  );
}",
]
`;

exports[`create 'js' 'react' 'rust': --js_react_rust--frontend--assets--favicon.ico 1`] = `
[
  "--js_react_rust--frontend--assets--favicon.ico",
  "�PNG

   
IHDR  @  @   ��Na   	pHYs  %  %IR$�    IDATx���p��}�qɖdK����6 c������6	?B�
m�����N���܄?n&����M��t�!�^2-�9���ޅ��p�~�#l�1�e�mY��Y�1�m�c��y����4F�����v��/_|�
 �� " $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ �[e�j�عq����;���pG[뎡��y�O��иh���Ο�����;�g��G��ŗ�ٱ��pGOW�)�����q55���]�h�'?2y֌�/!���#.��qp����/��]7�b�Y��MW�Xt劺I�g�B8�]��nx��Z��t��kΠ����K/\\q�ͽ����J�Ҽ����7_ze�w��U+>���ia�g�^�a����������������/�؟��^	,-�랹���{���H�-[|����E>P��
?������+��7~ܒիd,{����<q�E��p�V���[������ֺ��\`L��_��߿y�Mk
>C&,O]�O��Ћ?\\[ƣ�k���s7,��_����?������\\��S_���#K��������W�^��V�Xs׭�n�~��o���YSW���[?t͇>Cl�?���"�IK���w�����[o<�Ҝ%M
ӧ��9���<�寗���۷��:��sٲ�O��e��y��o���ݓ�Au�?��/�=�5�b�4���׾]�k��-����oZ���3D�8�1X�4��p��������!�\\3_~��G������e"�z
Ұʔ�5S�r"\`9H�^�vpw*��1�vnܒ�5��G�|���w���G��kk��ĽD9���?�ڷ��;
>Cn�Z�����N�~��c�>�l��	F�b�j�h�羮Ñz�ֺ��� �����[��^3����s_:c]FF�b{���y�װ��rC�[��@���7��]�����%z�!��vn�R�������y]���i��ex���ݶ}��-.Ǹ,��7b�~�>���4�s�X��a�' 4�������U.F��y�_�7��tú�u�{���������(1'-������P?J�I�Bji^W���kF�yhk��Ɉ����FXPRK�S9�Qbtm����=��~�*���sp��@��Qb\\]�?��c=�}�|���F$\`�!��2J�h�)_ܡ��U�,��P+�a1J'��N���2&\`�t�w���┌ci���_n��X�Zw��#\`�d��F�Q�4������U9��\`�V��DF���>�R	?\\��\`v��"�H4JLY�w��
��ʉ�z�<,F�i|�W������ʆ��񂣐Qbj"����U�W�t%&e�)_~˓#iF��x��ԋ��3JL��>��h�%�WK���M���˥u�����E�0�K��u�� I���Qb�ܽ/ק|�#�Ēx���}K�H���Qbix��0�1Jkټ�y0B2J;�����|���Q�X����g�QUuu~�F~������M�>���PUU=n\\���>#0��"����G��ށv���0B0b3J,��������謮��0�0�3J��;c���ή�q��h90J������;vU
dk�����	�đy�;�߽嵣Ū�0b02a�8-�Om[�B�����0�0�a�8,�ֽ��?Hӱ~i�Y1J��;�Z���UJÈI�ȍQ�ڿs��o|w�MF\\F��Ϡ�����|����X�4���<%�RwG�c��ǎ��O������'��Sz��ص���Pi�	�2J|����]/o;�+
#<#gF�'�����/�<��ws�a�&\`d�(���j�/ox���[�adB��_����w��?�
#FE��Q���m��\`OWw�I��0� \`T��%�tv��G{�{N�G�ȉ�Q)*m�������j{��i90*HE�7?��}���ڼ7BF6��R!��W��ӻ^�z�.F�����(q��[�oh썆�1�e<Jlkݾy����l���>� \`�J��A�����o~��C�t���?�/|�A������%v:������9ћ�v�m�46-,�0��1*�MW�yk�s��(�������ޞ�cMJ�a���g��YUp0<�h-]�j�M����lF��~���kO�
[�z��O�)86���햦�+���F�[�z�㝃�*�v��-[�殨7�I��Qk�iAГz��s㖶��&'��\\�����(8!�8�&��w%�X�k;vmz����۰	�n�򿭛d:O�E3e���R:���ן�8���6aR�M_�S�(.���K�ȁC��7�"��]���o<7�=�$K�(2�����y����z{O�'�]w��{���U�0��(qL�v�l[�Bo_ՉT$ܰ��|�G.O�|��1&����o�<t�ؽsi7�˖]�'���$:cL%��7_z�c���<j��:{�շݒ�9$�X1J,����:��ޓ�l�&5N��[]����!90ƐQbxk�W__?�lX]C�uw��z1���e�X]��_y�X��o�u���Z87��F��1g�8J]�;v��e0-�7l���4k��=cT��G���w�������x�οne�?VG�(�đ���}kskOW��NT'ް�+.^񙏗�,Q��1J�}���s�s�I�z�næ/��]�(1�t�������84���6mެk��o�N�P��FI%Q���Gߣ�X{RnXm��K��E�	�f���:�9�ή�'�G�rî��ߜ6w�X�($\`��Q��tvڳ�=�H�a����sg��h\`	e\`�x:=]��w����R�d�_włKOs(0���0J,���׾�����w�.�6l��%���>)���Q6F�'���;�{_oO�\`*oٍؔ]�т���0��(�����r��}D�
�2k��}}�@�	ef�XUUu�\`{����7q�nX턺7���PWpPjF�U�(�������og�h�j&�]����8er�A@�Wɣ�������'�'�-���g�UpPF*s�����u�ȱ�$߰�lΒEe#\`���F�����G�T��J�
�s~����/8('#!4J�����x�׉tO�a���\\|�� e&\`��BF��=����G��z�&͘�d�UG �'\`$'�Qb_o_UU�IMJ�a5�.��55u��'\`$'�Qb��iDU�
���[���ת�0R��(�DB�oXӕ+�O-8 H�����G�v�O�?��[����y��v�f�3o�9��iH�����G��6lڼYg_���ۅ���y��^��M^�₂oR$\`�.�QbJ
���شr��ښ��R$\`��+%�Ѱ�u�/�P�D��!�WJL�a�/�8eR�w�0�����ڰ���)_�#\`D��+%��a��ϙ:gf�w�0����Kް)sg.ZX�}@ F0��}s	V�P�x�',��O�o�\\���M�8���ƍ_������1n�����s��	Q����cٰY:��~B��"0���Ǧag-��^d@��-��o.z�&ϜQ?}J���0b��XԆ5L�2y�Y�I�/�Qb�V;qٍ�4D%\`� �Q�V3�nڼY�(&\`d"�Q�(6n��)�f|%d��|�?JQêǏ�<k��|�#+���߰��S��Y0�R���4l�I��E���T�(qh
��0A�Ș����%~P�����M
yK�H��SE�O߰����&|5dE��VE�Oհ�7��8�����K!+F�*b�Xа�u��E%0rV)�ē6���Z��F�*e�8ذ���|�$\`�RF�Pa��P)�D�$F���Q"T��T�(*��QA*h�@��,4J��	�(� \`T"�DȀ�Q��!:�r%BhF�2J����f�q	��(�00J����!"�c�!�c�!�w%B �a�Q���������(B0*CowO__�Pf��0*BoO�@�����RÌ!qF�z:�n~���o�
3J��	���������7܆%B����vww�wFkd
3J�d	����=r���x�F�0�DH�������������;��mÌ!AF����������[�?�"4�(R#\`d���}=�]U�����0�DH����C{��WU�@���0�DH�����}�9p��s���0�DH����#����n�ƦaF��#]�;���}�Ic�0�DH�����#��^���&�mÌ�����z����zow���aF�PvFl}����l���=�6�(�K��m��׺ڏ���
3J�20۳��#��VYf��"\`D��������?P��6�(�B�����{��q�7eo�Q"���O�ûZ���O�m�Q"���̑���?��x�j�Q"���Iow���7�tu�*��%B)	a�v�l[�B����J�aF�P2Fo<���;�N�Q�
3J��0bx㹗���X\`�o�Q"���@�k;�^�1���I�aF�PF��Zw������/PÌa�	I;�������!��0�DSF������g��tu�G��%��0�������tv�V�
;E��2J�1"\`����{�Ï���7i7�������tg�(Ƃ���mO=���c�H�a?H�ǟ�4%�X0�����j�Vur~nXUuuM]��C�D(:#-�^޺cC�@4��"oXUU��	U����dF�P\\FB�l}��G�8���6x���5�(�H�H��=�6���w˔|�������)%B�I8r��3�?��q�x�Ro��)�����)%BQ������?���H�{��p�j'N��8a���(�B�(�u�������T��V;qB����<iF�0zF�mx��G���2%ڰq55�fL+�3J�Q0�i���x~�ɡJ�a���M�;�z\\�~j�a4��y㹗Z��z�S��mXUUմ���X�AF�0bFy�ݶ������䖤ݰ��g�L��se�##\`��;;w?�?�ϱ�Ghشy��n4h�##\`�ZwG�c���9я�6�q��g�gf�# \`�TwG����ݮ���mI�
��>e���%8EF�0\\FI����i���
��f�j&֝�pn�ΏQ"��Q:���������OI6��~�������Q"��Q"/���mO�p�>%ְ�q�f�wN��5�(�H�(��O>��?=�w�>�԰��?�V)�\`�C$\`����x�{F���Y�h¤�2^1�a(�����7��o����W�
klZ8u�̲_+��	c��p����t����߰isg�\\�0���Q"���1V�w<���ypϾ��߰	��_|~R��D8c�<��h{m��)J�a&7,���F�p:ƘX��ﶮ���ޤ۰q5��]�||mM�W�D8��Z�׵�]w�ޤذq������OL��\`��$\`YK�߸������\`���iS�%B!���Z����*B�^rA�G���}��ik���/}���Ix�ݰ�s�Y�(��(N&\`GW{G�=���^�Rmؔ�3λ��p��Q"� \`AW{���7m�;N�O�װ��S��^U��\`�'E�����^�Rj��ښ�n�hM]m�w�Q"0F�{ؼv�ϧѰ�5�o\\�^���xU�h�4�{�k���$а�����8��;��(�Qx�װ��aK?~UcS*��;zF�T8���԰��7��evqG%|�A�(��7l梳/�ĵ�]��G��a0ʤ�
�<s�E�_��z��!\`�OI6qʤ����fB]�t�Q"���QVcܰ����>�ɼ�5(�(FF�(��l؇���sfV�Ez�# \`$\`lv��o<7�BodB�a��4�a�V]r�e�*��
=J��0�Q���}����ʼd��FJ�Ѱ�sg.�iM%_�F�T#1�k�Թ�>���[[?��/V�D*�����6�fB���ߤ^��ɞ���5l�]�N_0�z�Q"y0R5̆���_���%�7#aCn��?�h�%.�BF�dL�H�v�U�.�tE���(�\\	�;cæ/�s�m����(�,	��ag-��ow	�Q"�0�(hX�ĺ���Y(�Q"�0�8�a��n��6y�Y.��3J$3F(�v��F���|Q%�#������7�|�J��%�
#�%�W͏�Q"y0"��l��z(�D2 \`��ش����py�Q"�	1�5��?�E�$��1J$:#��z}��UtF��&\`p�ή�.��\`�H\\F�V�ykӕ�c�(����-Y�j�U.��f�HDF��V�0�/�D�0�ش@�J�(�p�M�5�h���E�HN]C���]���(�@��|��ۍ���(�(���������B)/�DB0����F�0J$}F*��^u�m��8a�H�,�\\�(nlZp�z%��F�nq�#\`�d�qc���4U�(���p,���6p�k�_s׭ꕬ�%��Õ=ffv���|�F󉫐Qb~?\\��\`2��������P	�D��G����T����?w��|ُ��;�g��~�/Y����X�aҕ�(1��J#\`�4]yI�C�J�Ae<J��Ǫ	X<SfϘ�lq��p4_�ab�r�8o��)�g|��	XHK�\\�;x��/������%����p��5��̊�c]C�g���f �Q�Y3�����.����[����(1��,��kV���������;7'y���Z�%\`�]��7G�旬^���k
>Ll��Bh����\\��y���*�(q�M���Fhۧ�x{�w$66-���;
>L>���x*}t��Y3V�ukUuu�G10;�>) �(�{ �A����5����&x��y�#*A�Q�Al,���o]�kW�v G�*�;�R�C4l���Z�A�2�?������[�����8Yc����^9��?��J?�hZ���m��m��{<u
����n[���>C��O=�_�ų��=	�zeF��Ҵry�û_y�\\5���ir%l�[�[;�L�4�5�_w���+3��s.[v��9�?�����ć6o������0evc�g�,
ӧ.����;�ڿ���s9n?��e�!��|�a~����}��w'^��<���y�_�������)��7���s7Z�fI�r���������1=ƣ/��^c�S:�{��>���
����jlZp�m��C;c��G����k׍�=�o�u��~A��vn����z�͗^)ͩ�2k�埻�#^��J��7�����ug�Թ3/���o���C[��
��v��ucw��-[�t�U�U!���ڴuÃ������ݯ�0}����_������4IDW{Ƕ�Z�o(���zUӕ��+��X�:�g�K?�Ů��ڶ����9]���k�j�-����noQt;7nٹqK۶�퇇uccӂ�����?�i���ηѨL@H^J
������������������������������������������������������������������������@D>�  �IDAT���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������x����?�"7�>\`�    IEND�B\`�",
]
`;

exports[`create 'js' 'react' 'rust': --js_react_rust--frontend--assets--global.css 1`] = `
[
  "--js_react_rust--frontend--assets--global.css",
  "* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #FF585D;
  --secondary: #0072CE;

  background-color: var(--bg);
  color: var(--fg);
  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 1em;
}

main {
  margin: 0 auto;
  max-width: 26em;
}

main.please-wait {
}

h1 {
  background-image: url(./logo-black.svg);
  background-position: center 1em;
  background-repeat: no-repeat;
  background-size: auto 1.5em;
  margin-top: 0;
  padding: 3.5em 0 0;
  text-align: center;
  font-size: 1.5em;
}
.greeting {
  color: var(--secondary);
  text-decoration: underline;
}
h2 {
  text-align: center;
}

.please-wait .change {
  pointer-events: none;
}

ul.information  {
  margin: 2em 0 2em 0;
  padding: 0;
  text-align: left;
  font-size: 0.8em;

}
.information li:first-child {
  border-top: 1px solid var(--light-gray);
}
.information li {
  padding: 0.5em 0;
  border-bottom: 1px solid var(--light-gray);
  list-style: none;
}

.change {
  display: flex;
  flex-direction: column;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
  font-size: 1em;
  border: 2px solid var(--light-gray);
  padding: 0.5em;
}
.change > div {
  display: flex;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
}
.change input {
  flex: 1;
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}
.change label {
  display: block;
  text-align: left;
  margin-right: 10px;
  padding-bottom: 0.5em;
}
.change button {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--secondary);
}

button, input {
  font: inherit;
  outline: none;
}
main.please-wait .change button {
  position: relative;
  pointer-events: none;
  background-color: white;
}
main.please-wait .change button span {
  visibility: hidden;
}
button {
  background-color: var(--secondary);
  border-radius: 5px;
  border: none;
  color: #efefef;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}
button:hover, button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}
input {
  background-color: var(--light-gray);
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 0.5em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

@media (prefers-color-scheme: dark) {
  html {
    --bg: #1e1e1e;
    --fg: #efefef;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
  }
  h1 {
    background-image: url(./logo-white.svg);
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}

main.please-wait .loader,
main.please-wait .loader:after{
  display: inline-block;
}
.loader,
.loader:after {
  display: none;
  border-radius: 50%;
  width: 20px;
  height: 20px;
}
.loader {
  font-size: 10px;
  position: absolute;
  top: calc(50% - 10px);
  left: calc(50% - 10px);
  text-indent: -9999em;
  border-top: 3px solid var(--secondary);
  border-right: 3px solid var(--secondary);
  border-bottom: 3px solid var(--secondary);
  border-left: 3px solid #ffffff;
  -webkit-transform: translateZ(0);
  -ms-transform: translateZ(0);
  transform: translateZ(0);
  -webkit-animation: load8 1.1s infinite linear;
  animation: load8 1.1s infinite linear;
}
@-webkit-keyframes load8 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
@keyframes load8 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
",
]
`;

exports[`create 'js' 'react' 'rust': --js_react_rust--frontend--assets--logo-black.svg 1`] = `
[
  "--js_react_rust--frontend--assets--logo-black.svg",
  "<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>",
]
`;

exports[`create 'js' 'react' 'rust': --js_react_rust--frontend--assets--logo-white.svg 1`] = `
[
  "--js_react_rust--frontend--assets--logo-white.svg",
  "<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>",
]
`;

exports[`create 'js' 'react' 'rust': --js_react_rust--frontend--index.html 1`] = `
[
  "--js_react_rust--frontend--index.html",
  "<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="assets/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="assets/favicon.ico" />
    <title>Welcome to NEAR with React</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <script src="./index.js" type="module"></script>
  </body>
</html>
",
]
`;

exports[`create 'js' 'react' 'rust': --js_react_rust--frontend--index.js 1`] = `
[
  "--js_react_rust--frontend--index.js",
  "// React
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

// NEAR
import { Wallet } from './near-wallet';

const CONTRACT_ADDRESS = process.env.CONTRACT_NAME

// When creating the wallet you can optionally ask to create an access key
// Having the key enables to call non-payable methods without interrupting the user to sign
const wallet = new Wallet({ createAccessKeyFor: CONTRACT_ADDRESS })

// Setup on page load
window.onload = async () => {
  const isSignedIn = await wallet.startUp()
 
  ReactDOM.render(
    <App isSignedIn={isSignedIn} contractId={CONTRACT_ADDRESS} wallet={wallet} />,
    document.getElementById('root')
  );
}",
]
`;

exports[`create 'js' 'react' 'rust': --js_react_rust--frontend--near-wallet.js 1`] = `
[
  "--js_react_rust--frontend--near-wallet.js",
  "/* A helper file that simplifies using the wallet selector */

// near api js
import { providers } from 'near-api-js';

// wallet selector
import '@near-wallet-selector/modal-ui/styles.css';
import { setupModal } from '@near-wallet-selector/modal-ui';
import { setupWalletSelector } from '@near-wallet-selector/core';
import { setupMyNearWallet } from '@near-wallet-selector/my-near-wallet';

const THIRTY_TGAS = '30000000000000';
const NO_DEPOSIT = '0';

// Wallet that simplifies using the wallet selector
export class Wallet {
  walletSelector;
  wallet;
  network;
  createAccessKeyFor;

  constructor({ createAccessKeyFor = undefined, network = 'testnet' }) {
    // Login to a wallet passing a contractId will create a local
    // key, so the user skips signing non-payable transactions.
    // Omitting the accountId will result in the user being
    // asked to sign all transactions.
    this.createAccessKeyFor = createAccessKeyFor
    this.network = 'testnet'
  }

  // To be called when the website loads
  async startUp() {
    this.walletSelector = await setupWalletSelector({
      network: this.network,
      modules: [setupMyNearWallet()],
    });

    const isSignedIn = this.walletSelector.isSignedIn();

    if (isSignedIn) {
      this.wallet = await this.walletSelector.wallet();
      this.accountId = this.walletSelector.store.getState().accounts[0].accountId;
    }

    return isSignedIn;
  }

  // Sign-in method
  signIn() {
    const description = 'Please select a wallet to sign in.';
    const modal = setupModal(this.walletSelector, { contractId: this.createAccessKeyFor, description });
    modal.show();
  }

  // Sign-out method
  signOut() {
    this.wallet.signOut();
    this.wallet = this.accountId = this.createAccessKeyFor = null;
    window.location.replace(window.location.origin + window.location.pathname);
  }

  // Make a read-only call to retrieve information from the network
  async viewMethod({ contractId, method, args = {} }) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    let res = await provider.query({
      request_type: 'call_function',
      account_id: contractId,
      method_name: method,
      args_base64: Buffer.from(JSON.stringify(args)).toString('base64'),
      finality: 'optimistic',
    });
    return JSON.parse(Buffer.from(res.result).toString());
  }

  // Call a method that changes the contract's state
  async callMethod({ contractId, method, args = {}, gas = THIRTY_TGAS, deposit = NO_DEPOSIT }) {
    // Sign a transaction with the "FunctionCall" action
    return await this.wallet.signAndSendTransaction({
      signerId: this.accountId,
      receiverId: contractId,
      actions: [
        {
          type: 'FunctionCall',
          params: {
            methodName: method,
            args,
            gas,
            deposit,
          },
        },
      ],
    });
  }

  // Get transaction result from the network
  async getTransactionResult(txhash) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    // Retrieve transaction result from the network
    const transaction = await provider.txStatus(txhash, 'unnused');
    return providers.getTransactionLastResult(transaction);
  }
}",
]
`;

exports[`create 'js' 'react' 'rust': --js_react_rust--frontend--package.json 1`] = `
[
  "--js_react_rust--frontend--package.json",
  "{
  "name": "my-near-app",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "start": "./start.sh",
    "build": "parcel build index.html --public-url ./"
  },
  "devDependencies": {
    "@babel/core": "^7.22.5",
    "@babel/preset-env": "^7.22.5",
    "@babel/preset-react": "^7.22.5",
    "@types/node": "^20.3.2",
    "buffer": "^5.5.0||^6.0.0",
    "env-cmd": "^10.1.0",
    "events": "^3.1.0",
    "https-browserify": "^1.0.0",
    "nodemon": "^2.0.22",
    "parcel": "^2.9.3",
    "process": "^0.11.10",
    "punycode": "^1.4.1",
    "react-test-renderer": "^18.2.0",
    "stream-http": "^3.1.0",
    "ts-node": "^10.9.1",
    "typescript": "^5.1.3",
    "url": "^0.11.0"
  },
  "dependencies": {
    "@near-wallet-selector/core": "^8.1.4",
    "@near-wallet-selector/modal-ui": "^8.1.4",
    "@near-wallet-selector/my-near-wallet": "^8.1.4",
    "near-api-js": "^2.1.4",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "regenerator-runtime": "^0.13.11"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
",
]
`;

exports[`create 'js' 'react' 'rust': --js_react_rust--frontend--start.sh 1`] = `
[
  "--js_react_rust--frontend--start.sh",
  "#!/bin/sh

CONTRACT_DIRECTORY=../contract
DEV_ACCOUNT_FILE="\${CONTRACT_DIRECTORY}/neardev/dev-account.env"

start () {
  echo The app is starting!
  env-cmd -f $DEV_ACCOUNT_FILE parcel index.html --open
}

alert () {
  GREEN='\\033[1;32m'
  NC='\\033[0m' # No Color

  echo "======================================================"
  echo "It looks like you didn't deploy your contract"
  echo ">> Run \${GREEN}'npm run deploy'\${NC} from the your project's root directory"
  echo "This frontend template works with contracts deployed to NEAR TestNet"
  echo "======================================================"
}

if [ -f "$DEV_ACCOUNT_FILE" ]; then
  start
else
  alert
fi
",
]
`;

exports[`create 'js' 'react' 'rust': --js_react_rust--frontend--ui-components.js 1`] = `
[
  "--js_react_rust--frontend--ui-components.js",
  "import React from 'react';

export function SignInPrompt({greeting, onClick}) {
  return (
    <main>
      <h1>
        The contract says: <span className="greeting">{greeting}</span>
      </h1>
      <h3>
        Welcome to NEAR!
      </h3>
      <p>
        Your contract is storing a greeting message in the NEAR blockchain. To
        change it you need to sign in using the NEAR Wallet. It is very simple,
        just use the button below.
      </p>
      <p>
        Do not worry, this app runs in the test network ("testnet"). It works
        just like the main network ("mainnet"), but using NEAR Tokens that are
        only for testing!
      </p>
      <br/>
      <p style={{ textAlign: 'center' }}>
        <button onClick={onClick}>Sign in with NEAR Wallet</button>
      </p>
    </main>
  );
}

export function SignOutButton({accountId, onClick}) {
  return (
    <button style={{ float: 'right' }} onClick={onClick}>
      Sign out {accountId}
    </button>
  );
}

export function EducationalText() {
  return (
    <>
      <p>
        Look at that! A Hello World app! This greeting is stored on the NEAR blockchain. Check it out:
      </p>
      <ol>
        <li>
          Look in <code>frontend/App.js</code> - you'll see <code>getGreeting</code> and <code>setGreeting</code> being called on <code>contract</code>. What's this?
        </li>
        <li>
          Ultimately, this <code>contract</code> code is defined in <code>./contract</code> – this is the source code for your <a target="_blank" rel="noreferrer" href="https://docs.near.org/docs/develop/contracts/overview">smart contract</a>.</li>
        <li>
          When you run <code>npm run deploy</code>, the code in <code>./contract</code> gets deployed to the NEAR testnet. You can see how this happens by looking in <code>package.json</code>.</li>
      </ol>
      <hr />
      <p>
        To keep learning, check out <a target="_blank" rel="noreferrer" href="https://docs.near.org">the NEAR docs</a> or look through some <a target="_blank" rel="noreferrer" href="https://examples.near.org">example apps</a>.
      </p>
    </>
  );
}
",
]
`;

exports[`create 'js' 'react' 'rust': --js_react_rust--integration-tests--Cargo.toml 1`] = `
[
  "--js_react_rust--integration-tests--Cargo.toml",
  "[package]
name = "integration-tests"
version = "1.0.0"
publish = false
edition = "2018"

[dev-dependencies]
anyhow = "1.0"
borsh = "0.9"
maplit = "1.0"
near-units = "0.2.0"
# arbitrary_precision enabled for u128 types that workspaces requires for Balance types
serde_json = { version = "1.0", features = ["arbitrary_precision"] }
tokio = { version = "1.18.1", features = ["full"] }
tracing = "0.1"
tracing-subscriber = { version = "0.3.11", features = ["env-filter"] }
workspaces = "0.6.0"
pkg-config = "0.3.1"

[[example]]
name = "integration-tests"
path = "src/tests.rs"
",
]
`;

exports[`create 'js' 'react' 'rust': --js_react_rust--integration-tests--src--tests.rs 1`] = `
[
  "--js_react_rust--integration-tests--src--tests.rs",
  "use std::{env, fs};
use near_units::parse_near;
use serde_json::json;
use workspaces::{Account, Contract};

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    let wasm_arg: &str = &(env::args().nth(1).unwrap());
    let wasm_filepath = fs::canonicalize(env::current_dir()?.join(wasm_arg))?;

    let worker = workspaces::sandbox().await?;
    let wasm = std::fs::read(wasm_filepath)?;
    let contract = worker.dev_deploy(&wasm).await?;

    // create accounts
    let account = worker.dev_create_account().await?;
    let alice = account
        .create_subaccount( "alice")
        .initial_balance(parse_near!("30 N"))
        .transact()
        .await?
        .into_result()?;

    // begin tests
    test_default_message(&alice, &contract).await?;
    test_changes_message(&alice, &contract).await?;
    Ok(())
}

async fn test_default_message(
    user: &Account,
    contract: &Contract,
) -> anyhow::Result<()> {
    let message: String = user
        .call( contract.id(), "get_greeting")
        .args_json(json!({}))
        .transact()
        .await?
        .json()?;

    assert_eq!(message, "Hello".to_string());
    println!("      Passed ✅ gets default message");
    Ok(())
}

async fn test_changes_message(
    user: &Account,
    contract: &Contract,
) -> anyhow::Result<()> {
    user.call(contract.id(), "set_greeting")
        .args_json(json!({"message": "Howdy"}))
        .transact()
        .await?
        .into_result()?;

    let message: String = user
        .call(contract.id(), "get_greeting")
        .args_json(json!({}))
        .transact()
        .await?
        .json()?;

    assert_eq!(message, "Howdy".to_string());
    println!("      Passed ✅ changes message");
    Ok(())
}",
]
`;

exports[`create 'js' 'react' 'rust': --js_react_rust--package.json 1`] = `
[
  "--js_react_rust--package.json",
  "{
  "name": "js_react_rust",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "start": "cd frontend && npm run start",
    "deploy": "cd contract && npm run deploy",
    "build": "npm run build:contract && npm run build:web",
    "build:web": "cd frontend && npm run build",
    "build:contract": "cd contract && npm run build",
    "test": "npm run test:unit && npm run test:integration",
    "test:unit": "cd contract && npm test",
    "test:integration": "npm run build:contract && cd integration-tests && cargo run --example integration-tests \\"../contract/build/hello_near.wasm\\"",
    "postinstall": "cd frontend && npm install && cd .. && echo rs tests && cd contract && npm install"
  },
  "devDependencies": {
    "near-cli": "^3.3.0"
  },
  "dependencies": {}
}",
]
`;

exports[`create 'js' 'react' 'rust': --js_react_rust--rust-toolchain.toml 1`] = `
[
  "--js_react_rust--rust-toolchain.toml",
  "[toolchain]
channel = "1.69"
",
]
`;

exports[`create 'js' 'vanilla' 'js': --js_vanilla_js--.gitignore 1`] = `
[
  "--js_vanilla_js--.gitignore",
  "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
# Developer note: near.gitignore will be renamed to .gitignore upon project creation
# dependencies
node_modules
/.pnp
.pnp.js

# build
/out
/dist

# keys
/templates/react/neardev

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local
/.cache

npm-debug.log*
yarn-debug.log*
yarn-error.log*
",
]
`;

exports[`create 'js' 'vanilla' 'js': --js_vanilla_js--.gitpod.yml 1`] = `
[
  "--js_vanilla_js--.gitpod.yml",
  "tasks:
  - init: npm dev
    command: npm run dev
ports:
  - port: 1234
    onOpen: open-browser
",
]
`;

exports[`create 'js' 'vanilla' 'js': --js_vanilla_js--README.md 1`] = `
[
  "--js_vanilla_js--README.md",
  "near-blank-project
==================

This app was initialized with [create-near-app]


Quick Start
===========

If you haven't installed dependencies during setup:

    npm install


Build and deploy your contract to TestNet with a temporary dev account:

    npm run deploy

Test your contract:

    npm test

If you have a frontend, run \`npm start\`. This will run a dev server.


Exploring The Code
==================

1. The smart-contract code lives in the \`/contract\` folder. See the README there for
   more info. In blockchain apps the smart contract is the "backend" of your app.
2. The frontend code lives in the \`/frontend\` folder. \`/frontend/index.html\` is a great
   place to start exploring. Note that it loads in \`/frontend/index.js\`,
   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.
3. Test your contract: \`npm test\`, this will run the tests in \`integration-tests\` directory.


Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. 
When you run \`npm run deploy\`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.
When you're ready to make it permanent, here's how:


Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local \`node_modules\` folder when you ran \`npm install\`, but for best ergonomics you may want to install it globally:

    npm install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all \`near\` commands with \`npx\`

Ensure that it's installed with \`near --version\` (or \`npx near --version\`)


Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as \`your-name.testnet\`, you can deploy your contract to \`near-blank-project.your-name.testnet\`. Assuming you've already created an account on [NEAR Wallet], here's how to create \`near-blank-project.your-name.testnet\`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace \`YOUR-NAME\` below with your actual account name):

      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: deploy the contract
---------------------------

Use the CLI to deploy the contract to TestNet with your account ID.
Replace \`PATH_TO_WASM_FILE\` with the \`wasm\` that was generated in \`contract\` build directory.

    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile PATH_TO_WASM_FILE


Step 3: set contract name in your frontend code
-----------------------------------------------

Modify the line in \`src/config.js\` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-blank-project.YOUR-NAME.testnet'



Troubleshooting
===============

On Windows, if you're seeing an error containing \`EPERM\` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.


  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/concepts/basics/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages
",
]
`;

exports[`create 'js' 'vanilla' 'js': --js_vanilla_js--contract--.gitignore 1`] = `
[
  "--js_vanilla_js--contract--.gitignore",
  "node_modules
build
neardev
",
]
`;

exports[`create 'js' 'vanilla' 'js': --js_vanilla_js--contract--README.md 1`] = `
[
  "--js_vanilla_js--contract--README.md",
  "# Hello NEAR Contract

The smart contract exposes two methods to enable storing and retrieving a greeting in the NEAR network.

\`\`\`ts
@NearBindgen({})
class HelloNear {
  greeting: string = "Hello";

  @view // This method is read-only and can be called for free
  get_greeting(): string {
    return this.greeting;
  }

  @call // This method changes the state, for which it cost gas
  set_greeting({ greeting }: { greeting: string }): void {
    // Record a log permanently to the blockchain!
    near.log(\`Saving greeting \${greeting}\`);
    this.greeting = greeting;
  }
}
\`\`\`

<br />

# Quickstart

1. Make sure you have installed [node.js](https://nodejs.org/en/download/package-manager/) >= 16.
2. Install the [\`NEAR CLI\`](https://github.com/near/near-cli#setup)

<br />

## 1. Build and Deploy the Contract
You can automatically compile and deploy the contract in the NEAR testnet by running:

\`\`\`bash
npm run deploy
\`\`\`

Once finished, check the \`neardev/dev-account\` file to find the address in which the contract was deployed:

\`\`\`bash
cat ./neardev/dev-account
# e.g. dev-1659899566943-21539992274727
\`\`\`

<br />

## 2. Retrieve the Greeting

\`get_greeting\` is a read-only method (aka \`view\` method).

\`View\` methods can be called for **free** by anyone, even people **without a NEAR account**!

\`\`\`bash
# Use near-cli to get the greeting
near view <dev-account> get_greeting
\`\`\`

<br />

## 3. Store a New Greeting
\`set_greeting\` changes the contract's state, for which it is a \`call\` method.

\`Call\` methods can only be invoked using a NEAR account, since the account needs to pay GAS for the transaction.

\`\`\`bash
# Use near-cli to set a new greeting
near call <dev-account> set_greeting '{"greeting":"howdy"}' --accountId <dev-account>
\`\`\`

**Tip:** If you would like to call \`set_greeting\` using your own account, first login into NEAR using:

\`\`\`bash
# Use near-cli to login your NEAR account
near login
\`\`\`

and then use the logged account to sign the transaction: \`--accountId <your-account>\`.",
]
`;

exports[`create 'js' 'vanilla' 'js': --js_vanilla_js--contract--build.sh 1`] = `
[
  "--js_vanilla_js--contract--build.sh",
  "#!/bin/sh

echo ">> Building contract"

near-sdk-js build src/contract.ts build/hello_near.wasm
",
]
`;

exports[`create 'js' 'vanilla' 'js': --js_vanilla_js--contract--deploy.sh 1`] = `
[
  "--js_vanilla_js--contract--deploy.sh",
  "#!/bin/sh

./build.sh

if [ $? -ne 0 ]; then
  echo ">> Error building contract"
  exit 1
fi

echo ">> Deploying contract"

# https://docs.near.org/tools/near-cli#near-dev-deploy
near dev-deploy --wasmFile build/hello_near.wasm",
]
`;

exports[`create 'js' 'vanilla' 'js': --js_vanilla_js--contract--package.json 1`] = `
[
  "--js_vanilla_js--contract--package.json",
  "{
  "name": "hello_near",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "type": "module",
  "scripts": {
    "build": "./build.sh",
    "deploy": "./deploy.sh",
    "test": "echo use integration-tests"
  },
  "dependencies": {
    "near-cli": "^3.4.2",
    "near-sdk-js": "1.0.0"
  },
  "devDependencies": {
    "typescript": "^4.7.4",
    "ts-morph": "^16.0.0"
  }
}
",
]
`;

exports[`create 'js' 'vanilla' 'js': --js_vanilla_js--contract--src--contract.ts 1`] = `
[
  "--js_vanilla_js--contract--src--contract.ts",
  "// Find all our documentation at https://docs.near.org
import { NearBindgen, near, call, view } from 'near-sdk-js';

@NearBindgen({})
class HelloNear {
  message: string = "Hello";

  @view({}) // This method is read-only and can be called for free
  get_greeting(): string {
    return this.message;
  }

  @call({}) // This method changes the state, for which it cost gas
  set_greeting({ message }: { message: string }): void {
    near.log(\`Saving greeting \${message}\`);
    this.message = message;
  }
}",
]
`;

exports[`create 'js' 'vanilla' 'js': --js_vanilla_js--contract--tsconfig.json 1`] = `
[
  "--js_vanilla_js--contract--tsconfig.json",
  "{
  "compilerOptions": {
    "experimentalDecorators": true,
    "target": "es5",
    "noEmit": true
  },
  "exclude": [
    "node_modules"
  ],
}",
]
`;

exports[`create 'js' 'vanilla' 'js': --js_vanilla_js--frontend--assets--favicon.ico 1`] = `
[
  "--js_vanilla_js--frontend--assets--favicon.ico",
  "�PNG

   
IHDR  @  @   ��Na   	pHYs  %  %IR$�    IDATx���p��}�qɖdK����6 c������6	?B�
m�����N���܄?n&����M��t�!�^2-�9���ޅ��p�~�#l�1�e�mY��Y�1�m�c��y����4F�����v��/_|�
 �� " $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ �[e�j�عq����;���pG[뎡��y�O��иh���Ο�����;�g��G��ŗ�ٱ��pGOW�)�����q55���]�h�'?2y֌�/!���#.��qp����/��]7�b�Y��MW�Xt劺I�g�B8�]��nx��Z��t��kΠ����K/\\q�ͽ����J�Ҽ����7_ze�w��U+>���ia�g�^�a����������������/�؟��^	,-�랹���{���H�-[|����E>P��
?������+��7~ܒիd,{����<q�E��p�V���[������ֺ��\`L��_��߿y�Mk
>C&,O]�O��Ћ?\\[ƣ�k���s7,��_����?������\\��S_���#K��������W�^��V�Xs׭�n�~��o���YSW���[?t͇>Cl�?���"�IK���w�����[o<�Ҝ%M
ӧ��9���<�寗���۷��:��sٲ�O��e��y��o���ݓ�Au�?��/�=�5�b�4���׾]�k��-����oZ���3D�8�1X�4��p��������!�\\3_~��G������e"�z
Ұʔ�5S�r"\`9H�^�vpw*��1�vnܒ�5��G�|���w���G��kk��ĽD9���?�ڷ��;
>Cn�Z�����N�~��c�>�l��	F�b�j�h�羮Ñz�ֺ��� �����[��^3����s_:c]FF�b{���y�װ��rC�[��@���7��]�����%z�!��vn�R�������y]���i��ex���ݶ}��-.Ǹ,��7b�~�>���4�s�X��a�' 4�������U.F��y�_�7��tú�u�{���������(1'-������P?J�I�Bji^W���kF�yhk��Ɉ����FXPRK�S9�Qbtm����=��~�*���sp��@��Qb\\]�?��c=�}�|���F$\`�!��2J�h�)_ܡ��U�,��P+�a1J'��N���2&\`�t�w���┌ci���_n��X�Zw��#\`�d��F�Q�4������U9��\`�V��DF���>�R	?\\��\`v��"�H4JLY�w��
��ʉ�z�<,F�i|�W������ʆ��񂣐Qbj"����U�W�t%&e�)_~˓#iF��x��ԋ��3JL��>��h�%�WK���M���˥u�����E�0�K��u�� I���Qb�ܽ/ק|�#�Ēx���}K�H���Qbix��0�1Jkټ�y0B2J;�����|���Q�X����g�QUuu~�F~������M�>���PUU=n\\���>#0��"����G��ށv���0B0b3J,��������謮��0�0�3J��;c���ή�q��h90J������;vU
dk�����	�đy�;�߽嵣Ū�0b02a�8-�Om[�B�����0�0�a�8,�ֽ��?Hӱ~i�Y1J��;�Z���UJÈI�ȍQ�ڿs��o|w�MF\\F��Ϡ�����|����X�4���<%�RwG�c��ǎ��O������'��Sz��ص���Pi�	�2J|����]/o;�+
#<#gF�'�����/�<��ws�a�&\`d�(���j�/ox���[�adB��_����w��?�
#FE��Q���m��\`OWw�I��0� \`T��%�tv��G{�{N�G�ȉ�Q)*m�������j{��i90*HE�7?��}���ڼ7BF6��R!��W��ӻ^�z�.F�����(q��[�oh썆�1�e<Jlkݾy����l���>� \`�J��A�����o~��C�t���?�/|�A������%v:������9ћ�v�m�46-,�0��1*�MW�yk�s��(�������ޞ�cMJ�a���g��YUp0<�h-]�j�M����lF��~���kO�
[�z��O�)86���햦�+���F�[�z�㝃�*�v��-[�殨7�I��Qk�iAГz��s㖶��&'��\\�����(8!�8�&��w%�X�k;vmz����۰	�n�򿭛d:O�E3e���R:���ן�8���6aR�M_�S�(.���K�ȁC��7�"��]���o<7�=�$K�(2�����y����z{O�'�]w��{���U�0��(qL�v�l[�Bo_ՉT$ܰ��|�G.O�|��1&����o�<t�ؽsi7�˖]�'���$:cL%��7_z�c���<j��:{�շݒ�9$�X1J,����:��ޓ�l�&5N��[]����!90ƐQbxk�W__?�lX]C�uw��z1���e�X]��_y�X��o�u���Z87��F��1g�8J]�;v��e0-�7l���4k��=cT��G���w�������x�οne�?VG�(�đ���}kskOW��NT'ް�+.^񙏗�,Q��1J�}���s�s�I�z�næ/��]�(1�t�������84���6mެk��o�N�P��FI%Q���Gߣ�X{RnXm��K��E�	�f���:�9�ή�'�G�rî��ߜ6w�X�($\`��Q��tvڳ�=�H�a����sg��h\`	e\`�x:=]��w����R�d�_włKOs(0���0J,���׾�����w�.�6l��%���>)���Q6F�'���;�{_oO�\`*oٍؔ]�т���0��(�����r��}D�
�2k��}}�@�	ef�XUUu�\`{����7q�nX턺7���PWpPjF�U�(�������og�h�j&�]����8er�A@�Wɣ�������'�'�-���g�UpPF*s�����u�ȱ�$߰�lΒEe#\`���F�����G�T��J�
�s~����/8('#!4J�����x�׉tO�a���\\|�� e&\`��BF��=����G��z�&͘�d�UG �'\`$'�Qb_o_UU�IMJ�a5�.��55u��'\`$'�Qb��iDU�
���[���ת�0R��(�DB�oXӕ+�O-8 H�����G�v�O�?��[����y��v�f�3o�9��iH�����G��6lڼYg_���ۅ���y��^��M^�₂oR$\`�.�QbJ
���شr��ښ��R$\`��+%�Ѱ�u�/�P�D��!�WJL�a�/�8eR�w�0�����ڰ���)_�#\`D��+%��a��ϙ:gf�w�0����Kް)sg.ZX�}@ F0��}s	V�P�x�',��O�o�\\���M�8���ƍ_������1n�����s��	Q����cٰY:��~B��"0���Ǧag-��^d@��-��o.z�&ϜQ?}J���0b��XԆ5L�2y�Y�I�/�Qb�V;qٍ�4D%\`� �Q�V3�nڼY�(&\`d"�Q�(6n��)�f|%d��|�?JQêǏ�<k��|�#+���߰��S��Y0�R���4l�I��E���T�(qh
��0A�Ș����%~P�����M
yK�H��SE�O߰����&|5dE��VE�Oհ�7��8�����K!+F�*b�Xа�u��E%0rV)�ē6���Z��F�*e�8ذ���|�$\`�RF�Pa��P)�D�$F���Q"T��T�(*��QA*h�@��,4J��	�(� \`T"�DȀ�Q��!:�r%BhF�2J����f�q	��(�00J����!"�c�!�c�!�w%B �a�Q���������(B0*CowO__�Pf��0*BoO�@�����RÌ!qF�z:�n~���o�
3J��	���������7܆%B����vww�wFkd
3J�d	����=r���x�F�0�DH�������������;��mÌ!AF����������[�?�"4�(R#\`d���}=�]U�����0�DH����C{��WU�@���0�DH�����}�9p��s���0�DH����#����n�ƦaF��#]�;���}�Ic�0�DH�����#��^���&�mÌ�����z����zow���aF�PvFl}����l���=�6�(�K��m��׺ڏ���
3J�20۳��#��VYf��"\`D��������?P��6�(�B�����{��q�7eo�Q"���O�ûZ���O�m�Q"���̑���?��x�j�Q"���Iow���7�tu�*��%B)	a�v�l[�B����J�aF�P2Fo<���;�N�Q�
3J��0bx㹗���X\`�o�Q"���@�k;�^�1���I�aF�PF��Zw������/PÌa�	I;�������!��0�DSF������g��tu�G��%��0�������tv�V�
;E��2J�1"\`����{�Ï���7i7�������tg�(Ƃ���mO=���c�H�a?H�ǟ�4%�X0�����j�Vur~nXUuuM]��C�D(:#-�^޺cC�@4��"oXUU��	U����dF�P\\FB�l}��G�8���6x���5�(�H�H��=�6���w˔|�������)%B�I8r��3�?��q�x�Ro��)�����)%BQ������?���H�{��p�j'N��8a���(�B�(�u�������T��V;qB����<iF�0zF�mx��G���2%ڰq55�fL+�3J�Q0�i���x~�ɡJ�a���M�;�z\\�~j�a4��y㹗Z��z�S��mXUUմ���X�AF�0bFy�ݶ������䖤ݰ��g�L��se�##\`��;;w?�?�ϱ�Ghشy��n4h�##\`�ZwG�c���9я�6�q��g�gf�# \`�TwG����ݮ���mI�
��>e���%8EF�0\\FI����i���
��f�j&֝�pn�ΏQ"��Q:���������OI6��~�������Q"��Q"/���mO�p�>%ְ�q�f�wN��5�(�H�(��O>��?=�w�>�԰��?�V)�\`�C$\`����x�{F���Y�h¤�2^1�a(�����7��o����W�
klZ8u�̲_+��	c��p����t����߰isg�\\�0���Q"���1V�w<���ypϾ��߰	��_|~R��D8c�<��h{m��)J�a&7,���F�p:ƘX��ﶮ���ޤ۰q5��]�||mM�W�D8��Z�׵�]w�ޤذq������OL��\`��$\`YK�߸������\`���iS�%B!���Z����*B�^rA�G���}��ik���/}���Ix�ݰ�s�Y�(��(N&\`GW{G�=���^�Rmؔ�3λ��p��Q"� \`AW{���7m�;N�O�װ��S��^U��\`�'E�����^�Rj��ښ�n�hM]m�w�Q"0F�{ؼv�ϧѰ�5�o\\�^���xU�h�4�{�k���$а�����8��;��(�Qx�װ��aK?~UcS*��;zF�T8���԰��7��evqG%|�A�(��7l梳/�ĵ�]��G��a0ʤ�
�<s�E�_��z��!\`�OI6qʤ����fB]�t�Q"���QVcܰ����>�ɼ�5(�(FF�(��l؇���sfV�Ez�# \`$\`lv��o<7�BodB�a��4�a�V]r�e�*��
=J��0�Q���}����ʼd��FJ�Ѱ�sg.�iM%_�F�T#1�k�Թ�>���[[?��/V�D*�����6�fB���ߤ^��ɞ���5l�]�N_0�z�Q"y0R5̆���_���%�7#aCn��?�h�%.�BF�dL�H�v�U�.�tE���(�\\	�;cæ/�s�m����(�,	��ag-��ow	�Q"�0�(hX�ĺ���Y(�Q"�0�8�a��n��6y�Y.��3J$3F(�v��F���|Q%�#������7�|�J��%�
#�%�W͏�Q"y0"��l��z(�D2 \`��ش����py�Q"�	1�5��?�E�$��1J$:#��z}��UtF��&\`p�ή�.��\`�H\\F�V�ykӕ�c�(����-Y�j�U.��f�HDF��V�0�/�D�0�ش@�J�(�p�M�5�h���E�HN]C���]���(�@��|��ۍ���(�(���������B)/�DB0����F�0J$}F*��^u�m��8a�H�,�\\�(nlZp�z%��F�nq�#\`�d�qc���4U�(���p,���6p�k�_s׭ꕬ�%��Õ=ffv���|�F󉫐Qb~?\\��\`2��������P	�D��G����T����?w��|ُ��;�g��~�/Y����X�aҕ�(1��J#\`�4]yI�C�J�Ae<J��Ǫ	X<SfϘ�lq��p4_�ab�r�8o��)�g|��	XHK�\\�;x��/������%����p��5��̊�c]C�g���f �Q�Y3�����.����[����(1��,��kV���������;7'y���Z�%\`�]��7G�旬^���k
>Ll��Bh����\\��y���*�(q�M���Fhۧ�x{�w$66-���;
>L>���x*}t��Y3V�ukUuu�G10;�>) �(�{ �A����5����&x��y�#*A�Q�Al,���o]�kW�v G�*�;�R�C4l���Z�A�2�?������[�����8Yc����^9��?��J?�hZ���m��m��{<u
����n[���>C��O=�_�ų��=	�zeF��Ҵry�û_y�\\5���ir%l�[�[;�L�4�5�_w���+3��s.[v��9�?�����ć6o������0evc�g�,
ӧ.����;�ڿ���s9n?��e�!��|�a~����}��w'^��<���y�_�������)��7���s7Z�fI�r���������1=ƣ/��^c�S:�{��>���
����jlZp�m��C;c��G����k׍�=�o�u��~A��vn����z�͗^)ͩ�2k�埻�#^��J��7�����ug�Թ3/���o���C[��
��v��ucw��-[�t�U�U!���ڴuÃ������ݯ�0}����_������4IDW{Ƕ�Z�o(���zUӕ��+��X�:�g�K?�Ů��ڶ����9]���k�j�-����noQt;7nٹqK۶�퇇uccӂ�����?�i���ηѨL@H^J
������������������������������������������������������������������������@D>�  �IDAT���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������x����?�"7�>\`�    IEND�B\`�",
]
`;

exports[`create 'js' 'vanilla' 'js': --js_vanilla_js--frontend--assets--global.css 1`] = `
[
  "--js_vanilla_js--frontend--assets--global.css",
  "* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #FF585D;
  --secondary: #0072CE;

  background-color: var(--bg);
  color: var(--fg);
  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 1em;
}

main {
  margin: 0 auto;
  max-width: 26em;
}

main.please-wait {}

h1 {
  background-image: url(./logo-black.svg);
  background-position: center 1em;
  background-repeat: no-repeat;
  background-size: auto 1.5em;
  margin-top: 0;
  padding: 3.5em 0 0;
  text-align: center;
  font-size: 1.5em;
}
.greeting {
  color: var(--secondary);
  text-decoration: underline;
}
h2 {
  text-align: center;
}

.please-wait .change {
  pointer-events: none;
}

ul.information  {
  margin: 2em 0 2em 0;
  padding: 0;
  text-align: left;
  font-size: 0.8em;

}
.information li:first-child {
  border-top: 1px solid var(--light-gray);
}
.information li {
  padding: 0.5em 0;
  border-bottom: 1px solid var(--light-gray);
  list-style: none;
}

.change {
  display: flex;
  flex-direction: column;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
  font-size: 1em;
  border: 2px solid var(--light-gray);
  padding: 0.5em;
}
.change > div {
  display: flex;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
}
.change input {
  flex: 1;
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}
.change label {
  display: block;
  text-align: left;
  margin-right: 10px;
  padding-bottom: 0.5em;
}
.change button {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--secondary);
}

button, input {
  font: inherit;
  outline: none;
}

main.please-wait .change button {
  position: relative;
  pointer-events: none;
  background-color: white;
}
main.please-wait .change button span {
  visibility: hidden;
}

button {
  background-color: var(--secondary);
  border-radius: 5px;
  border: none;
  color: #efefef;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}
button:hover, button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}

input {
  background-color: var(--light-gray);
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 0.5em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

@media (prefers-color-scheme: dark) {
  html {
    --bg: #1e1e1e;
    --fg: #efefef;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
  }
  h1 {
    background-image: url(./logo-white.svg);
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}

main.please-wait .loader,
main.please-wait .loader:after{
  display: inline-block;
}
.loader,
.loader:after {
  display: none;
  border-radius: 50%;
  width: 20px;
  height: 20px;
}
.loader {
  font-size: 10px;
  position: absolute;
  top: calc(50% - 10px);
  left: calc(50% - 10px);
  text-indent: -9999em;
  border-top: 3px solid var(--secondary);
  border-right: 3px solid var(--secondary);
  border-bottom: 3px solid var(--secondary);
  border-left: 3px solid #ffffff;
  -webkit-transform: translateZ(0);
  -ms-transform: translateZ(0);
  transform: translateZ(0);
  -webkit-animation: load8 1.1s infinite linear;
  animation: load8 1.1s infinite linear;
}
@-webkit-keyframes load8 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
@keyframes load8 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
",
]
`;

exports[`create 'js' 'vanilla' 'js': --js_vanilla_js--frontend--assets--logo-black.svg 1`] = `
[
  "--js_vanilla_js--frontend--assets--logo-black.svg",
  "<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>",
]
`;

exports[`create 'js' 'vanilla' 'js': --js_vanilla_js--frontend--assets--logo-white.svg 1`] = `
[
  "--js_vanilla_js--frontend--assets--logo-white.svg",
  "<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>",
]
`;

exports[`create 'js' 'vanilla' 'js': --js_vanilla_js--frontend--index.html 1`] = `
[
  "--js_vanilla_js--frontend--index.html",
  "<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" href="assets/favicon.ico"/>
  <link rel="apple-touch-icon" href="assets/favicon.ico"/>
  <!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous"> -->
  <title>Welcome to NEAR</title>
  <link rel="stylesheet" href="assets/global.css">
</head>
<body>
  <main id="signed-out-flow" style="display: none">
    <h1>
      The contract says: <span class="greeting" data-behavior="greeting"></span>
    </h1>
    <h3>
      Welcome to NEAR!
    </h3>
    <p>
      Your contract is storing a greeting message in the NEAR blockchain. To
      change it you need to sign in using the NEAR Wallet. It is very simple,
      just use the button below.
    </p>
    <p>
      Do not worry, this app runs in the test network ("testnet"). It works
      just like the main network ("mainnet"), but using NEAR Tokens that are
      only for testing!
    </p>
    <p style="text-align: center; margin-top: 2.5em">
      <button id="sign-in-button">Sign in with NEAR Wallet</button>
    </p>

  </main>

  <div id="signed-in-flow" style="display: none">
    <button style="float: right" id="sign-out-button">
      Sign out <span data-behavior="account-id"></span>
    </button>
    <main>
      <h1>
        The contract says: <span class="greeting" data-behavior="greeting"></span>
      </h1>
      <form class="change">
        <label for="greeting">Change greeting:</label>
        <div>
          <input
                  autocomplete="off"
                  id="greeting"
                  data-behavior="greeting"
          />
          <button>
            <span>Save</span>
            <div class="loader"></div>
          </button>
        </div>
      </form>
      <p>
        Look at that! A Hello World app! This greeting is stored on the NEAR blockchain. Check it out:
      </p>
      <ol>
        <li>
          Look in <code>index.js</code> - you will see a <code>Wallet</code> object being created and used 
          to interact with the methods <code>set_greeting</code> and <code>get_greeting</code>.
        </li>
        <li>
          These method live in the <a target="_blank" href="https://docs.near.org/docs/develop/contracts/overview">smart contract</a>,
          who's code is defined in the <code>contract/</code> folder.
        </li>
        <li>
          When you run <code>npm run start</code>, the code in <code>contract/</code> gets deployed to the NEAR testnet.
          You can see how this happens by looking in <code>package.json</code> at the <code>scripts</code> section to
          find the <code>dev</code> command.
        </li>
      </ol>
      <hr>
      <p>
        To keep learning, check out
        <a target="_blank" href="https://docs.near.org">the NEAR docs</a>
        or look through some
        <a target="_blank" href="https://examples.near.org">example apps</a>.
      </p>
    </main>
  </div>

  <script src="index.js" type="module"></script>
</body>
</html>
",
]
`;

exports[`create 'js' 'vanilla' 'js': --js_vanilla_js--frontend--index.js 1`] = `
[
  "--js_vanilla_js--frontend--index.js",
  "import 'regenerator-runtime/runtime';
import { Wallet } from './near-wallet';

const CONTRACT_ADDRESS = process.env.CONTRACT_NAME;

// When creating the wallet you can optionally ask to create an access key
// Having the key enables to call non-payable methods without interrupting the user to sign
const wallet = new Wallet({ createAccessKeyFor: CONTRACT_ADDRESS })

// Setup on page load
window.onload = async () => {
  let isSignedIn = await wallet.startUp();

  if (isSignedIn) {
    signedInFlow();
  } else {
    signedOutFlow();
  }

  getGreeting();
};

// Button clicks
document.querySelector('form').onsubmit = setGreeting;
document.querySelector('#sign-in-button').onclick = () => { wallet.signIn(); };
document.querySelector('#sign-out-button').onclick = () => { wallet.signOut(); };

async function setGreeting(event) {
  // handle UI
  event.preventDefault();
  const { greeting } = event.target.elements;

  document.querySelector('#signed-in-flow main')
    .classList.add('please-wait');

  // use the wallet to send the greeting to the Smart Contract
  await wallet.callMethod({ method: 'set_greeting', args: { message: greeting.value }, contractId: CONTRACT_ADDRESS });

  // query the new greeting
  await getGreeting();

  // handle UI stuff
  document.querySelector('#signed-in-flow main').classList.remove('please-wait');
}

async function getGreeting() {
  // use the wallet to query the Smart Contract
  const currentGreeting = await wallet.viewMethod({ method: 'get_greeting', contractId: CONTRACT_ADDRESS });

  // handle UI stuff
  document.querySelectorAll('[data-behavior=greeting]').forEach(el => {
    el.innerText = currentGreeting;
    el.value = currentGreeting;
  });
}

// UI: Display the signed-out-flow container
function signedOutFlow() {
  document.querySelector('#signed-in-flow').style.display = 'none';
  document.querySelector('#signed-out-flow').style.display = 'block';
}

// UI: Displaying the signed in flow container and fill in account-specific data
function signedInFlow() {
  document.querySelector('#signed-out-flow').style.display = 'none';
  document.querySelector('#signed-in-flow').style.display = 'block';
  document.querySelectorAll('[data-behavior=account-id]').forEach(el => {
    el.innerText = wallet.accountId;
  });
}",
]
`;

exports[`create 'js' 'vanilla' 'js': --js_vanilla_js--frontend--near-wallet.js 1`] = `
[
  "--js_vanilla_js--frontend--near-wallet.js",
  "/* A helper file that simplifies using the wallet selector */

// near api js
import { providers } from 'near-api-js';

// wallet selector
import '@near-wallet-selector/modal-ui/styles.css';
import { setupModal } from '@near-wallet-selector/modal-ui';
import { setupWalletSelector } from '@near-wallet-selector/core';
import { setupMyNearWallet } from '@near-wallet-selector/my-near-wallet';

const THIRTY_TGAS = '30000000000000';
const NO_DEPOSIT = '0';

// Wallet that simplifies using the wallet selector
export class Wallet {
  walletSelector;
  wallet;
  network;
  createAccessKeyFor;

  constructor({ createAccessKeyFor = undefined, network = 'testnet' }) {
    // Login to a wallet passing a contractId will create a local
    // key, so the user skips signing non-payable transactions.
    // Omitting the accountId will result in the user being
    // asked to sign all transactions.
    this.createAccessKeyFor = createAccessKeyFor
    this.network = 'testnet'
  }

  // To be called when the website loads
  async startUp() {
    this.walletSelector = await setupWalletSelector({
      network: this.network,
      modules: [setupMyNearWallet()],
    });

    const isSignedIn = this.walletSelector.isSignedIn();

    if (isSignedIn) {
      this.wallet = await this.walletSelector.wallet();
      this.accountId = this.walletSelector.store.getState().accounts[0].accountId;
    }

    return isSignedIn;
  }

  // Sign-in method
  signIn() {
    const description = 'Please select a wallet to sign in.';
    const modal = setupModal(this.walletSelector, { contractId: this.createAccessKeyFor, description });
    modal.show();
  }

  // Sign-out method
  signOut() {
    this.wallet.signOut();
    this.wallet = this.accountId = this.createAccessKeyFor = null;
    window.location.replace(window.location.origin + window.location.pathname);
  }

  // Make a read-only call to retrieve information from the network
  async viewMethod({ contractId, method, args = {} }) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    let res = await provider.query({
      request_type: 'call_function',
      account_id: contractId,
      method_name: method,
      args_base64: Buffer.from(JSON.stringify(args)).toString('base64'),
      finality: 'optimistic',
    });
    return JSON.parse(Buffer.from(res.result).toString());
  }

  // Call a method that changes the contract's state
  async callMethod({ contractId, method, args = {}, gas = THIRTY_TGAS, deposit = NO_DEPOSIT }) {
    // Sign a transaction with the "FunctionCall" action
    return await this.wallet.signAndSendTransaction({
      signerId: this.accountId,
      receiverId: contractId,
      actions: [
        {
          type: 'FunctionCall',
          params: {
            methodName: method,
            args,
            gas,
            deposit,
          },
        },
      ],
    });
  }

  // Get transaction result from the network
  async getTransactionResult(txhash) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    // Retrieve transaction result from the network
    const transaction = await provider.txStatus(txhash, 'unnused');
    return providers.getTransactionLastResult(transaction);
  }
}",
]
`;

exports[`create 'js' 'vanilla' 'js': --js_vanilla_js--frontend--package.json 1`] = `
[
  "--js_vanilla_js--frontend--package.json",
  "{
  "name": "my-near-app",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "start": "./start.sh",
    "build": "parcel build index.html --public-url ./"
  },
  "devDependencies": {
    "env-cmd": "^10.1.0",
    "events": "^3.3.0",
    "https-browserify": "^1.0.0",
    "nodemon": "^2.0.16",
    "parcel": "^2.7.0",
    "punycode": "^1.4.1",
    "process": "^0.11.10",
    "stream-http": "^3.1.0",
    "url": "^0.11.0"
  },
  "dependencies": {
    "@near-wallet-selector/core": "^8.1.4",
    "@near-wallet-selector/ledger": "^8.1.4",
    "@near-wallet-selector/modal-ui": "^8.1.4",
    "@near-wallet-selector/my-near-wallet": "^8.1.4",
    "@near-wallet-selector/near-wallet": "^8.1.4",
    "near-api-js": "^2.1.4"
  }
}
",
]
`;

exports[`create 'js' 'vanilla' 'js': --js_vanilla_js--frontend--start.sh 1`] = `
[
  "--js_vanilla_js--frontend--start.sh",
  "#!/bin/sh

CONTRACT_DIRECTORY=../contract
DEV_ACCOUNT_FILE="\${CONTRACT_DIRECTORY}/neardev/dev-account.env"

start () {
  echo The app is starting!
  env-cmd -f $DEV_ACCOUNT_FILE parcel index.html --open
}

alert () {
  GREEN='\\033[1;32m'
  NC='\\033[0m' # No Color

  echo "======================================================"
  echo "It looks like you didn't deploy your contract"
  echo ">> Run \${GREEN}'npm run deploy'\${NC} from the your project's root directory"
  echo "This frontend template works with contracts deployed to NEAR TestNet"
  echo "======================================================"
}

if [ -f "$DEV_ACCOUNT_FILE" ]; then
  start
else
  alert
fi
",
]
`;

exports[`create 'js' 'vanilla' 'js': --js_vanilla_js--integration-tests--ava.config.cjs 1`] = `
[
  "--js_vanilla_js--integration-tests--ava.config.cjs",
  "require("util").inspect.defaultOptions.depth = 5; // Increase AVA's printing depth

module.exports = {
  timeout: "300000",
  files: ["src/*.ava.ts"],
  failWithoutAssertions: false,
  extensions: ["ts"],
  require: ["ts-node/register"],
};
",
]
`;

exports[`create 'js' 'vanilla' 'js': --js_vanilla_js--integration-tests--package.json 1`] = `
[
  "--js_vanilla_js--integration-tests--package.json",
  "{
  "name": "ava-testing",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "test": "ava"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/node": "^18.6.2",
    "ava": "^4.2.0",
    "near-workspaces": "^3.2.1",
    "ts-node": "^10.8.0",
    "typescript": "^4.7.2"
  },
  "dependencies": {}
}
",
]
`;

exports[`create 'js' 'vanilla' 'js': --js_vanilla_js--integration-tests--src--main.ava.ts 1`] = `
[
  "--js_vanilla_js--integration-tests--src--main.ava.ts",
  "import { Worker, NearAccount } from 'near-workspaces';
import anyTest, { TestFn } from 'ava';

const test = anyTest as TestFn<{
  worker: Worker;
  accounts: Record<string, NearAccount>;
}>;

test.beforeEach(async (t) => {
  // Init the worker and start a Sandbox server
  const worker = await Worker.init();

  // Deploy contract
  const root = worker.rootAccount;
  const contract = await root.createSubAccount('test-account');
  // Get wasm file path from package.json test script in folder above
  await contract.deploy(
    process.argv[2],
  );

  // Save state for test runs, it is unique for each test
  t.context.worker = worker;
  t.context.accounts = { root, contract };
});

test.afterEach.always(async (t) => {
  // Stop Sandbox server
  await t.context.worker.tearDown().catch((error) => {
    console.log('Failed to stop the Sandbox:', error);
  });
});

test('returns the default greeting', async (t) => {
  const { contract } = t.context.accounts;
  const message: string = await contract.view('get_greeting', {});
  t.is(message, 'Hello');
});

test('changes the message', async (t) => {
  const { root, contract } = t.context.accounts;
  await root.call(contract, 'set_greeting', { message: 'Howdy' });
  const message: string = await contract.view('get_greeting', {});
  t.is(message, 'Howdy');
});",
]
`;

exports[`create 'js' 'vanilla' 'js': --js_vanilla_js--package.json 1`] = `
[
  "--js_vanilla_js--package.json",
  "{
  "name": "js_vanilla_js",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "start": "cd frontend && npm run start",
    "deploy": "cd contract && npm run deploy",
    "build": "npm run build:contract && npm run build:web",
    "build:web": "cd frontend && npm run build",
    "build:contract": "cd contract && npm run build",
    "test": "npm run test:unit && npm run test:integration",
    "test:unit": "cd contract && npm test",
    "test:integration": "npm run build:contract && cd integration-tests && npm test -- -- \\"./contract/build/hello_near.wasm\\"",
    "postinstall": "cd frontend && npm install && cd .. && cd integration-tests && npm install && cd .. && cd contract && npm install"
  },
  "devDependencies": {
    "near-cli": "^3.3.0"
  },
  "dependencies": {}
}",
]
`;

exports[`create 'js' 'vanilla' 'js': --js_vanilla_js--rust-toolchain.toml 1`] = `
[
  "--js_vanilla_js--rust-toolchain.toml",
  "[toolchain]
channel = "1.69"
",
]
`;

exports[`create 'js' 'vanilla' 'rust': --js_vanilla_rust--.gitignore 1`] = `
[
  "--js_vanilla_rust--.gitignore",
  "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
# Developer note: near.gitignore will be renamed to .gitignore upon project creation
# dependencies
node_modules
/.pnp
.pnp.js

# build
/out
/dist

# keys
/templates/react/neardev

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local
/.cache

npm-debug.log*
yarn-debug.log*
yarn-error.log*
",
]
`;

exports[`create 'js' 'vanilla' 'rust': --js_vanilla_rust--.gitpod.yml 1`] = `
[
  "--js_vanilla_rust--.gitpod.yml",
  "tasks:
  - init: npm dev
    command: npm run dev
ports:
  - port: 1234
    onOpen: open-browser
",
]
`;

exports[`create 'js' 'vanilla' 'rust': --js_vanilla_rust--README.md 1`] = `
[
  "--js_vanilla_rust--README.md",
  "near-blank-project
==================

This app was initialized with [create-near-app]


Quick Start
===========

If you haven't installed dependencies during setup:

    npm install


Build and deploy your contract to TestNet with a temporary dev account:

    npm run deploy

Test your contract:

    npm test

If you have a frontend, run \`npm start\`. This will run a dev server.


Exploring The Code
==================

1. The smart-contract code lives in the \`/contract\` folder. See the README there for
   more info. In blockchain apps the smart contract is the "backend" of your app.
2. The frontend code lives in the \`/frontend\` folder. \`/frontend/index.html\` is a great
   place to start exploring. Note that it loads in \`/frontend/index.js\`,
   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.
3. Test your contract: \`npm test\`, this will run the tests in \`integration-tests\` directory.


Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. 
When you run \`npm run deploy\`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.
When you're ready to make it permanent, here's how:


Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local \`node_modules\` folder when you ran \`npm install\`, but for best ergonomics you may want to install it globally:

    npm install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all \`near\` commands with \`npx\`

Ensure that it's installed with \`near --version\` (or \`npx near --version\`)


Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as \`your-name.testnet\`, you can deploy your contract to \`near-blank-project.your-name.testnet\`. Assuming you've already created an account on [NEAR Wallet], here's how to create \`near-blank-project.your-name.testnet\`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace \`YOUR-NAME\` below with your actual account name):

      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: deploy the contract
---------------------------

Use the CLI to deploy the contract to TestNet with your account ID.
Replace \`PATH_TO_WASM_FILE\` with the \`wasm\` that was generated in \`contract\` build directory.

    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile PATH_TO_WASM_FILE


Step 3: set contract name in your frontend code
-----------------------------------------------

Modify the line in \`src/config.js\` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-blank-project.YOUR-NAME.testnet'



Troubleshooting
===============

On Windows, if you're seeing an error containing \`EPERM\` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.


  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/concepts/basics/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages
",
]
`;

exports[`create 'js' 'vanilla' 'rust': --js_vanilla_rust--contract--.gitignore 1`] = `
[
  "--js_vanilla_rust--contract--.gitignore",
  "node_modules
build
neardev
",
]
`;

exports[`create 'js' 'vanilla' 'rust': --js_vanilla_rust--contract--README.md 1`] = `
[
  "--js_vanilla_rust--contract--README.md",
  "# Hello NEAR Contract

The smart contract exposes two methods to enable storing and retrieving a greeting in the NEAR network.

\`\`\`ts
@NearBindgen({})
class HelloNear {
  greeting: string = "Hello";

  @view // This method is read-only and can be called for free
  get_greeting(): string {
    return this.greeting;
  }

  @call // This method changes the state, for which it cost gas
  set_greeting({ greeting }: { greeting: string }): void {
    // Record a log permanently to the blockchain!
    near.log(\`Saving greeting \${greeting}\`);
    this.greeting = greeting;
  }
}
\`\`\`

<br />

# Quickstart

1. Make sure you have installed [node.js](https://nodejs.org/en/download/package-manager/) >= 16.
2. Install the [\`NEAR CLI\`](https://github.com/near/near-cli#setup)

<br />

## 1. Build and Deploy the Contract
You can automatically compile and deploy the contract in the NEAR testnet by running:

\`\`\`bash
npm run deploy
\`\`\`

Once finished, check the \`neardev/dev-account\` file to find the address in which the contract was deployed:

\`\`\`bash
cat ./neardev/dev-account
# e.g. dev-1659899566943-21539992274727
\`\`\`

<br />

## 2. Retrieve the Greeting

\`get_greeting\` is a read-only method (aka \`view\` method).

\`View\` methods can be called for **free** by anyone, even people **without a NEAR account**!

\`\`\`bash
# Use near-cli to get the greeting
near view <dev-account> get_greeting
\`\`\`

<br />

## 3. Store a New Greeting
\`set_greeting\` changes the contract's state, for which it is a \`call\` method.

\`Call\` methods can only be invoked using a NEAR account, since the account needs to pay GAS for the transaction.

\`\`\`bash
# Use near-cli to set a new greeting
near call <dev-account> set_greeting '{"greeting":"howdy"}' --accountId <dev-account>
\`\`\`

**Tip:** If you would like to call \`set_greeting\` using your own account, first login into NEAR using:

\`\`\`bash
# Use near-cli to login your NEAR account
near login
\`\`\`

and then use the logged account to sign the transaction: \`--accountId <your-account>\`.",
]
`;

exports[`create 'js' 'vanilla' 'rust': --js_vanilla_rust--contract--build.sh 1`] = `
[
  "--js_vanilla_rust--contract--build.sh",
  "#!/bin/sh

echo ">> Building contract"

near-sdk-js build src/contract.ts build/hello_near.wasm
",
]
`;

exports[`create 'js' 'vanilla' 'rust': --js_vanilla_rust--contract--deploy.sh 1`] = `
[
  "--js_vanilla_rust--contract--deploy.sh",
  "#!/bin/sh

./build.sh

if [ $? -ne 0 ]; then
  echo ">> Error building contract"
  exit 1
fi

echo ">> Deploying contract"

# https://docs.near.org/tools/near-cli#near-dev-deploy
near dev-deploy --wasmFile build/hello_near.wasm",
]
`;

exports[`create 'js' 'vanilla' 'rust': --js_vanilla_rust--contract--package.json 1`] = `
[
  "--js_vanilla_rust--contract--package.json",
  "{
  "name": "hello_near",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "type": "module",
  "scripts": {
    "build": "./build.sh",
    "deploy": "./deploy.sh",
    "test": "echo use integration-tests"
  },
  "dependencies": {
    "near-cli": "^3.4.2",
    "near-sdk-js": "1.0.0"
  },
  "devDependencies": {
    "typescript": "^4.7.4",
    "ts-morph": "^16.0.0"
  }
}
",
]
`;

exports[`create 'js' 'vanilla' 'rust': --js_vanilla_rust--contract--src--contract.ts 1`] = `
[
  "--js_vanilla_rust--contract--src--contract.ts",
  "// Find all our documentation at https://docs.near.org
import { NearBindgen, near, call, view } from 'near-sdk-js';

@NearBindgen({})
class HelloNear {
  message: string = "Hello";

  @view({}) // This method is read-only and can be called for free
  get_greeting(): string {
    return this.message;
  }

  @call({}) // This method changes the state, for which it cost gas
  set_greeting({ message }: { message: string }): void {
    near.log(\`Saving greeting \${message}\`);
    this.message = message;
  }
}",
]
`;

exports[`create 'js' 'vanilla' 'rust': --js_vanilla_rust--contract--tsconfig.json 1`] = `
[
  "--js_vanilla_rust--contract--tsconfig.json",
  "{
  "compilerOptions": {
    "experimentalDecorators": true,
    "target": "es5",
    "noEmit": true
  },
  "exclude": [
    "node_modules"
  ],
}",
]
`;

exports[`create 'js' 'vanilla' 'rust': --js_vanilla_rust--frontend--assets--favicon.ico 1`] = `
[
  "--js_vanilla_rust--frontend--assets--favicon.ico",
  "�PNG

   
IHDR  @  @   ��Na   	pHYs  %  %IR$�    IDATx���p��}�qɖdK����6 c������6	?B�
m�����N���܄?n&����M��t�!�^2-�9���ޅ��p�~�#l�1�e�mY��Y�1�m�c��y����4F�����v��/_|�
 �� " $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ �[e�j�عq����;���pG[뎡��y�O��иh���Ο�����;�g��G��ŗ�ٱ��pGOW�)�����q55���]�h�'?2y֌�/!���#.��qp����/��]7�b�Y��MW�Xt劺I�g�B8�]��nx��Z��t��kΠ����K/\\q�ͽ����J�Ҽ����7_ze�w��U+>���ia�g�^�a����������������/�؟��^	,-�랹���{���H�-[|����E>P��
?������+��7~ܒիd,{����<q�E��p�V���[������ֺ��\`L��_��߿y�Mk
>C&,O]�O��Ћ?\\[ƣ�k���s7,��_����?������\\��S_���#K��������W�^��V�Xs׭�n�~��o���YSW���[?t͇>Cl�?���"�IK���w�����[o<�Ҝ%M
ӧ��9���<�寗���۷��:��sٲ�O��e��y��o���ݓ�Au�?��/�=�5�b�4���׾]�k��-����oZ���3D�8�1X�4��p��������!�\\3_~��G������e"�z
Ұʔ�5S�r"\`9H�^�vpw*��1�vnܒ�5��G�|���w���G��kk��ĽD9���?�ڷ��;
>Cn�Z�����N�~��c�>�l��	F�b�j�h�羮Ñz�ֺ��� �����[��^3����s_:c]FF�b{���y�װ��rC�[��@���7��]�����%z�!��vn�R�������y]���i��ex���ݶ}��-.Ǹ,��7b�~�>���4�s�X��a�' 4�������U.F��y�_�7��tú�u�{���������(1'-������P?J�I�Bji^W���kF�yhk��Ɉ����FXPRK�S9�Qbtm����=��~�*���sp��@��Qb\\]�?��c=�}�|���F$\`�!��2J�h�)_ܡ��U�,��P+�a1J'��N���2&\`�t�w���┌ci���_n��X�Zw��#\`�d��F�Q�4������U9��\`�V��DF���>�R	?\\��\`v��"�H4JLY�w��
��ʉ�z�<,F�i|�W������ʆ��񂣐Qbj"����U�W�t%&e�)_~˓#iF��x��ԋ��3JL��>��h�%�WK���M���˥u�����E�0�K��u�� I���Qb�ܽ/ק|�#�Ēx���}K�H���Qbix��0�1Jkټ�y0B2J;�����|���Q�X����g�QUuu~�F~������M�>���PUU=n\\���>#0��"����G��ށv���0B0b3J,��������謮��0�0�3J��;c���ή�q��h90J������;vU
dk�����	�đy�;�߽嵣Ū�0b02a�8-�Om[�B�����0�0�a�8,�ֽ��?Hӱ~i�Y1J��;�Z���UJÈI�ȍQ�ڿs��o|w�MF\\F��Ϡ�����|����X�4���<%�RwG�c��ǎ��O������'��Sz��ص���Pi�	�2J|����]/o;�+
#<#gF�'�����/�<��ws�a�&\`d�(���j�/ox���[�adB��_����w��?�
#FE��Q���m��\`OWw�I��0� \`T��%�tv��G{�{N�G�ȉ�Q)*m�������j{��i90*HE�7?��}���ڼ7BF6��R!��W��ӻ^�z�.F�����(q��[�oh썆�1�e<Jlkݾy����l���>� \`�J��A�����o~��C�t���?�/|�A������%v:������9ћ�v�m�46-,�0��1*�MW�yk�s��(�������ޞ�cMJ�a���g��YUp0<�h-]�j�M����lF��~���kO�
[�z��O�)86���햦�+���F�[�z�㝃�*�v��-[�殨7�I��Qk�iAГz��s㖶��&'��\\�����(8!�8�&��w%�X�k;vmz����۰	�n�򿭛d:O�E3e���R:���ן�8���6aR�M_�S�(.���K�ȁC��7�"��]���o<7�=�$K�(2�����y����z{O�'�]w��{���U�0��(qL�v�l[�Bo_ՉT$ܰ��|�G.O�|��1&����o�<t�ؽsi7�˖]�'���$:cL%��7_z�c���<j��:{�շݒ�9$�X1J,����:��ޓ�l�&5N��[]����!90ƐQbxk�W__?�lX]C�uw��z1���e�X]��_y�X��o�u���Z87��F��1g�8J]�;v��e0-�7l���4k��=cT��G���w�������x�οne�?VG�(�đ���}kskOW��NT'ް�+.^񙏗�,Q��1J�}���s�s�I�z�næ/��]�(1�t�������84���6mެk��o�N�P��FI%Q���Gߣ�X{RnXm��K��E�	�f���:�9�ή�'�G�rî��ߜ6w�X�($\`��Q��tvڳ�=�H�a����sg��h\`	e\`�x:=]��w����R�d�_włKOs(0���0J,���׾�����w�.�6l��%���>)���Q6F�'���;�{_oO�\`*oٍؔ]�т���0��(�����r��}D�
�2k��}}�@�	ef�XUUu�\`{����7q�nX턺7���PWpPjF�U�(�������og�h�j&�]����8er�A@�Wɣ�������'�'�-���g�UpPF*s�����u�ȱ�$߰�lΒEe#\`���F�����G�T��J�
�s~����/8('#!4J�����x�׉tO�a���\\|�� e&\`��BF��=����G��z�&͘�d�UG �'\`$'�Qb_o_UU�IMJ�a5�.��55u��'\`$'�Qb��iDU�
���[���ת�0R��(�DB�oXӕ+�O-8 H�����G�v�O�?��[����y��v�f�3o�9��iH�����G��6lڼYg_���ۅ���y��^��M^�₂oR$\`�.�QbJ
���شr��ښ��R$\`��+%�Ѱ�u�/�P�D��!�WJL�a�/�8eR�w�0�����ڰ���)_�#\`D��+%��a��ϙ:gf�w�0����Kް)sg.ZX�}@ F0��}s	V�P�x�',��O�o�\\���M�8���ƍ_������1n�����s��	Q����cٰY:��~B��"0���Ǧag-��^d@��-��o.z�&ϜQ?}J���0b��XԆ5L�2y�Y�I�/�Qb�V;qٍ�4D%\`� �Q�V3�nڼY�(&\`d"�Q�(6n��)�f|%d��|�?JQêǏ�<k��|�#+���߰��S��Y0�R���4l�I��E���T�(qh
��0A�Ș����%~P�����M
yK�H��SE�O߰����&|5dE��VE�Oհ�7��8�����K!+F�*b�Xа�u��E%0rV)�ē6���Z��F�*e�8ذ���|�$\`�RF�Pa��P)�D�$F���Q"T��T�(*��QA*h�@��,4J��	�(� \`T"�DȀ�Q��!:�r%BhF�2J����f�q	��(�00J����!"�c�!�c�!�w%B �a�Q���������(B0*CowO__�Pf��0*BoO�@�����RÌ!qF�z:�n~���o�
3J��	���������7܆%B����vww�wFkd
3J�d	����=r���x�F�0�DH�������������;��mÌ!AF����������[�?�"4�(R#\`d���}=�]U�����0�DH����C{��WU�@���0�DH�����}�9p��s���0�DH����#����n�ƦaF��#]�;���}�Ic�0�DH�����#��^���&�mÌ�����z����zow���aF�PvFl}����l���=�6�(�K��m��׺ڏ���
3J�20۳��#��VYf��"\`D��������?P��6�(�B�����{��q�7eo�Q"���O�ûZ���O�m�Q"���̑���?��x�j�Q"���Iow���7�tu�*��%B)	a�v�l[�B����J�aF�P2Fo<���;�N�Q�
3J��0bx㹗���X\`�o�Q"���@�k;�^�1���I�aF�PF��Zw������/PÌa�	I;�������!��0�DSF������g��tu�G��%��0�������tv�V�
;E��2J�1"\`����{�Ï���7i7�������tg�(Ƃ���mO=���c�H�a?H�ǟ�4%�X0�����j�Vur~nXUuuM]��C�D(:#-�^޺cC�@4��"oXUU��	U����dF�P\\FB�l}��G�8���6x���5�(�H�H��=�6���w˔|�������)%B�I8r��3�?��q�x�Ro��)�����)%BQ������?���H�{��p�j'N��8a���(�B�(�u�������T��V;qB����<iF�0zF�mx��G���2%ڰq55�fL+�3J�Q0�i���x~�ɡJ�a���M�;�z\\�~j�a4��y㹗Z��z�S��mXUUմ���X�AF�0bFy�ݶ������䖤ݰ��g�L��se�##\`��;;w?�?�ϱ�Ghشy��n4h�##\`�ZwG�c���9я�6�q��g�gf�# \`�TwG����ݮ���mI�
��>e���%8EF�0\\FI����i���
��f�j&֝�pn�ΏQ"��Q:���������OI6��~�������Q"��Q"/���mO�p�>%ְ�q�f�wN��5�(�H�(��O>��?=�w�>�԰��?�V)�\`�C$\`����x�{F���Y�h¤�2^1�a(�����7��o����W�
klZ8u�̲_+��	c��p����t����߰isg�\\�0���Q"���1V�w<���ypϾ��߰	��_|~R��D8c�<��h{m��)J�a&7,���F�p:ƘX��ﶮ���ޤ۰q5��]�||mM�W�D8��Z�׵�]w�ޤذq������OL��\`��$\`YK�߸������\`���iS�%B!���Z����*B�^rA�G���}��ik���/}���Ix�ݰ�s�Y�(��(N&\`GW{G�=���^�Rmؔ�3λ��p��Q"� \`AW{���7m�;N�O�װ��S��^U��\`�'E�����^�Rj��ښ�n�hM]m�w�Q"0F�{ؼv�ϧѰ�5�o\\�^���xU�h�4�{�k���$а�����8��;��(�Qx�װ��aK?~UcS*��;zF�T8���԰��7��evqG%|�A�(��7l梳/�ĵ�]��G��a0ʤ�
�<s�E�_��z��!\`�OI6qʤ����fB]�t�Q"���QVcܰ����>�ɼ�5(�(FF�(��l؇���sfV�Ez�# \`$\`lv��o<7�BodB�a��4�a�V]r�e�*��
=J��0�Q���}����ʼd��FJ�Ѱ�sg.�iM%_�F�T#1�k�Թ�>���[[?��/V�D*�����6�fB���ߤ^��ɞ���5l�]�N_0�z�Q"y0R5̆���_���%�7#aCn��?�h�%.�BF�dL�H�v�U�.�tE���(�\\	�;cæ/�s�m����(�,	��ag-��ow	�Q"�0�(hX�ĺ���Y(�Q"�0�8�a��n��6y�Y.��3J$3F(�v��F���|Q%�#������7�|�J��%�
#�%�W͏�Q"y0"��l��z(�D2 \`��ش����py�Q"�	1�5��?�E�$��1J$:#��z}��UtF��&\`p�ή�.��\`�H\\F�V�ykӕ�c�(����-Y�j�U.��f�HDF��V�0�/�D�0�ش@�J�(�p�M�5�h���E�HN]C���]���(�@��|��ۍ���(�(���������B)/�DB0����F�0J$}F*��^u�m��8a�H�,�\\�(nlZp�z%��F�nq�#\`�d�qc���4U�(���p,���6p�k�_s׭ꕬ�%��Õ=ffv���|�F󉫐Qb~?\\��\`2��������P	�D��G����T����?w��|ُ��;�g��~�/Y����X�aҕ�(1��J#\`�4]yI�C�J�Ae<J��Ǫ	X<SfϘ�lq��p4_�ab�r�8o��)�g|��	XHK�\\�;x��/������%����p��5��̊�c]C�g���f �Q�Y3�����.����[����(1��,��kV���������;7'y���Z�%\`�]��7G�旬^���k
>Ll��Bh����\\��y���*�(q�M���Fhۧ�x{�w$66-���;
>L>���x*}t��Y3V�ukUuu�G10;�>) �(�{ �A����5����&x��y�#*A�Q�Al,���o]�kW�v G�*�;�R�C4l���Z�A�2�?������[�����8Yc����^9��?��J?�hZ���m��m��{<u
����n[���>C��O=�_�ų��=	�zeF��Ҵry�û_y�\\5���ir%l�[�[;�L�4�5�_w���+3��s.[v��9�?�����ć6o������0evc�g�,
ӧ.����;�ڿ���s9n?��e�!��|�a~����}��w'^��<���y�_�������)��7���s7Z�fI�r���������1=ƣ/��^c�S:�{��>���
����jlZp�m��C;c��G����k׍�=�o�u��~A��vn����z�͗^)ͩ�2k�埻�#^��J��7�����ug�Թ3/���o���C[��
��v��ucw��-[�t�U�U!���ڴuÃ������ݯ�0}����_������4IDW{Ƕ�Z�o(���zUӕ��+��X�:�g�K?�Ů��ڶ����9]���k�j�-����noQt;7nٹqK۶�퇇uccӂ�����?�i���ηѨL@H^J
������������������������������������������������������������������������@D>�  �IDAT���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������x����?�"7�>\`�    IEND�B\`�",
]
`;

exports[`create 'js' 'vanilla' 'rust': --js_vanilla_rust--frontend--assets--global.css 1`] = `
[
  "--js_vanilla_rust--frontend--assets--global.css",
  "* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #FF585D;
  --secondary: #0072CE;

  background-color: var(--bg);
  color: var(--fg);
  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 1em;
}

main {
  margin: 0 auto;
  max-width: 26em;
}

main.please-wait {}

h1 {
  background-image: url(./logo-black.svg);
  background-position: center 1em;
  background-repeat: no-repeat;
  background-size: auto 1.5em;
  margin-top: 0;
  padding: 3.5em 0 0;
  text-align: center;
  font-size: 1.5em;
}
.greeting {
  color: var(--secondary);
  text-decoration: underline;
}
h2 {
  text-align: center;
}

.please-wait .change {
  pointer-events: none;
}

ul.information  {
  margin: 2em 0 2em 0;
  padding: 0;
  text-align: left;
  font-size: 0.8em;

}
.information li:first-child {
  border-top: 1px solid var(--light-gray);
}
.information li {
  padding: 0.5em 0;
  border-bottom: 1px solid var(--light-gray);
  list-style: none;
}

.change {
  display: flex;
  flex-direction: column;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
  font-size: 1em;
  border: 2px solid var(--light-gray);
  padding: 0.5em;
}
.change > div {
  display: flex;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
}
.change input {
  flex: 1;
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}
.change label {
  display: block;
  text-align: left;
  margin-right: 10px;
  padding-bottom: 0.5em;
}
.change button {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--secondary);
}

button, input {
  font: inherit;
  outline: none;
}

main.please-wait .change button {
  position: relative;
  pointer-events: none;
  background-color: white;
}
main.please-wait .change button span {
  visibility: hidden;
}

button {
  background-color: var(--secondary);
  border-radius: 5px;
  border: none;
  color: #efefef;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}
button:hover, button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}

input {
  background-color: var(--light-gray);
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 0.5em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

@media (prefers-color-scheme: dark) {
  html {
    --bg: #1e1e1e;
    --fg: #efefef;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
  }
  h1 {
    background-image: url(./logo-white.svg);
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}

main.please-wait .loader,
main.please-wait .loader:after{
  display: inline-block;
}
.loader,
.loader:after {
  display: none;
  border-radius: 50%;
  width: 20px;
  height: 20px;
}
.loader {
  font-size: 10px;
  position: absolute;
  top: calc(50% - 10px);
  left: calc(50% - 10px);
  text-indent: -9999em;
  border-top: 3px solid var(--secondary);
  border-right: 3px solid var(--secondary);
  border-bottom: 3px solid var(--secondary);
  border-left: 3px solid #ffffff;
  -webkit-transform: translateZ(0);
  -ms-transform: translateZ(0);
  transform: translateZ(0);
  -webkit-animation: load8 1.1s infinite linear;
  animation: load8 1.1s infinite linear;
}
@-webkit-keyframes load8 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
@keyframes load8 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
",
]
`;

exports[`create 'js' 'vanilla' 'rust': --js_vanilla_rust--frontend--assets--logo-black.svg 1`] = `
[
  "--js_vanilla_rust--frontend--assets--logo-black.svg",
  "<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>",
]
`;

exports[`create 'js' 'vanilla' 'rust': --js_vanilla_rust--frontend--assets--logo-white.svg 1`] = `
[
  "--js_vanilla_rust--frontend--assets--logo-white.svg",
  "<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>",
]
`;

exports[`create 'js' 'vanilla' 'rust': --js_vanilla_rust--frontend--index.html 1`] = `
[
  "--js_vanilla_rust--frontend--index.html",
  "<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" href="assets/favicon.ico"/>
  <link rel="apple-touch-icon" href="assets/favicon.ico"/>
  <!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous"> -->
  <title>Welcome to NEAR</title>
  <link rel="stylesheet" href="assets/global.css">
</head>
<body>
  <main id="signed-out-flow" style="display: none">
    <h1>
      The contract says: <span class="greeting" data-behavior="greeting"></span>
    </h1>
    <h3>
      Welcome to NEAR!
    </h3>
    <p>
      Your contract is storing a greeting message in the NEAR blockchain. To
      change it you need to sign in using the NEAR Wallet. It is very simple,
      just use the button below.
    </p>
    <p>
      Do not worry, this app runs in the test network ("testnet"). It works
      just like the main network ("mainnet"), but using NEAR Tokens that are
      only for testing!
    </p>
    <p style="text-align: center; margin-top: 2.5em">
      <button id="sign-in-button">Sign in with NEAR Wallet</button>
    </p>

  </main>

  <div id="signed-in-flow" style="display: none">
    <button style="float: right" id="sign-out-button">
      Sign out <span data-behavior="account-id"></span>
    </button>
    <main>
      <h1>
        The contract says: <span class="greeting" data-behavior="greeting"></span>
      </h1>
      <form class="change">
        <label for="greeting">Change greeting:</label>
        <div>
          <input
                  autocomplete="off"
                  id="greeting"
                  data-behavior="greeting"
          />
          <button>
            <span>Save</span>
            <div class="loader"></div>
          </button>
        </div>
      </form>
      <p>
        Look at that! A Hello World app! This greeting is stored on the NEAR blockchain. Check it out:
      </p>
      <ol>
        <li>
          Look in <code>index.js</code> - you will see a <code>Wallet</code> object being created and used 
          to interact with the methods <code>set_greeting</code> and <code>get_greeting</code>.
        </li>
        <li>
          These method live in the <a target="_blank" href="https://docs.near.org/docs/develop/contracts/overview">smart contract</a>,
          who's code is defined in the <code>contract/</code> folder.
        </li>
        <li>
          When you run <code>npm run start</code>, the code in <code>contract/</code> gets deployed to the NEAR testnet.
          You can see how this happens by looking in <code>package.json</code> at the <code>scripts</code> section to
          find the <code>dev</code> command.
        </li>
      </ol>
      <hr>
      <p>
        To keep learning, check out
        <a target="_blank" href="https://docs.near.org">the NEAR docs</a>
        or look through some
        <a target="_blank" href="https://examples.near.org">example apps</a>.
      </p>
    </main>
  </div>

  <script src="index.js" type="module"></script>
</body>
</html>
",
]
`;

exports[`create 'js' 'vanilla' 'rust': --js_vanilla_rust--frontend--index.js 1`] = `
[
  "--js_vanilla_rust--frontend--index.js",
  "import 'regenerator-runtime/runtime';
import { Wallet } from './near-wallet';

const CONTRACT_ADDRESS = process.env.CONTRACT_NAME;

// When creating the wallet you can optionally ask to create an access key
// Having the key enables to call non-payable methods without interrupting the user to sign
const wallet = new Wallet({ createAccessKeyFor: CONTRACT_ADDRESS })

// Setup on page load
window.onload = async () => {
  let isSignedIn = await wallet.startUp();

  if (isSignedIn) {
    signedInFlow();
  } else {
    signedOutFlow();
  }

  getGreeting();
};

// Button clicks
document.querySelector('form').onsubmit = setGreeting;
document.querySelector('#sign-in-button').onclick = () => { wallet.signIn(); };
document.querySelector('#sign-out-button').onclick = () => { wallet.signOut(); };

async function setGreeting(event) {
  // handle UI
  event.preventDefault();
  const { greeting } = event.target.elements;

  document.querySelector('#signed-in-flow main')
    .classList.add('please-wait');

  // use the wallet to send the greeting to the Smart Contract
  await wallet.callMethod({ method: 'set_greeting', args: { message: greeting.value }, contractId: CONTRACT_ADDRESS });

  // query the new greeting
  await getGreeting();

  // handle UI stuff
  document.querySelector('#signed-in-flow main').classList.remove('please-wait');
}

async function getGreeting() {
  // use the wallet to query the Smart Contract
  const currentGreeting = await wallet.viewMethod({ method: 'get_greeting', contractId: CONTRACT_ADDRESS });

  // handle UI stuff
  document.querySelectorAll('[data-behavior=greeting]').forEach(el => {
    el.innerText = currentGreeting;
    el.value = currentGreeting;
  });
}

// UI: Display the signed-out-flow container
function signedOutFlow() {
  document.querySelector('#signed-in-flow').style.display = 'none';
  document.querySelector('#signed-out-flow').style.display = 'block';
}

// UI: Displaying the signed in flow container and fill in account-specific data
function signedInFlow() {
  document.querySelector('#signed-out-flow').style.display = 'none';
  document.querySelector('#signed-in-flow').style.display = 'block';
  document.querySelectorAll('[data-behavior=account-id]').forEach(el => {
    el.innerText = wallet.accountId;
  });
}",
]
`;

exports[`create 'js' 'vanilla' 'rust': --js_vanilla_rust--frontend--near-wallet.js 1`] = `
[
  "--js_vanilla_rust--frontend--near-wallet.js",
  "/* A helper file that simplifies using the wallet selector */

// near api js
import { providers } from 'near-api-js';

// wallet selector
import '@near-wallet-selector/modal-ui/styles.css';
import { setupModal } from '@near-wallet-selector/modal-ui';
import { setupWalletSelector } from '@near-wallet-selector/core';
import { setupMyNearWallet } from '@near-wallet-selector/my-near-wallet';

const THIRTY_TGAS = '30000000000000';
const NO_DEPOSIT = '0';

// Wallet that simplifies using the wallet selector
export class Wallet {
  walletSelector;
  wallet;
  network;
  createAccessKeyFor;

  constructor({ createAccessKeyFor = undefined, network = 'testnet' }) {
    // Login to a wallet passing a contractId will create a local
    // key, so the user skips signing non-payable transactions.
    // Omitting the accountId will result in the user being
    // asked to sign all transactions.
    this.createAccessKeyFor = createAccessKeyFor
    this.network = 'testnet'
  }

  // To be called when the website loads
  async startUp() {
    this.walletSelector = await setupWalletSelector({
      network: this.network,
      modules: [setupMyNearWallet()],
    });

    const isSignedIn = this.walletSelector.isSignedIn();

    if (isSignedIn) {
      this.wallet = await this.walletSelector.wallet();
      this.accountId = this.walletSelector.store.getState().accounts[0].accountId;
    }

    return isSignedIn;
  }

  // Sign-in method
  signIn() {
    const description = 'Please select a wallet to sign in.';
    const modal = setupModal(this.walletSelector, { contractId: this.createAccessKeyFor, description });
    modal.show();
  }

  // Sign-out method
  signOut() {
    this.wallet.signOut();
    this.wallet = this.accountId = this.createAccessKeyFor = null;
    window.location.replace(window.location.origin + window.location.pathname);
  }

  // Make a read-only call to retrieve information from the network
  async viewMethod({ contractId, method, args = {} }) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    let res = await provider.query({
      request_type: 'call_function',
      account_id: contractId,
      method_name: method,
      args_base64: Buffer.from(JSON.stringify(args)).toString('base64'),
      finality: 'optimistic',
    });
    return JSON.parse(Buffer.from(res.result).toString());
  }

  // Call a method that changes the contract's state
  async callMethod({ contractId, method, args = {}, gas = THIRTY_TGAS, deposit = NO_DEPOSIT }) {
    // Sign a transaction with the "FunctionCall" action
    return await this.wallet.signAndSendTransaction({
      signerId: this.accountId,
      receiverId: contractId,
      actions: [
        {
          type: 'FunctionCall',
          params: {
            methodName: method,
            args,
            gas,
            deposit,
          },
        },
      ],
    });
  }

  // Get transaction result from the network
  async getTransactionResult(txhash) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    // Retrieve transaction result from the network
    const transaction = await provider.txStatus(txhash, 'unnused');
    return providers.getTransactionLastResult(transaction);
  }
}",
]
`;

exports[`create 'js' 'vanilla' 'rust': --js_vanilla_rust--frontend--package.json 1`] = `
[
  "--js_vanilla_rust--frontend--package.json",
  "{
  "name": "my-near-app",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "start": "./start.sh",
    "build": "parcel build index.html --public-url ./"
  },
  "devDependencies": {
    "env-cmd": "^10.1.0",
    "events": "^3.3.0",
    "https-browserify": "^1.0.0",
    "nodemon": "^2.0.16",
    "parcel": "^2.7.0",
    "punycode": "^1.4.1",
    "process": "^0.11.10",
    "stream-http": "^3.1.0",
    "url": "^0.11.0"
  },
  "dependencies": {
    "@near-wallet-selector/core": "^8.1.4",
    "@near-wallet-selector/ledger": "^8.1.4",
    "@near-wallet-selector/modal-ui": "^8.1.4",
    "@near-wallet-selector/my-near-wallet": "^8.1.4",
    "@near-wallet-selector/near-wallet": "^8.1.4",
    "near-api-js": "^2.1.4"
  }
}
",
]
`;

exports[`create 'js' 'vanilla' 'rust': --js_vanilla_rust--frontend--start.sh 1`] = `
[
  "--js_vanilla_rust--frontend--start.sh",
  "#!/bin/sh

CONTRACT_DIRECTORY=../contract
DEV_ACCOUNT_FILE="\${CONTRACT_DIRECTORY}/neardev/dev-account.env"

start () {
  echo The app is starting!
  env-cmd -f $DEV_ACCOUNT_FILE parcel index.html --open
}

alert () {
  GREEN='\\033[1;32m'
  NC='\\033[0m' # No Color

  echo "======================================================"
  echo "It looks like you didn't deploy your contract"
  echo ">> Run \${GREEN}'npm run deploy'\${NC} from the your project's root directory"
  echo "This frontend template works with contracts deployed to NEAR TestNet"
  echo "======================================================"
}

if [ -f "$DEV_ACCOUNT_FILE" ]; then
  start
else
  alert
fi
",
]
`;

exports[`create 'js' 'vanilla' 'rust': --js_vanilla_rust--integration-tests--Cargo.toml 1`] = `
[
  "--js_vanilla_rust--integration-tests--Cargo.toml",
  "[package]
name = "integration-tests"
version = "1.0.0"
publish = false
edition = "2018"

[dev-dependencies]
anyhow = "1.0"
borsh = "0.9"
maplit = "1.0"
near-units = "0.2.0"
# arbitrary_precision enabled for u128 types that workspaces requires for Balance types
serde_json = { version = "1.0", features = ["arbitrary_precision"] }
tokio = { version = "1.18.1", features = ["full"] }
tracing = "0.1"
tracing-subscriber = { version = "0.3.11", features = ["env-filter"] }
workspaces = "0.6.0"
pkg-config = "0.3.1"

[[example]]
name = "integration-tests"
path = "src/tests.rs"
",
]
`;

exports[`create 'js' 'vanilla' 'rust': --js_vanilla_rust--integration-tests--src--tests.rs 1`] = `
[
  "--js_vanilla_rust--integration-tests--src--tests.rs",
  "use std::{env, fs};
use near_units::parse_near;
use serde_json::json;
use workspaces::{Account, Contract};

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    let wasm_arg: &str = &(env::args().nth(1).unwrap());
    let wasm_filepath = fs::canonicalize(env::current_dir()?.join(wasm_arg))?;

    let worker = workspaces::sandbox().await?;
    let wasm = std::fs::read(wasm_filepath)?;
    let contract = worker.dev_deploy(&wasm).await?;

    // create accounts
    let account = worker.dev_create_account().await?;
    let alice = account
        .create_subaccount( "alice")
        .initial_balance(parse_near!("30 N"))
        .transact()
        .await?
        .into_result()?;

    // begin tests
    test_default_message(&alice, &contract).await?;
    test_changes_message(&alice, &contract).await?;
    Ok(())
}

async fn test_default_message(
    user: &Account,
    contract: &Contract,
) -> anyhow::Result<()> {
    let message: String = user
        .call( contract.id(), "get_greeting")
        .args_json(json!({}))
        .transact()
        .await?
        .json()?;

    assert_eq!(message, "Hello".to_string());
    println!("      Passed ✅ gets default message");
    Ok(())
}

async fn test_changes_message(
    user: &Account,
    contract: &Contract,
) -> anyhow::Result<()> {
    user.call(contract.id(), "set_greeting")
        .args_json(json!({"message": "Howdy"}))
        .transact()
        .await?
        .into_result()?;

    let message: String = user
        .call(contract.id(), "get_greeting")
        .args_json(json!({}))
        .transact()
        .await?
        .json()?;

    assert_eq!(message, "Howdy".to_string());
    println!("      Passed ✅ changes message");
    Ok(())
}",
]
`;

exports[`create 'js' 'vanilla' 'rust': --js_vanilla_rust--package.json 1`] = `
[
  "--js_vanilla_rust--package.json",
  "{
  "name": "js_vanilla_rust",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "start": "cd frontend && npm run start",
    "deploy": "cd contract && npm run deploy",
    "build": "npm run build:contract && npm run build:web",
    "build:web": "cd frontend && npm run build",
    "build:contract": "cd contract && npm run build",
    "test": "npm run test:unit && npm run test:integration",
    "test:unit": "cd contract && npm test",
    "test:integration": "npm run build:contract && cd integration-tests && cargo run --example integration-tests \\"../contract/build/hello_near.wasm\\"",
    "postinstall": "cd frontend && npm install && cd .. && echo rs tests && cd contract && npm install"
  },
  "devDependencies": {
    "near-cli": "^3.3.0"
  },
  "dependencies": {}
}",
]
`;

exports[`create 'js' 'vanilla' 'rust': --js_vanilla_rust--rust-toolchain.toml 1`] = `
[
  "--js_vanilla_rust--rust-toolchain.toml",
  "[toolchain]
channel = "1.69"
",
]
`;

exports[`create 'rust' 'none' 'js': --rust_none_js--.gitignore 1`] = `
[
  "--rust_none_js--.gitignore",
  "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
# Developer note: near.gitignore will be renamed to .gitignore upon project creation
# dependencies
node_modules
/.pnp
.pnp.js

# build
/out
/dist

# keys
/templates/react/neardev

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local
/.cache

npm-debug.log*
yarn-debug.log*
yarn-error.log*
",
]
`;

exports[`create 'rust' 'none' 'js': --rust_none_js--.gitpod.yml 1`] = `
[
  "--rust_none_js--.gitpod.yml",
  "tasks:
  - init: npm dev
    command: npm run dev
ports:
  - port: 1234
    onOpen: open-browser
",
]
`;

exports[`create 'rust' 'none' 'js': --rust_none_js--README.md 1`] = `
[
  "--rust_none_js--README.md",
  "near-blank-project
==================

This app was initialized with [create-near-app]


Quick Start
===========

If you haven't installed dependencies during setup:

    npm install


Build and deploy your contract to TestNet with a temporary dev account:

    npm run deploy

Test your contract:

    npm test

If you have a frontend, run \`npm start\`. This will run a dev server.


Exploring The Code
==================

1. The smart-contract code lives in the \`/contract\` folder. See the README there for
   more info. In blockchain apps the smart contract is the "backend" of your app.
2. The frontend code lives in the \`/frontend\` folder. \`/frontend/index.html\` is a great
   place to start exploring. Note that it loads in \`/frontend/index.js\`,
   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.
3. Test your contract: \`npm test\`, this will run the tests in \`integration-tests\` directory.


Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. 
When you run \`npm run deploy\`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.
When you're ready to make it permanent, here's how:


Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local \`node_modules\` folder when you ran \`npm install\`, but for best ergonomics you may want to install it globally:

    npm install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all \`near\` commands with \`npx\`

Ensure that it's installed with \`near --version\` (or \`npx near --version\`)


Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as \`your-name.testnet\`, you can deploy your contract to \`near-blank-project.your-name.testnet\`. Assuming you've already created an account on [NEAR Wallet], here's how to create \`near-blank-project.your-name.testnet\`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace \`YOUR-NAME\` below with your actual account name):

      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: deploy the contract
---------------------------

Use the CLI to deploy the contract to TestNet with your account ID.
Replace \`PATH_TO_WASM_FILE\` with the \`wasm\` that was generated in \`contract\` build directory.

    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile PATH_TO_WASM_FILE


Step 3: set contract name in your frontend code
-----------------------------------------------

Modify the line in \`src/config.js\` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-blank-project.YOUR-NAME.testnet'



Troubleshooting
===============

On Windows, if you're seeing an error containing \`EPERM\` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.


  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/concepts/basics/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages
",
]
`;

exports[`create 'rust' 'none' 'js': --rust_none_js--contract--.cargo--config 1`] = `
[
  "--rust_none_js--contract--.cargo--config",
  "[build]
rustflags = ["-C", "link-args=-s"]
",
]
`;

exports[`create 'rust' 'none' 'js': --rust_none_js--contract--.gitignore 1`] = `
[
  "--rust_none_js--contract--.gitignore",
  "target
",
]
`;

exports[`create 'rust' 'none' 'js': --rust_none_js--contract--Cargo.toml 1`] = `
[
  "--rust_none_js--contract--Cargo.toml",
  "[package]
name = "hello_near"
version = "1.0.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = "4.0.0"
uint = { version = "0.9.3", default-features = false }

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

[workspace]
members = []
",
]
`;

exports[`create 'rust' 'none' 'js': --rust_none_js--contract--README.md 1`] = `
[
  "--rust_none_js--contract--README.md",
  "# Hello NEAR Contract

The smart contract exposes two methods to enable storing and retrieving a greeting in the NEAR network.

\`\`\`rust
const DEFAULT_GREETING: &str = "Hello";

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
    greeting: String,
}

impl Default for Contract {
    fn default() -> Self {
        Self { greeting: DEFAULT_GREETING.to_string() }
    }
}

#[near_bindgen]
impl Contract {
    // Public: Returns the stored greeting, defaulting to 'Hello'
    pub fn get_greeting(&self) -> String {
        return self.greeting.clone();
    }

    // Public: Takes a greeting, such as 'howdy', and records it
    pub fn set_greeting(&mut self, greeting: String) {
        // Record a log permanently to the blockchain!
        log!("Saving greeting {}", greeting);
        self.greeting = greeting;
    }
}
\`\`\`

<br />

# Quickstart

1. Make sure you have installed [rust](https://rust.org/).
2. Install the [\`NEAR CLI\`](https://github.com/near/near-cli#setup)

<br />

## 1. Build and Deploy the Contract
You can automatically compile and deploy the contract in the NEAR testnet by running:

\`\`\`bash
./deploy.sh
\`\`\`

Once finished, check the \`neardev/dev-account\` file to find the address in which the contract was deployed:

\`\`\`bash
cat ./neardev/dev-account
# e.g. dev-1659899566943-21539992274727
\`\`\`

<br />

## 2. Retrieve the Greeting

\`get_greeting\` is a read-only method (aka \`view\` method).

\`View\` methods can be called for **free** by anyone, even people **without a NEAR account**!

\`\`\`bash
# Use near-cli to get the greeting
near view <dev-account> get_greeting
\`\`\`

<br />

## 3. Store a New Greeting
\`set_greeting\` changes the contract's state, for which it is a \`change\` method.

\`Change\` methods can only be invoked using a NEAR account, since the account needs to pay GAS for the transaction.

\`\`\`bash
# Use near-cli to set a new greeting
near call <dev-account> set_greeting '{"message":"howdy"}' --accountId <dev-account>
\`\`\`

**Tip:** If you would like to call \`set_greeting\` using your own account, first login into NEAR using:

\`\`\`bash
# Use near-cli to login your NEAR account
near login
\`\`\`

and then use the logged account to sign the transaction: \`--accountId <your-account>\`.",
]
`;

exports[`create 'rust' 'none' 'js': --rust_none_js--contract--build.sh 1`] = `
[
  "--rust_none_js--contract--build.sh",
  "#!/bin/sh

echo ">> Building contract"

rustup target add wasm32-unknown-unknown
cargo build --all --target wasm32-unknown-unknown --release
",
]
`;

exports[`create 'rust' 'none' 'js': --rust_none_js--contract--deploy.sh 1`] = `
[
  "--rust_none_js--contract--deploy.sh",
  "#!/bin/sh

./build.sh

if [ $? -ne 0 ]; then
  echo ">> Error building contract"
  exit 1
fi

echo ">> Deploying contract"

# https://docs.near.org/tools/near-cli#near-dev-deploy
near dev-deploy --wasmFile ./target/wasm32-unknown-unknown/release/hello_near.wasm
",
]
`;

exports[`create 'rust' 'none' 'js': --rust_none_js--contract--src--lib.rs 1`] = `
[
  "--rust_none_js--contract--src--lib.rs",
  "// Find all our documentation at https://docs.near.org
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{log, near_bindgen};

// Define the default message
const DEFAULT_MESSAGE: &str = "Hello";

// Define the contract structure
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
    message: String,
}

// Define the default, which automatically initializes the contract
impl Default for Contract {
    fn default() -> Self {
        Self { message: DEFAULT_MESSAGE.to_string() }
    }
}

// Implement the contract structure
#[near_bindgen]
impl Contract {
    // Public method - returns the greeting saved, defaulting to DEFAULT_MESSAGE
    pub fn get_greeting(&self) -> String {
        return self.message.clone();
    }

    // Public method - accepts a greeting, such as "howdy", and records it
    pub fn set_greeting(&mut self, message: String) {
        log!("Saving greeting {}", message);
        self.message = message;
    }
}

/*
 * The rest of this file holds the inline tests for the code above
 * Learn more about Rust tests: https://doc.rust-lang.org/book/ch11-01-writing-tests.html
 */
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn get_default_greeting() {
        let contract = Contract::default();
        // this test did not call set_greeting so should return the default "Hello" greeting
        assert_eq!(
            contract.get_greeting(),
            "Hello".to_string()
        );
    }

    #[test]
    fn set_then_get_greeting() {
        let mut contract = Contract::default();
        contract.set_greeting("howdy".to_string());
        assert_eq!(
            contract.get_greeting(),
            "howdy".to_string()
        );
    }
}
",
]
`;

exports[`create 'rust' 'none' 'js': --rust_none_js--integration-tests--ava.config.cjs 1`] = `
[
  "--rust_none_js--integration-tests--ava.config.cjs",
  "require("util").inspect.defaultOptions.depth = 5; // Increase AVA's printing depth

module.exports = {
  timeout: "300000",
  files: ["src/*.ava.ts"],
  failWithoutAssertions: false,
  extensions: ["ts"],
  require: ["ts-node/register"],
};
",
]
`;

exports[`create 'rust' 'none' 'js': --rust_none_js--integration-tests--package.json 1`] = `
[
  "--rust_none_js--integration-tests--package.json",
  "{
  "name": "ava-testing",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "test": "ava"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/node": "^18.6.2",
    "ava": "^4.2.0",
    "near-workspaces": "^3.2.1",
    "ts-node": "^10.8.0",
    "typescript": "^4.7.2"
  },
  "dependencies": {}
}
",
]
`;

exports[`create 'rust' 'none' 'js': --rust_none_js--integration-tests--src--main.ava.ts 1`] = `
[
  "--rust_none_js--integration-tests--src--main.ava.ts",
  "import { Worker, NearAccount } from 'near-workspaces';
import anyTest, { TestFn } from 'ava';

const test = anyTest as TestFn<{
  worker: Worker;
  accounts: Record<string, NearAccount>;
}>;

test.beforeEach(async (t) => {
  // Init the worker and start a Sandbox server
  const worker = await Worker.init();

  // Deploy contract
  const root = worker.rootAccount;
  const contract = await root.createSubAccount('test-account');
  // Get wasm file path from package.json test script in folder above
  await contract.deploy(
    process.argv[2],
  );

  // Save state for test runs, it is unique for each test
  t.context.worker = worker;
  t.context.accounts = { root, contract };
});

test.afterEach.always(async (t) => {
  // Stop Sandbox server
  await t.context.worker.tearDown().catch((error) => {
    console.log('Failed to stop the Sandbox:', error);
  });
});

test('returns the default greeting', async (t) => {
  const { contract } = t.context.accounts;
  const message: string = await contract.view('get_greeting', {});
  t.is(message, 'Hello');
});

test('changes the message', async (t) => {
  const { root, contract } = t.context.accounts;
  await root.call(contract, 'set_greeting', { message: 'Howdy' });
  const message: string = await contract.view('get_greeting', {});
  t.is(message, 'Howdy');
});",
]
`;

exports[`create 'rust' 'none' 'js': --rust_none_js--package.json 1`] = `
[
  "--rust_none_js--package.json",
  "{
  "name": "rust_none_js",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "deploy": "cd contract && ./deploy.sh",
    "build": "npm run build:contract",
    "build:contract": "cd contract && ./build.sh",
    "test": "npm run test:unit && npm run test:integration",
    "test:unit": "cd contract && cargo test",
    "test:integration": "npm run build:contract && cd integration-tests && npm test -- -- \\"./contract/target/wasm32-unknown-unknown/release/hello_near.wasm\\"",
    "postinstall": "echo no frontend && cd integration-tests && npm install && cd .. && echo rs contract"
  },
  "devDependencies": {
    "near-cli": "^3.3.0"
  },
  "dependencies": {}
}",
]
`;

exports[`create 'rust' 'none' 'js': --rust_none_js--rust-toolchain.toml 1`] = `
[
  "--rust_none_js--rust-toolchain.toml",
  "[toolchain]
channel = "1.69"
",
]
`;

exports[`create 'rust' 'none' 'rust': --rust_none_rust--.gitignore 1`] = `
[
  "--rust_none_rust--.gitignore",
  "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
# Developer note: near.gitignore will be renamed to .gitignore upon project creation
# dependencies
node_modules
/.pnp
.pnp.js

# build
/out
/dist

# keys
/templates/react/neardev

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local
/.cache

npm-debug.log*
yarn-debug.log*
yarn-error.log*
",
]
`;

exports[`create 'rust' 'none' 'rust': --rust_none_rust--.gitpod.yml 1`] = `
[
  "--rust_none_rust--.gitpod.yml",
  "tasks:
  - init: npm dev
    command: npm run dev
ports:
  - port: 1234
    onOpen: open-browser
",
]
`;

exports[`create 'rust' 'none' 'rust': --rust_none_rust--README.md 1`] = `
[
  "--rust_none_rust--README.md",
  "near-blank-project
==================

This app was initialized with [create-near-app]


Quick Start
===========

If you haven't installed dependencies during setup:

    npm install


Build and deploy your contract to TestNet with a temporary dev account:

    npm run deploy

Test your contract:

    npm test

If you have a frontend, run \`npm start\`. This will run a dev server.


Exploring The Code
==================

1. The smart-contract code lives in the \`/contract\` folder. See the README there for
   more info. In blockchain apps the smart contract is the "backend" of your app.
2. The frontend code lives in the \`/frontend\` folder. \`/frontend/index.html\` is a great
   place to start exploring. Note that it loads in \`/frontend/index.js\`,
   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.
3. Test your contract: \`npm test\`, this will run the tests in \`integration-tests\` directory.


Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. 
When you run \`npm run deploy\`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.
When you're ready to make it permanent, here's how:


Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local \`node_modules\` folder when you ran \`npm install\`, but for best ergonomics you may want to install it globally:

    npm install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all \`near\` commands with \`npx\`

Ensure that it's installed with \`near --version\` (or \`npx near --version\`)


Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as \`your-name.testnet\`, you can deploy your contract to \`near-blank-project.your-name.testnet\`. Assuming you've already created an account on [NEAR Wallet], here's how to create \`near-blank-project.your-name.testnet\`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace \`YOUR-NAME\` below with your actual account name):

      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: deploy the contract
---------------------------

Use the CLI to deploy the contract to TestNet with your account ID.
Replace \`PATH_TO_WASM_FILE\` with the \`wasm\` that was generated in \`contract\` build directory.

    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile PATH_TO_WASM_FILE


Step 3: set contract name in your frontend code
-----------------------------------------------

Modify the line in \`src/config.js\` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-blank-project.YOUR-NAME.testnet'



Troubleshooting
===============

On Windows, if you're seeing an error containing \`EPERM\` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.


  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/concepts/basics/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages
",
]
`;

exports[`create 'rust' 'none' 'rust': --rust_none_rust--contract--.cargo--config 1`] = `
[
  "--rust_none_rust--contract--.cargo--config",
  "[build]
rustflags = ["-C", "link-args=-s"]
",
]
`;

exports[`create 'rust' 'none' 'rust': --rust_none_rust--contract--.gitignore 1`] = `
[
  "--rust_none_rust--contract--.gitignore",
  "target
",
]
`;

exports[`create 'rust' 'none' 'rust': --rust_none_rust--contract--Cargo.toml 1`] = `
[
  "--rust_none_rust--contract--Cargo.toml",
  "[package]
name = "hello_near"
version = "1.0.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = "4.0.0"
uint = { version = "0.9.3", default-features = false }

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

[workspace]
members = []
",
]
`;

exports[`create 'rust' 'none' 'rust': --rust_none_rust--contract--README.md 1`] = `
[
  "--rust_none_rust--contract--README.md",
  "# Hello NEAR Contract

The smart contract exposes two methods to enable storing and retrieving a greeting in the NEAR network.

\`\`\`rust
const DEFAULT_GREETING: &str = "Hello";

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
    greeting: String,
}

impl Default for Contract {
    fn default() -> Self {
        Self { greeting: DEFAULT_GREETING.to_string() }
    }
}

#[near_bindgen]
impl Contract {
    // Public: Returns the stored greeting, defaulting to 'Hello'
    pub fn get_greeting(&self) -> String {
        return self.greeting.clone();
    }

    // Public: Takes a greeting, such as 'howdy', and records it
    pub fn set_greeting(&mut self, greeting: String) {
        // Record a log permanently to the blockchain!
        log!("Saving greeting {}", greeting);
        self.greeting = greeting;
    }
}
\`\`\`

<br />

# Quickstart

1. Make sure you have installed [rust](https://rust.org/).
2. Install the [\`NEAR CLI\`](https://github.com/near/near-cli#setup)

<br />

## 1. Build and Deploy the Contract
You can automatically compile and deploy the contract in the NEAR testnet by running:

\`\`\`bash
./deploy.sh
\`\`\`

Once finished, check the \`neardev/dev-account\` file to find the address in which the contract was deployed:

\`\`\`bash
cat ./neardev/dev-account
# e.g. dev-1659899566943-21539992274727
\`\`\`

<br />

## 2. Retrieve the Greeting

\`get_greeting\` is a read-only method (aka \`view\` method).

\`View\` methods can be called for **free** by anyone, even people **without a NEAR account**!

\`\`\`bash
# Use near-cli to get the greeting
near view <dev-account> get_greeting
\`\`\`

<br />

## 3. Store a New Greeting
\`set_greeting\` changes the contract's state, for which it is a \`change\` method.

\`Change\` methods can only be invoked using a NEAR account, since the account needs to pay GAS for the transaction.

\`\`\`bash
# Use near-cli to set a new greeting
near call <dev-account> set_greeting '{"message":"howdy"}' --accountId <dev-account>
\`\`\`

**Tip:** If you would like to call \`set_greeting\` using your own account, first login into NEAR using:

\`\`\`bash
# Use near-cli to login your NEAR account
near login
\`\`\`

and then use the logged account to sign the transaction: \`--accountId <your-account>\`.",
]
`;

exports[`create 'rust' 'none' 'rust': --rust_none_rust--contract--build.sh 1`] = `
[
  "--rust_none_rust--contract--build.sh",
  "#!/bin/sh

echo ">> Building contract"

rustup target add wasm32-unknown-unknown
cargo build --all --target wasm32-unknown-unknown --release
",
]
`;

exports[`create 'rust' 'none' 'rust': --rust_none_rust--contract--deploy.sh 1`] = `
[
  "--rust_none_rust--contract--deploy.sh",
  "#!/bin/sh

./build.sh

if [ $? -ne 0 ]; then
  echo ">> Error building contract"
  exit 1
fi

echo ">> Deploying contract"

# https://docs.near.org/tools/near-cli#near-dev-deploy
near dev-deploy --wasmFile ./target/wasm32-unknown-unknown/release/hello_near.wasm
",
]
`;

exports[`create 'rust' 'none' 'rust': --rust_none_rust--contract--src--lib.rs 1`] = `
[
  "--rust_none_rust--contract--src--lib.rs",
  "// Find all our documentation at https://docs.near.org
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{log, near_bindgen};

// Define the default message
const DEFAULT_MESSAGE: &str = "Hello";

// Define the contract structure
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
    message: String,
}

// Define the default, which automatically initializes the contract
impl Default for Contract {
    fn default() -> Self {
        Self { message: DEFAULT_MESSAGE.to_string() }
    }
}

// Implement the contract structure
#[near_bindgen]
impl Contract {
    // Public method - returns the greeting saved, defaulting to DEFAULT_MESSAGE
    pub fn get_greeting(&self) -> String {
        return self.message.clone();
    }

    // Public method - accepts a greeting, such as "howdy", and records it
    pub fn set_greeting(&mut self, message: String) {
        log!("Saving greeting {}", message);
        self.message = message;
    }
}

/*
 * The rest of this file holds the inline tests for the code above
 * Learn more about Rust tests: https://doc.rust-lang.org/book/ch11-01-writing-tests.html
 */
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn get_default_greeting() {
        let contract = Contract::default();
        // this test did not call set_greeting so should return the default "Hello" greeting
        assert_eq!(
            contract.get_greeting(),
            "Hello".to_string()
        );
    }

    #[test]
    fn set_then_get_greeting() {
        let mut contract = Contract::default();
        contract.set_greeting("howdy".to_string());
        assert_eq!(
            contract.get_greeting(),
            "howdy".to_string()
        );
    }
}
",
]
`;

exports[`create 'rust' 'none' 'rust': --rust_none_rust--integration-tests--Cargo.toml 1`] = `
[
  "--rust_none_rust--integration-tests--Cargo.toml",
  "[package]
name = "integration-tests"
version = "1.0.0"
publish = false
edition = "2018"

[dev-dependencies]
anyhow = "1.0"
borsh = "0.9"
maplit = "1.0"
near-units = "0.2.0"
# arbitrary_precision enabled for u128 types that workspaces requires for Balance types
serde_json = { version = "1.0", features = ["arbitrary_precision"] }
tokio = { version = "1.18.1", features = ["full"] }
tracing = "0.1"
tracing-subscriber = { version = "0.3.11", features = ["env-filter"] }
workspaces = "0.6.0"
pkg-config = "0.3.1"

[[example]]
name = "integration-tests"
path = "src/tests.rs"
",
]
`;

exports[`create 'rust' 'none' 'rust': --rust_none_rust--integration-tests--src--tests.rs 1`] = `
[
  "--rust_none_rust--integration-tests--src--tests.rs",
  "use std::{env, fs};
use near_units::parse_near;
use serde_json::json;
use workspaces::{Account, Contract};

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    let wasm_arg: &str = &(env::args().nth(1).unwrap());
    let wasm_filepath = fs::canonicalize(env::current_dir()?.join(wasm_arg))?;

    let worker = workspaces::sandbox().await?;
    let wasm = std::fs::read(wasm_filepath)?;
    let contract = worker.dev_deploy(&wasm).await?;

    // create accounts
    let account = worker.dev_create_account().await?;
    let alice = account
        .create_subaccount( "alice")
        .initial_balance(parse_near!("30 N"))
        .transact()
        .await?
        .into_result()?;

    // begin tests
    test_default_message(&alice, &contract).await?;
    test_changes_message(&alice, &contract).await?;
    Ok(())
}

async fn test_default_message(
    user: &Account,
    contract: &Contract,
) -> anyhow::Result<()> {
    let message: String = user
        .call( contract.id(), "get_greeting")
        .args_json(json!({}))
        .transact()
        .await?
        .json()?;

    assert_eq!(message, "Hello".to_string());
    println!("      Passed ✅ gets default message");
    Ok(())
}

async fn test_changes_message(
    user: &Account,
    contract: &Contract,
) -> anyhow::Result<()> {
    user.call(contract.id(), "set_greeting")
        .args_json(json!({"message": "Howdy"}))
        .transact()
        .await?
        .into_result()?;

    let message: String = user
        .call(contract.id(), "get_greeting")
        .args_json(json!({}))
        .transact()
        .await?
        .json()?;

    assert_eq!(message, "Howdy".to_string());
    println!("      Passed ✅ changes message");
    Ok(())
}",
]
`;

exports[`create 'rust' 'none' 'rust': --rust_none_rust--package.json 1`] = `
[
  "--rust_none_rust--package.json",
  "{
  "name": "rust_none_rust",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "deploy": "cd contract && ./deploy.sh",
    "build": "npm run build:contract",
    "build:contract": "cd contract && ./build.sh",
    "test": "npm run test:unit && npm run test:integration",
    "test:unit": "cd contract && cargo test",
    "test:integration": "npm run build:contract && cd integration-tests && cargo run --example integration-tests \\"../contract/target/wasm32-unknown-unknown/release/hello_near.wasm\\"",
    "postinstall": "echo no frontend && echo rs tests && echo rs contract"
  },
  "devDependencies": {
    "near-cli": "^3.3.0"
  },
  "dependencies": {}
}",
]
`;

exports[`create 'rust' 'none' 'rust': --rust_none_rust--rust-toolchain.toml 1`] = `
[
  "--rust_none_rust--rust-toolchain.toml",
  "[toolchain]
channel = "1.69"
",
]
`;

exports[`create 'rust' 'react' 'js': --rust_react_js--.gitignore 1`] = `
[
  "--rust_react_js--.gitignore",
  "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
# Developer note: near.gitignore will be renamed to .gitignore upon project creation
# dependencies
node_modules
/.pnp
.pnp.js

# build
/out
/dist

# keys
/templates/react/neardev

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local
/.cache

npm-debug.log*
yarn-debug.log*
yarn-error.log*
",
]
`;

exports[`create 'rust' 'react' 'js': --rust_react_js--.gitpod.yml 1`] = `
[
  "--rust_react_js--.gitpod.yml",
  "tasks:
  - init: npm dev
    command: npm run dev
ports:
  - port: 1234
    onOpen: open-browser
",
]
`;

exports[`create 'rust' 'react' 'js': --rust_react_js--README.md 1`] = `
[
  "--rust_react_js--README.md",
  "near-blank-project
==================

This app was initialized with [create-near-app]


Quick Start
===========

If you haven't installed dependencies during setup:

    npm install


Build and deploy your contract to TestNet with a temporary dev account:

    npm run deploy

Test your contract:

    npm test

If you have a frontend, run \`npm start\`. This will run a dev server.


Exploring The Code
==================

1. The smart-contract code lives in the \`/contract\` folder. See the README there for
   more info. In blockchain apps the smart contract is the "backend" of your app.
2. The frontend code lives in the \`/frontend\` folder. \`/frontend/index.html\` is a great
   place to start exploring. Note that it loads in \`/frontend/index.js\`,
   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.
3. Test your contract: \`npm test\`, this will run the tests in \`integration-tests\` directory.


Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. 
When you run \`npm run deploy\`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.
When you're ready to make it permanent, here's how:


Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local \`node_modules\` folder when you ran \`npm install\`, but for best ergonomics you may want to install it globally:

    npm install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all \`near\` commands with \`npx\`

Ensure that it's installed with \`near --version\` (or \`npx near --version\`)


Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as \`your-name.testnet\`, you can deploy your contract to \`near-blank-project.your-name.testnet\`. Assuming you've already created an account on [NEAR Wallet], here's how to create \`near-blank-project.your-name.testnet\`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace \`YOUR-NAME\` below with your actual account name):

      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: deploy the contract
---------------------------

Use the CLI to deploy the contract to TestNet with your account ID.
Replace \`PATH_TO_WASM_FILE\` with the \`wasm\` that was generated in \`contract\` build directory.

    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile PATH_TO_WASM_FILE


Step 3: set contract name in your frontend code
-----------------------------------------------

Modify the line in \`src/config.js\` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-blank-project.YOUR-NAME.testnet'



Troubleshooting
===============

On Windows, if you're seeing an error containing \`EPERM\` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.


  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/concepts/basics/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages
",
]
`;

exports[`create 'rust' 'react' 'js': --rust_react_js--contract--.cargo--config 1`] = `
[
  "--rust_react_js--contract--.cargo--config",
  "[build]
rustflags = ["-C", "link-args=-s"]
",
]
`;

exports[`create 'rust' 'react' 'js': --rust_react_js--contract--.gitignore 1`] = `
[
  "--rust_react_js--contract--.gitignore",
  "target
",
]
`;

exports[`create 'rust' 'react' 'js': --rust_react_js--contract--Cargo.toml 1`] = `
[
  "--rust_react_js--contract--Cargo.toml",
  "[package]
name = "hello_near"
version = "1.0.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = "4.0.0"
uint = { version = "0.9.3", default-features = false }

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

[workspace]
members = []
",
]
`;

exports[`create 'rust' 'react' 'js': --rust_react_js--contract--README.md 1`] = `
[
  "--rust_react_js--contract--README.md",
  "# Hello NEAR Contract

The smart contract exposes two methods to enable storing and retrieving a greeting in the NEAR network.

\`\`\`rust
const DEFAULT_GREETING: &str = "Hello";

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
    greeting: String,
}

impl Default for Contract {
    fn default() -> Self {
        Self { greeting: DEFAULT_GREETING.to_string() }
    }
}

#[near_bindgen]
impl Contract {
    // Public: Returns the stored greeting, defaulting to 'Hello'
    pub fn get_greeting(&self) -> String {
        return self.greeting.clone();
    }

    // Public: Takes a greeting, such as 'howdy', and records it
    pub fn set_greeting(&mut self, greeting: String) {
        // Record a log permanently to the blockchain!
        log!("Saving greeting {}", greeting);
        self.greeting = greeting;
    }
}
\`\`\`

<br />

# Quickstart

1. Make sure you have installed [rust](https://rust.org/).
2. Install the [\`NEAR CLI\`](https://github.com/near/near-cli#setup)

<br />

## 1. Build and Deploy the Contract
You can automatically compile and deploy the contract in the NEAR testnet by running:

\`\`\`bash
./deploy.sh
\`\`\`

Once finished, check the \`neardev/dev-account\` file to find the address in which the contract was deployed:

\`\`\`bash
cat ./neardev/dev-account
# e.g. dev-1659899566943-21539992274727
\`\`\`

<br />

## 2. Retrieve the Greeting

\`get_greeting\` is a read-only method (aka \`view\` method).

\`View\` methods can be called for **free** by anyone, even people **without a NEAR account**!

\`\`\`bash
# Use near-cli to get the greeting
near view <dev-account> get_greeting
\`\`\`

<br />

## 3. Store a New Greeting
\`set_greeting\` changes the contract's state, for which it is a \`change\` method.

\`Change\` methods can only be invoked using a NEAR account, since the account needs to pay GAS for the transaction.

\`\`\`bash
# Use near-cli to set a new greeting
near call <dev-account> set_greeting '{"message":"howdy"}' --accountId <dev-account>
\`\`\`

**Tip:** If you would like to call \`set_greeting\` using your own account, first login into NEAR using:

\`\`\`bash
# Use near-cli to login your NEAR account
near login
\`\`\`

and then use the logged account to sign the transaction: \`--accountId <your-account>\`.",
]
`;

exports[`create 'rust' 'react' 'js': --rust_react_js--contract--build.sh 1`] = `
[
  "--rust_react_js--contract--build.sh",
  "#!/bin/sh

echo ">> Building contract"

rustup target add wasm32-unknown-unknown
cargo build --all --target wasm32-unknown-unknown --release
",
]
`;

exports[`create 'rust' 'react' 'js': --rust_react_js--contract--deploy.sh 1`] = `
[
  "--rust_react_js--contract--deploy.sh",
  "#!/bin/sh

./build.sh

if [ $? -ne 0 ]; then
  echo ">> Error building contract"
  exit 1
fi

echo ">> Deploying contract"

# https://docs.near.org/tools/near-cli#near-dev-deploy
near dev-deploy --wasmFile ./target/wasm32-unknown-unknown/release/hello_near.wasm
",
]
`;

exports[`create 'rust' 'react' 'js': --rust_react_js--contract--src--lib.rs 1`] = `
[
  "--rust_react_js--contract--src--lib.rs",
  "// Find all our documentation at https://docs.near.org
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{log, near_bindgen};

// Define the default message
const DEFAULT_MESSAGE: &str = "Hello";

// Define the contract structure
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
    message: String,
}

// Define the default, which automatically initializes the contract
impl Default for Contract {
    fn default() -> Self {
        Self { message: DEFAULT_MESSAGE.to_string() }
    }
}

// Implement the contract structure
#[near_bindgen]
impl Contract {
    // Public method - returns the greeting saved, defaulting to DEFAULT_MESSAGE
    pub fn get_greeting(&self) -> String {
        return self.message.clone();
    }

    // Public method - accepts a greeting, such as "howdy", and records it
    pub fn set_greeting(&mut self, message: String) {
        log!("Saving greeting {}", message);
        self.message = message;
    }
}

/*
 * The rest of this file holds the inline tests for the code above
 * Learn more about Rust tests: https://doc.rust-lang.org/book/ch11-01-writing-tests.html
 */
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn get_default_greeting() {
        let contract = Contract::default();
        // this test did not call set_greeting so should return the default "Hello" greeting
        assert_eq!(
            contract.get_greeting(),
            "Hello".to_string()
        );
    }

    #[test]
    fn set_then_get_greeting() {
        let mut contract = Contract::default();
        contract.set_greeting("howdy".to_string());
        assert_eq!(
            contract.get_greeting(),
            "howdy".to_string()
        );
    }
}
",
]
`;

exports[`create 'rust' 'react' 'js': --rust_react_js--frontend--App.js 1`] = `
[
  "--rust_react_js--frontend--App.js",
  "import 'regenerator-runtime/runtime';
import React from 'react';

import './assets/global.css';

import { EducationalText, SignInPrompt, SignOutButton } from './ui-components';


export default function App({ isSignedIn, contractId, wallet }) {
  const [valueFromBlockchain, setValueFromBlockchain] = React.useState();

  const [uiPleaseWait, setUiPleaseWait] = React.useState(true);

  // Get blockchian state once on component load
  React.useEffect(() => {
    getGreeting()
      .then(setValueFromBlockchain)
      .catch(alert)
      .finally(() => {
        setUiPleaseWait(false);
      });
    }
  , []);

  /// If user not signed-in with wallet - show prompt
  if (!isSignedIn) {
    // Sign-in flow will reload the page later
    return <SignInPrompt greeting={valueFromBlockchain} onClick={() => wallet.signIn()}/>;
  }

  function changeGreeting(e) {
    e.preventDefault();
    setUiPleaseWait(true);
    const { greetingInput } = e.target.elements;
    
    // use the wallet to send the greeting to the contract
    wallet.callMethod({ method: 'set_greeting', args: { message: greetingInput.value }, contractId })
      .then(async () => {return getGreeting();})
      .then(setValueFromBlockchain)
      .finally(() => {
        setUiPleaseWait(false);
      });
  }

  function getGreeting(){
    // use the wallet to query the contract's greeting
    return wallet.viewMethod({ method: 'get_greeting', contractId })
  }

  return (
    <>
      <SignOutButton accountId={wallet.accountId} onClick={() => wallet.signOut()}/>
      <main className={uiPleaseWait ? 'please-wait' : ''}>
        <h1>
          The contract says: <span className="greeting">{valueFromBlockchain}</span>
        </h1>
        <form onSubmit={changeGreeting} className="change">
          <label>Change greeting:</label>
          <div>
            <input
              autoComplete="off"
              defaultValue={valueFromBlockchain}
              id="greetingInput"
            />
            <button>
              <span>Save</span>
              <div className="loader"></div>
            </button>
          </div>
        </form>
        <EducationalText/>
      </main>
    </>
  );
}",
]
`;

exports[`create 'rust' 'react' 'js': --rust_react_js--frontend--assets--favicon.ico 1`] = `
[
  "--rust_react_js--frontend--assets--favicon.ico",
  "�PNG

   
IHDR  @  @   ��Na   	pHYs  %  %IR$�    IDATx���p��}�qɖdK����6 c������6	?B�
m�����N���܄?n&����M��t�!�^2-�9���ޅ��p�~�#l�1�e�mY��Y�1�m�c��y����4F�����v��/_|�
 �� " $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ �[e�j�عq����;���pG[뎡��y�O��иh���Ο�����;�g��G��ŗ�ٱ��pGOW�)�����q55���]�h�'?2y֌�/!���#.��qp����/��]7�b�Y��MW�Xt劺I�g�B8�]��nx��Z��t��kΠ����K/\\q�ͽ����J�Ҽ����7_ze�w��U+>���ia�g�^�a����������������/�؟��^	,-�랹���{���H�-[|����E>P��
?������+��7~ܒիd,{����<q�E��p�V���[������ֺ��\`L��_��߿y�Mk
>C&,O]�O��Ћ?\\[ƣ�k���s7,��_����?������\\��S_���#K��������W�^��V�Xs׭�n�~��o���YSW���[?t͇>Cl�?���"�IK���w�����[o<�Ҝ%M
ӧ��9���<�寗���۷��:��sٲ�O��e��y��o���ݓ�Au�?��/�=�5�b�4���׾]�k��-����oZ���3D�8�1X�4��p��������!�\\3_~��G������e"�z
Ұʔ�5S�r"\`9H�^�vpw*��1�vnܒ�5��G�|���w���G��kk��ĽD9���?�ڷ��;
>Cn�Z�����N�~��c�>�l��	F�b�j�h�羮Ñz�ֺ��� �����[��^3����s_:c]FF�b{���y�װ��rC�[��@���7��]�����%z�!��vn�R�������y]���i��ex���ݶ}��-.Ǹ,��7b�~�>���4�s�X��a�' 4�������U.F��y�_�7��tú�u�{���������(1'-������P?J�I�Bji^W���kF�yhk��Ɉ����FXPRK�S9�Qbtm����=��~�*���sp��@��Qb\\]�?��c=�}�|���F$\`�!��2J�h�)_ܡ��U�,��P+�a1J'��N���2&\`�t�w���┌ci���_n��X�Zw��#\`�d��F�Q�4������U9��\`�V��DF���>�R	?\\��\`v��"�H4JLY�w��
��ʉ�z�<,F�i|�W������ʆ��񂣐Qbj"����U�W�t%&e�)_~˓#iF��x��ԋ��3JL��>��h�%�WK���M���˥u�����E�0�K��u�� I���Qb�ܽ/ק|�#�Ēx���}K�H���Qbix��0�1Jkټ�y0B2J;�����|���Q�X����g�QUuu~�F~������M�>���PUU=n\\���>#0��"����G��ށv���0B0b3J,��������謮��0�0�3J��;c���ή�q��h90J������;vU
dk�����	�đy�;�߽嵣Ū�0b02a�8-�Om[�B�����0�0�a�8,�ֽ��?Hӱ~i�Y1J��;�Z���UJÈI�ȍQ�ڿs��o|w�MF\\F��Ϡ�����|����X�4���<%�RwG�c��ǎ��O������'��Sz��ص���Pi�	�2J|����]/o;�+
#<#gF�'�����/�<��ws�a�&\`d�(���j�/ox���[�adB��_����w��?�
#FE��Q���m��\`OWw�I��0� \`T��%�tv��G{�{N�G�ȉ�Q)*m�������j{��i90*HE�7?��}���ڼ7BF6��R!��W��ӻ^�z�.F�����(q��[�oh썆�1�e<Jlkݾy����l���>� \`�J��A�����o~��C�t���?�/|�A������%v:������9ћ�v�m�46-,�0��1*�MW�yk�s��(�������ޞ�cMJ�a���g��YUp0<�h-]�j�M����lF��~���kO�
[�z��O�)86���햦�+���F�[�z�㝃�*�v��-[�殨7�I��Qk�iAГz��s㖶��&'��\\�����(8!�8�&��w%�X�k;vmz����۰	�n�򿭛d:O�E3e���R:���ן�8���6aR�M_�S�(.���K�ȁC��7�"��]���o<7�=�$K�(2�����y����z{O�'�]w��{���U�0��(qL�v�l[�Bo_ՉT$ܰ��|�G.O�|��1&����o�<t�ؽsi7�˖]�'���$:cL%��7_z�c���<j��:{�շݒ�9$�X1J,����:��ޓ�l�&5N��[]����!90ƐQbxk�W__?�lX]C�uw��z1���e�X]��_y�X��o�u���Z87��F��1g�8J]�;v��e0-�7l���4k��=cT��G���w�������x�οne�?VG�(�đ���}kskOW��NT'ް�+.^񙏗�,Q��1J�}���s�s�I�z�næ/��]�(1�t�������84���6mެk��o�N�P��FI%Q���Gߣ�X{RnXm��K��E�	�f���:�9�ή�'�G�rî��ߜ6w�X�($\`��Q��tvڳ�=�H�a����sg��h\`	e\`�x:=]��w����R�d�_włKOs(0���0J,���׾�����w�.�6l��%���>)���Q6F�'���;�{_oO�\`*oٍؔ]�т���0��(�����r��}D�
�2k��}}�@�	ef�XUUu�\`{����7q�nX턺7���PWpPjF�U�(�������og�h�j&�]����8er�A@�Wɣ�������'�'�-���g�UpPF*s�����u�ȱ�$߰�lΒEe#\`���F�����G�T��J�
�s~����/8('#!4J�����x�׉tO�a���\\|�� e&\`��BF��=����G��z�&͘�d�UG �'\`$'�Qb_o_UU�IMJ�a5�.��55u��'\`$'�Qb��iDU�
���[���ת�0R��(�DB�oXӕ+�O-8 H�����G�v�O�?��[����y��v�f�3o�9��iH�����G��6lڼYg_���ۅ���y��^��M^�₂oR$\`�.�QbJ
���شr��ښ��R$\`��+%�Ѱ�u�/�P�D��!�WJL�a�/�8eR�w�0�����ڰ���)_�#\`D��+%��a��ϙ:gf�w�0����Kް)sg.ZX�}@ F0��}s	V�P�x�',��O�o�\\���M�8���ƍ_������1n�����s��	Q����cٰY:��~B��"0���Ǧag-��^d@��-��o.z�&ϜQ?}J���0b��XԆ5L�2y�Y�I�/�Qb�V;qٍ�4D%\`� �Q�V3�nڼY�(&\`d"�Q�(6n��)�f|%d��|�?JQêǏ�<k��|�#+���߰��S��Y0�R���4l�I��E���T�(qh
��0A�Ș����%~P�����M
yK�H��SE�O߰����&|5dE��VE�Oհ�7��8�����K!+F�*b�Xа�u��E%0rV)�ē6���Z��F�*e�8ذ���|�$\`�RF�Pa��P)�D�$F���Q"T��T�(*��QA*h�@��,4J��	�(� \`T"�DȀ�Q��!:�r%BhF�2J����f�q	��(�00J����!"�c�!�c�!�w%B �a�Q���������(B0*CowO__�Pf��0*BoO�@�����RÌ!qF�z:�n~���o�
3J��	���������7܆%B����vww�wFkd
3J�d	����=r���x�F�0�DH�������������;��mÌ!AF����������[�?�"4�(R#\`d���}=�]U�����0�DH����C{��WU�@���0�DH�����}�9p��s���0�DH����#����n�ƦaF��#]�;���}�Ic�0�DH�����#��^���&�mÌ�����z����zow���aF�PvFl}����l���=�6�(�K��m��׺ڏ���
3J�20۳��#��VYf��"\`D��������?P��6�(�B�����{��q�7eo�Q"���O�ûZ���O�m�Q"���̑���?��x�j�Q"���Iow���7�tu�*��%B)	a�v�l[�B����J�aF�P2Fo<���;�N�Q�
3J��0bx㹗���X\`�o�Q"���@�k;�^�1���I�aF�PF��Zw������/PÌa�	I;�������!��0�DSF������g��tu�G��%��0�������tv�V�
;E��2J�1"\`����{�Ï���7i7�������tg�(Ƃ���mO=���c�H�a?H�ǟ�4%�X0�����j�Vur~nXUuuM]��C�D(:#-�^޺cC�@4��"oXUU��	U����dF�P\\FB�l}��G�8���6x���5�(�H�H��=�6���w˔|�������)%B�I8r��3�?��q�x�Ro��)�����)%BQ������?���H�{��p�j'N��8a���(�B�(�u�������T��V;qB����<iF�0zF�mx��G���2%ڰq55�fL+�3J�Q0�i���x~�ɡJ�a���M�;�z\\�~j�a4��y㹗Z��z�S��mXUUմ���X�AF�0bFy�ݶ������䖤ݰ��g�L��se�##\`��;;w?�?�ϱ�Ghشy��n4h�##\`�ZwG�c���9я�6�q��g�gf�# \`�TwG����ݮ���mI�
��>e���%8EF�0\\FI����i���
��f�j&֝�pn�ΏQ"��Q:���������OI6��~�������Q"��Q"/���mO�p�>%ְ�q�f�wN��5�(�H�(��O>��?=�w�>�԰��?�V)�\`�C$\`����x�{F���Y�h¤�2^1�a(�����7��o����W�
klZ8u�̲_+��	c��p����t����߰isg�\\�0���Q"���1V�w<���ypϾ��߰	��_|~R��D8c�<��h{m��)J�a&7,���F�p:ƘX��ﶮ���ޤ۰q5��]�||mM�W�D8��Z�׵�]w�ޤذq������OL��\`��$\`YK�߸������\`���iS�%B!���Z����*B�^rA�G���}��ik���/}���Ix�ݰ�s�Y�(��(N&\`GW{G�=���^�Rmؔ�3λ��p��Q"� \`AW{���7m�;N�O�װ��S��^U��\`�'E�����^�Rj��ښ�n�hM]m�w�Q"0F�{ؼv�ϧѰ�5�o\\�^���xU�h�4�{�k���$а�����8��;��(�Qx�װ��aK?~UcS*��;zF�T8���԰��7��evqG%|�A�(��7l梳/�ĵ�]��G��a0ʤ�
�<s�E�_��z��!\`�OI6qʤ����fB]�t�Q"���QVcܰ����>�ɼ�5(�(FF�(��l؇���sfV�Ez�# \`$\`lv��o<7�BodB�a��4�a�V]r�e�*��
=J��0�Q���}����ʼd��FJ�Ѱ�sg.�iM%_�F�T#1�k�Թ�>���[[?��/V�D*�����6�fB���ߤ^��ɞ���5l�]�N_0�z�Q"y0R5̆���_���%�7#aCn��?�h�%.�BF�dL�H�v�U�.�tE���(�\\	�;cæ/�s�m����(�,	��ag-��ow	�Q"�0�(hX�ĺ���Y(�Q"�0�8�a��n��6y�Y.��3J$3F(�v��F���|Q%�#������7�|�J��%�
#�%�W͏�Q"y0"��l��z(�D2 \`��ش����py�Q"�	1�5��?�E�$��1J$:#��z}��UtF��&\`p�ή�.��\`�H\\F�V�ykӕ�c�(����-Y�j�U.��f�HDF��V�0�/�D�0�ش@�J�(�p�M�5�h���E�HN]C���]���(�@��|��ۍ���(�(���������B)/�DB0����F�0J$}F*��^u�m��8a�H�,�\\�(nlZp�z%��F�nq�#\`�d�qc���4U�(���p,���6p�k�_s׭ꕬ�%��Õ=ffv���|�F󉫐Qb~?\\��\`2��������P	�D��G����T����?w��|ُ��;�g��~�/Y����X�aҕ�(1��J#\`�4]yI�C�J�Ae<J��Ǫ	X<SfϘ�lq��p4_�ab�r�8o��)�g|��	XHK�\\�;x��/������%����p��5��̊�c]C�g���f �Q�Y3�����.����[����(1��,��kV���������;7'y���Z�%\`�]��7G�旬^���k
>Ll��Bh����\\��y���*�(q�M���Fhۧ�x{�w$66-���;
>L>���x*}t��Y3V�ukUuu�G10;�>) �(�{ �A����5����&x��y�#*A�Q�Al,���o]�kW�v G�*�;�R�C4l���Z�A�2�?������[�����8Yc����^9��?��J?�hZ���m��m��{<u
����n[���>C��O=�_�ų��=	�zeF��Ҵry�û_y�\\5���ir%l�[�[;�L�4�5�_w���+3��s.[v��9�?�����ć6o������0evc�g�,
ӧ.����;�ڿ���s9n?��e�!��|�a~����}��w'^��<���y�_�������)��7���s7Z�fI�r���������1=ƣ/��^c�S:�{��>���
����jlZp�m��C;c��G����k׍�=�o�u��~A��vn����z�͗^)ͩ�2k�埻�#^��J��7�����ug�Թ3/���o���C[��
��v��ucw��-[�t�U�U!���ڴuÃ������ݯ�0}����_������4IDW{Ƕ�Z�o(���zUӕ��+��X�:�g�K?�Ů��ڶ����9]���k�j�-����noQt;7nٹqK۶�퇇uccӂ�����?�i���ηѨL@H^J
������������������������������������������������������������������������@D>�  �IDAT���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������x����?�"7�>\`�    IEND�B\`�",
]
`;

exports[`create 'rust' 'react' 'js': --rust_react_js--frontend--assets--global.css 1`] = `
[
  "--rust_react_js--frontend--assets--global.css",
  "* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #FF585D;
  --secondary: #0072CE;

  background-color: var(--bg);
  color: var(--fg);
  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 1em;
}

main {
  margin: 0 auto;
  max-width: 26em;
}

main.please-wait {
}

h1 {
  background-image: url(./logo-black.svg);
  background-position: center 1em;
  background-repeat: no-repeat;
  background-size: auto 1.5em;
  margin-top: 0;
  padding: 3.5em 0 0;
  text-align: center;
  font-size: 1.5em;
}
.greeting {
  color: var(--secondary);
  text-decoration: underline;
}
h2 {
  text-align: center;
}

.please-wait .change {
  pointer-events: none;
}

ul.information  {
  margin: 2em 0 2em 0;
  padding: 0;
  text-align: left;
  font-size: 0.8em;

}
.information li:first-child {
  border-top: 1px solid var(--light-gray);
}
.information li {
  padding: 0.5em 0;
  border-bottom: 1px solid var(--light-gray);
  list-style: none;
}

.change {
  display: flex;
  flex-direction: column;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
  font-size: 1em;
  border: 2px solid var(--light-gray);
  padding: 0.5em;
}
.change > div {
  display: flex;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
}
.change input {
  flex: 1;
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}
.change label {
  display: block;
  text-align: left;
  margin-right: 10px;
  padding-bottom: 0.5em;
}
.change button {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--secondary);
}

button, input {
  font: inherit;
  outline: none;
}
main.please-wait .change button {
  position: relative;
  pointer-events: none;
  background-color: white;
}
main.please-wait .change button span {
  visibility: hidden;
}
button {
  background-color: var(--secondary);
  border-radius: 5px;
  border: none;
  color: #efefef;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}
button:hover, button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}
input {
  background-color: var(--light-gray);
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 0.5em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

@media (prefers-color-scheme: dark) {
  html {
    --bg: #1e1e1e;
    --fg: #efefef;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
  }
  h1 {
    background-image: url(./logo-white.svg);
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}

main.please-wait .loader,
main.please-wait .loader:after{
  display: inline-block;
}
.loader,
.loader:after {
  display: none;
  border-radius: 50%;
  width: 20px;
  height: 20px;
}
.loader {
  font-size: 10px;
  position: absolute;
  top: calc(50% - 10px);
  left: calc(50% - 10px);
  text-indent: -9999em;
  border-top: 3px solid var(--secondary);
  border-right: 3px solid var(--secondary);
  border-bottom: 3px solid var(--secondary);
  border-left: 3px solid #ffffff;
  -webkit-transform: translateZ(0);
  -ms-transform: translateZ(0);
  transform: translateZ(0);
  -webkit-animation: load8 1.1s infinite linear;
  animation: load8 1.1s infinite linear;
}
@-webkit-keyframes load8 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
@keyframes load8 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
",
]
`;

exports[`create 'rust' 'react' 'js': --rust_react_js--frontend--assets--logo-black.svg 1`] = `
[
  "--rust_react_js--frontend--assets--logo-black.svg",
  "<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>",
]
`;

exports[`create 'rust' 'react' 'js': --rust_react_js--frontend--assets--logo-white.svg 1`] = `
[
  "--rust_react_js--frontend--assets--logo-white.svg",
  "<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>",
]
`;

exports[`create 'rust' 'react' 'js': --rust_react_js--frontend--index.html 1`] = `
[
  "--rust_react_js--frontend--index.html",
  "<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="assets/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="assets/favicon.ico" />
    <title>Welcome to NEAR with React</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <script src="./index.js" type="module"></script>
  </body>
</html>
",
]
`;

exports[`create 'rust' 'react' 'js': --rust_react_js--frontend--index.js 1`] = `
[
  "--rust_react_js--frontend--index.js",
  "// React
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

// NEAR
import { Wallet } from './near-wallet';

const CONTRACT_ADDRESS = process.env.CONTRACT_NAME

// When creating the wallet you can optionally ask to create an access key
// Having the key enables to call non-payable methods without interrupting the user to sign
const wallet = new Wallet({ createAccessKeyFor: CONTRACT_ADDRESS })

// Setup on page load
window.onload = async () => {
  const isSignedIn = await wallet.startUp()
 
  ReactDOM.render(
    <App isSignedIn={isSignedIn} contractId={CONTRACT_ADDRESS} wallet={wallet} />,
    document.getElementById('root')
  );
}",
]
`;

exports[`create 'rust' 'react' 'js': --rust_react_js--frontend--near-wallet.js 1`] = `
[
  "--rust_react_js--frontend--near-wallet.js",
  "/* A helper file that simplifies using the wallet selector */

// near api js
import { providers } from 'near-api-js';

// wallet selector
import '@near-wallet-selector/modal-ui/styles.css';
import { setupModal } from '@near-wallet-selector/modal-ui';
import { setupWalletSelector } from '@near-wallet-selector/core';
import { setupMyNearWallet } from '@near-wallet-selector/my-near-wallet';

const THIRTY_TGAS = '30000000000000';
const NO_DEPOSIT = '0';

// Wallet that simplifies using the wallet selector
export class Wallet {
  walletSelector;
  wallet;
  network;
  createAccessKeyFor;

  constructor({ createAccessKeyFor = undefined, network = 'testnet' }) {
    // Login to a wallet passing a contractId will create a local
    // key, so the user skips signing non-payable transactions.
    // Omitting the accountId will result in the user being
    // asked to sign all transactions.
    this.createAccessKeyFor = createAccessKeyFor
    this.network = 'testnet'
  }

  // To be called when the website loads
  async startUp() {
    this.walletSelector = await setupWalletSelector({
      network: this.network,
      modules: [setupMyNearWallet()],
    });

    const isSignedIn = this.walletSelector.isSignedIn();

    if (isSignedIn) {
      this.wallet = await this.walletSelector.wallet();
      this.accountId = this.walletSelector.store.getState().accounts[0].accountId;
    }

    return isSignedIn;
  }

  // Sign-in method
  signIn() {
    const description = 'Please select a wallet to sign in.';
    const modal = setupModal(this.walletSelector, { contractId: this.createAccessKeyFor, description });
    modal.show();
  }

  // Sign-out method
  signOut() {
    this.wallet.signOut();
    this.wallet = this.accountId = this.createAccessKeyFor = null;
    window.location.replace(window.location.origin + window.location.pathname);
  }

  // Make a read-only call to retrieve information from the network
  async viewMethod({ contractId, method, args = {} }) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    let res = await provider.query({
      request_type: 'call_function',
      account_id: contractId,
      method_name: method,
      args_base64: Buffer.from(JSON.stringify(args)).toString('base64'),
      finality: 'optimistic',
    });
    return JSON.parse(Buffer.from(res.result).toString());
  }

  // Call a method that changes the contract's state
  async callMethod({ contractId, method, args = {}, gas = THIRTY_TGAS, deposit = NO_DEPOSIT }) {
    // Sign a transaction with the "FunctionCall" action
    return await this.wallet.signAndSendTransaction({
      signerId: this.accountId,
      receiverId: contractId,
      actions: [
        {
          type: 'FunctionCall',
          params: {
            methodName: method,
            args,
            gas,
            deposit,
          },
        },
      ],
    });
  }

  // Get transaction result from the network
  async getTransactionResult(txhash) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    // Retrieve transaction result from the network
    const transaction = await provider.txStatus(txhash, 'unnused');
    return providers.getTransactionLastResult(transaction);
  }
}",
]
`;

exports[`create 'rust' 'react' 'js': --rust_react_js--frontend--package.json 1`] = `
[
  "--rust_react_js--frontend--package.json",
  "{
  "name": "my-near-app",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "start": "./start.sh",
    "build": "parcel build index.html --public-url ./"
  },
  "devDependencies": {
    "@babel/core": "^7.22.5",
    "@babel/preset-env": "^7.22.5",
    "@babel/preset-react": "^7.22.5",
    "@types/node": "^20.3.2",
    "buffer": "^5.5.0||^6.0.0",
    "env-cmd": "^10.1.0",
    "events": "^3.1.0",
    "https-browserify": "^1.0.0",
    "nodemon": "^2.0.22",
    "parcel": "^2.9.3",
    "process": "^0.11.10",
    "punycode": "^1.4.1",
    "react-test-renderer": "^18.2.0",
    "stream-http": "^3.1.0",
    "ts-node": "^10.9.1",
    "typescript": "^5.1.3",
    "url": "^0.11.0"
  },
  "dependencies": {
    "@near-wallet-selector/core": "^8.1.4",
    "@near-wallet-selector/modal-ui": "^8.1.4",
    "@near-wallet-selector/my-near-wallet": "^8.1.4",
    "near-api-js": "^2.1.4",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "regenerator-runtime": "^0.13.11"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
",
]
`;

exports[`create 'rust' 'react' 'js': --rust_react_js--frontend--start.sh 1`] = `
[
  "--rust_react_js--frontend--start.sh",
  "#!/bin/sh

CONTRACT_DIRECTORY=../contract
DEV_ACCOUNT_FILE="\${CONTRACT_DIRECTORY}/neardev/dev-account.env"

start () {
  echo The app is starting!
  env-cmd -f $DEV_ACCOUNT_FILE parcel index.html --open
}

alert () {
  GREEN='\\033[1;32m'
  NC='\\033[0m' # No Color

  echo "======================================================"
  echo "It looks like you didn't deploy your contract"
  echo ">> Run \${GREEN}'npm run deploy'\${NC} from the your project's root directory"
  echo "This frontend template works with contracts deployed to NEAR TestNet"
  echo "======================================================"
}

if [ -f "$DEV_ACCOUNT_FILE" ]; then
  start
else
  alert
fi
",
]
`;

exports[`create 'rust' 'react' 'js': --rust_react_js--frontend--ui-components.js 1`] = `
[
  "--rust_react_js--frontend--ui-components.js",
  "import React from 'react';

export function SignInPrompt({greeting, onClick}) {
  return (
    <main>
      <h1>
        The contract says: <span className="greeting">{greeting}</span>
      </h1>
      <h3>
        Welcome to NEAR!
      </h3>
      <p>
        Your contract is storing a greeting message in the NEAR blockchain. To
        change it you need to sign in using the NEAR Wallet. It is very simple,
        just use the button below.
      </p>
      <p>
        Do not worry, this app runs in the test network ("testnet"). It works
        just like the main network ("mainnet"), but using NEAR Tokens that are
        only for testing!
      </p>
      <br/>
      <p style={{ textAlign: 'center' }}>
        <button onClick={onClick}>Sign in with NEAR Wallet</button>
      </p>
    </main>
  );
}

export function SignOutButton({accountId, onClick}) {
  return (
    <button style={{ float: 'right' }} onClick={onClick}>
      Sign out {accountId}
    </button>
  );
}

export function EducationalText() {
  return (
    <>
      <p>
        Look at that! A Hello World app! This greeting is stored on the NEAR blockchain. Check it out:
      </p>
      <ol>
        <li>
          Look in <code>frontend/App.js</code> - you'll see <code>getGreeting</code> and <code>setGreeting</code> being called on <code>contract</code>. What's this?
        </li>
        <li>
          Ultimately, this <code>contract</code> code is defined in <code>./contract</code> – this is the source code for your <a target="_blank" rel="noreferrer" href="https://docs.near.org/docs/develop/contracts/overview">smart contract</a>.</li>
        <li>
          When you run <code>npm run deploy</code>, the code in <code>./contract</code> gets deployed to the NEAR testnet. You can see how this happens by looking in <code>package.json</code>.</li>
      </ol>
      <hr />
      <p>
        To keep learning, check out <a target="_blank" rel="noreferrer" href="https://docs.near.org">the NEAR docs</a> or look through some <a target="_blank" rel="noreferrer" href="https://examples.near.org">example apps</a>.
      </p>
    </>
  );
}
",
]
`;

exports[`create 'rust' 'react' 'js': --rust_react_js--integration-tests--ava.config.cjs 1`] = `
[
  "--rust_react_js--integration-tests--ava.config.cjs",
  "require("util").inspect.defaultOptions.depth = 5; // Increase AVA's printing depth

module.exports = {
  timeout: "300000",
  files: ["src/*.ava.ts"],
  failWithoutAssertions: false,
  extensions: ["ts"],
  require: ["ts-node/register"],
};
",
]
`;

exports[`create 'rust' 'react' 'js': --rust_react_js--integration-tests--package.json 1`] = `
[
  "--rust_react_js--integration-tests--package.json",
  "{
  "name": "ava-testing",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "test": "ava"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/node": "^18.6.2",
    "ava": "^4.2.0",
    "near-workspaces": "^3.2.1",
    "ts-node": "^10.8.0",
    "typescript": "^4.7.2"
  },
  "dependencies": {}
}
",
]
`;

exports[`create 'rust' 'react' 'js': --rust_react_js--integration-tests--src--main.ava.ts 1`] = `
[
  "--rust_react_js--integration-tests--src--main.ava.ts",
  "import { Worker, NearAccount } from 'near-workspaces';
import anyTest, { TestFn } from 'ava';

const test = anyTest as TestFn<{
  worker: Worker;
  accounts: Record<string, NearAccount>;
}>;

test.beforeEach(async (t) => {
  // Init the worker and start a Sandbox server
  const worker = await Worker.init();

  // Deploy contract
  const root = worker.rootAccount;
  const contract = await root.createSubAccount('test-account');
  // Get wasm file path from package.json test script in folder above
  await contract.deploy(
    process.argv[2],
  );

  // Save state for test runs, it is unique for each test
  t.context.worker = worker;
  t.context.accounts = { root, contract };
});

test.afterEach.always(async (t) => {
  // Stop Sandbox server
  await t.context.worker.tearDown().catch((error) => {
    console.log('Failed to stop the Sandbox:', error);
  });
});

test('returns the default greeting', async (t) => {
  const { contract } = t.context.accounts;
  const message: string = await contract.view('get_greeting', {});
  t.is(message, 'Hello');
});

test('changes the message', async (t) => {
  const { root, contract } = t.context.accounts;
  await root.call(contract, 'set_greeting', { message: 'Howdy' });
  const message: string = await contract.view('get_greeting', {});
  t.is(message, 'Howdy');
});",
]
`;

exports[`create 'rust' 'react' 'js': --rust_react_js--package.json 1`] = `
[
  "--rust_react_js--package.json",
  "{
  "name": "rust_react_js",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "start": "cd frontend && npm run start",
    "deploy": "cd contract && ./deploy.sh",
    "build": "npm run build:contract && npm run build:web",
    "build:web": "cd frontend && npm run build",
    "build:contract": "cd contract && ./build.sh",
    "test": "npm run test:unit && npm run test:integration",
    "test:unit": "cd contract && cargo test",
    "test:integration": "npm run build:contract && cd integration-tests && npm test -- -- \\"./contract/target/wasm32-unknown-unknown/release/hello_near.wasm\\"",
    "postinstall": "cd frontend && npm install && cd .. && cd integration-tests && npm install && cd .. && echo rs contract"
  },
  "devDependencies": {
    "near-cli": "^3.3.0"
  },
  "dependencies": {}
}",
]
`;

exports[`create 'rust' 'react' 'js': --rust_react_js--rust-toolchain.toml 1`] = `
[
  "--rust_react_js--rust-toolchain.toml",
  "[toolchain]
channel = "1.69"
",
]
`;

exports[`create 'rust' 'react' 'rust': --rust_react_rust--.gitignore 1`] = `
[
  "--rust_react_rust--.gitignore",
  "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
# Developer note: near.gitignore will be renamed to .gitignore upon project creation
# dependencies
node_modules
/.pnp
.pnp.js

# build
/out
/dist

# keys
/templates/react/neardev

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local
/.cache

npm-debug.log*
yarn-debug.log*
yarn-error.log*
",
]
`;

exports[`create 'rust' 'react' 'rust': --rust_react_rust--.gitpod.yml 1`] = `
[
  "--rust_react_rust--.gitpod.yml",
  "tasks:
  - init: npm dev
    command: npm run dev
ports:
  - port: 1234
    onOpen: open-browser
",
]
`;

exports[`create 'rust' 'react' 'rust': --rust_react_rust--README.md 1`] = `
[
  "--rust_react_rust--README.md",
  "near-blank-project
==================

This app was initialized with [create-near-app]


Quick Start
===========

If you haven't installed dependencies during setup:

    npm install


Build and deploy your contract to TestNet with a temporary dev account:

    npm run deploy

Test your contract:

    npm test

If you have a frontend, run \`npm start\`. This will run a dev server.


Exploring The Code
==================

1. The smart-contract code lives in the \`/contract\` folder. See the README there for
   more info. In blockchain apps the smart contract is the "backend" of your app.
2. The frontend code lives in the \`/frontend\` folder. \`/frontend/index.html\` is a great
   place to start exploring. Note that it loads in \`/frontend/index.js\`,
   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.
3. Test your contract: \`npm test\`, this will run the tests in \`integration-tests\` directory.


Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. 
When you run \`npm run deploy\`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.
When you're ready to make it permanent, here's how:


Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local \`node_modules\` folder when you ran \`npm install\`, but for best ergonomics you may want to install it globally:

    npm install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all \`near\` commands with \`npx\`

Ensure that it's installed with \`near --version\` (or \`npx near --version\`)


Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as \`your-name.testnet\`, you can deploy your contract to \`near-blank-project.your-name.testnet\`. Assuming you've already created an account on [NEAR Wallet], here's how to create \`near-blank-project.your-name.testnet\`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace \`YOUR-NAME\` below with your actual account name):

      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: deploy the contract
---------------------------

Use the CLI to deploy the contract to TestNet with your account ID.
Replace \`PATH_TO_WASM_FILE\` with the \`wasm\` that was generated in \`contract\` build directory.

    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile PATH_TO_WASM_FILE


Step 3: set contract name in your frontend code
-----------------------------------------------

Modify the line in \`src/config.js\` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-blank-project.YOUR-NAME.testnet'



Troubleshooting
===============

On Windows, if you're seeing an error containing \`EPERM\` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.


  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/concepts/basics/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages
",
]
`;

exports[`create 'rust' 'react' 'rust': --rust_react_rust--contract--.cargo--config 1`] = `
[
  "--rust_react_rust--contract--.cargo--config",
  "[build]
rustflags = ["-C", "link-args=-s"]
",
]
`;

exports[`create 'rust' 'react' 'rust': --rust_react_rust--contract--.gitignore 1`] = `
[
  "--rust_react_rust--contract--.gitignore",
  "target
",
]
`;

exports[`create 'rust' 'react' 'rust': --rust_react_rust--contract--Cargo.toml 1`] = `
[
  "--rust_react_rust--contract--Cargo.toml",
  "[package]
name = "hello_near"
version = "1.0.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = "4.0.0"
uint = { version = "0.9.3", default-features = false }

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

[workspace]
members = []
",
]
`;

exports[`create 'rust' 'react' 'rust': --rust_react_rust--contract--README.md 1`] = `
[
  "--rust_react_rust--contract--README.md",
  "# Hello NEAR Contract

The smart contract exposes two methods to enable storing and retrieving a greeting in the NEAR network.

\`\`\`rust
const DEFAULT_GREETING: &str = "Hello";

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
    greeting: String,
}

impl Default for Contract {
    fn default() -> Self {
        Self { greeting: DEFAULT_GREETING.to_string() }
    }
}

#[near_bindgen]
impl Contract {
    // Public: Returns the stored greeting, defaulting to 'Hello'
    pub fn get_greeting(&self) -> String {
        return self.greeting.clone();
    }

    // Public: Takes a greeting, such as 'howdy', and records it
    pub fn set_greeting(&mut self, greeting: String) {
        // Record a log permanently to the blockchain!
        log!("Saving greeting {}", greeting);
        self.greeting = greeting;
    }
}
\`\`\`

<br />

# Quickstart

1. Make sure you have installed [rust](https://rust.org/).
2. Install the [\`NEAR CLI\`](https://github.com/near/near-cli#setup)

<br />

## 1. Build and Deploy the Contract
You can automatically compile and deploy the contract in the NEAR testnet by running:

\`\`\`bash
./deploy.sh
\`\`\`

Once finished, check the \`neardev/dev-account\` file to find the address in which the contract was deployed:

\`\`\`bash
cat ./neardev/dev-account
# e.g. dev-1659899566943-21539992274727
\`\`\`

<br />

## 2. Retrieve the Greeting

\`get_greeting\` is a read-only method (aka \`view\` method).

\`View\` methods can be called for **free** by anyone, even people **without a NEAR account**!

\`\`\`bash
# Use near-cli to get the greeting
near view <dev-account> get_greeting
\`\`\`

<br />

## 3. Store a New Greeting
\`set_greeting\` changes the contract's state, for which it is a \`change\` method.

\`Change\` methods can only be invoked using a NEAR account, since the account needs to pay GAS for the transaction.

\`\`\`bash
# Use near-cli to set a new greeting
near call <dev-account> set_greeting '{"message":"howdy"}' --accountId <dev-account>
\`\`\`

**Tip:** If you would like to call \`set_greeting\` using your own account, first login into NEAR using:

\`\`\`bash
# Use near-cli to login your NEAR account
near login
\`\`\`

and then use the logged account to sign the transaction: \`--accountId <your-account>\`.",
]
`;

exports[`create 'rust' 'react' 'rust': --rust_react_rust--contract--build.sh 1`] = `
[
  "--rust_react_rust--contract--build.sh",
  "#!/bin/sh

echo ">> Building contract"

rustup target add wasm32-unknown-unknown
cargo build --all --target wasm32-unknown-unknown --release
",
]
`;

exports[`create 'rust' 'react' 'rust': --rust_react_rust--contract--deploy.sh 1`] = `
[
  "--rust_react_rust--contract--deploy.sh",
  "#!/bin/sh

./build.sh

if [ $? -ne 0 ]; then
  echo ">> Error building contract"
  exit 1
fi

echo ">> Deploying contract"

# https://docs.near.org/tools/near-cli#near-dev-deploy
near dev-deploy --wasmFile ./target/wasm32-unknown-unknown/release/hello_near.wasm
",
]
`;

exports[`create 'rust' 'react' 'rust': --rust_react_rust--contract--src--lib.rs 1`] = `
[
  "--rust_react_rust--contract--src--lib.rs",
  "// Find all our documentation at https://docs.near.org
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{log, near_bindgen};

// Define the default message
const DEFAULT_MESSAGE: &str = "Hello";

// Define the contract structure
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
    message: String,
}

// Define the default, which automatically initializes the contract
impl Default for Contract {
    fn default() -> Self {
        Self { message: DEFAULT_MESSAGE.to_string() }
    }
}

// Implement the contract structure
#[near_bindgen]
impl Contract {
    // Public method - returns the greeting saved, defaulting to DEFAULT_MESSAGE
    pub fn get_greeting(&self) -> String {
        return self.message.clone();
    }

    // Public method - accepts a greeting, such as "howdy", and records it
    pub fn set_greeting(&mut self, message: String) {
        log!("Saving greeting {}", message);
        self.message = message;
    }
}

/*
 * The rest of this file holds the inline tests for the code above
 * Learn more about Rust tests: https://doc.rust-lang.org/book/ch11-01-writing-tests.html
 */
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn get_default_greeting() {
        let contract = Contract::default();
        // this test did not call set_greeting so should return the default "Hello" greeting
        assert_eq!(
            contract.get_greeting(),
            "Hello".to_string()
        );
    }

    #[test]
    fn set_then_get_greeting() {
        let mut contract = Contract::default();
        contract.set_greeting("howdy".to_string());
        assert_eq!(
            contract.get_greeting(),
            "howdy".to_string()
        );
    }
}
",
]
`;

exports[`create 'rust' 'react' 'rust': --rust_react_rust--frontend--App.js 1`] = `
[
  "--rust_react_rust--frontend--App.js",
  "import 'regenerator-runtime/runtime';
import React from 'react';

import './assets/global.css';

import { EducationalText, SignInPrompt, SignOutButton } from './ui-components';


export default function App({ isSignedIn, contractId, wallet }) {
  const [valueFromBlockchain, setValueFromBlockchain] = React.useState();

  const [uiPleaseWait, setUiPleaseWait] = React.useState(true);

  // Get blockchian state once on component load
  React.useEffect(() => {
    getGreeting()
      .then(setValueFromBlockchain)
      .catch(alert)
      .finally(() => {
        setUiPleaseWait(false);
      });
    }
  , []);

  /// If user not signed-in with wallet - show prompt
  if (!isSignedIn) {
    // Sign-in flow will reload the page later
    return <SignInPrompt greeting={valueFromBlockchain} onClick={() => wallet.signIn()}/>;
  }

  function changeGreeting(e) {
    e.preventDefault();
    setUiPleaseWait(true);
    const { greetingInput } = e.target.elements;
    
    // use the wallet to send the greeting to the contract
    wallet.callMethod({ method: 'set_greeting', args: { message: greetingInput.value }, contractId })
      .then(async () => {return getGreeting();})
      .then(setValueFromBlockchain)
      .finally(() => {
        setUiPleaseWait(false);
      });
  }

  function getGreeting(){
    // use the wallet to query the contract's greeting
    return wallet.viewMethod({ method: 'get_greeting', contractId })
  }

  return (
    <>
      <SignOutButton accountId={wallet.accountId} onClick={() => wallet.signOut()}/>
      <main className={uiPleaseWait ? 'please-wait' : ''}>
        <h1>
          The contract says: <span className="greeting">{valueFromBlockchain}</span>
        </h1>
        <form onSubmit={changeGreeting} className="change">
          <label>Change greeting:</label>
          <div>
            <input
              autoComplete="off"
              defaultValue={valueFromBlockchain}
              id="greetingInput"
            />
            <button>
              <span>Save</span>
              <div className="loader"></div>
            </button>
          </div>
        </form>
        <EducationalText/>
      </main>
    </>
  );
}",
]
`;

exports[`create 'rust' 'react' 'rust': --rust_react_rust--frontend--assets--favicon.ico 1`] = `
[
  "--rust_react_rust--frontend--assets--favicon.ico",
  "�PNG

   
IHDR  @  @   ��Na   	pHYs  %  %IR$�    IDATx���p��}�qɖdK����6 c������6	?B�
m�����N���܄?n&����M��t�!�^2-�9���ޅ��p�~�#l�1�e�mY��Y�1�m�c��y����4F�����v��/_|�
 �� " $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ �[e�j�عq����;���pG[뎡��y�O��иh���Ο�����;�g��G��ŗ�ٱ��pGOW�)�����q55���]�h�'?2y֌�/!���#.��qp����/��]7�b�Y��MW�Xt劺I�g�B8�]��nx��Z��t��kΠ����K/\\q�ͽ����J�Ҽ����7_ze�w��U+>���ia�g�^�a����������������/�؟��^	,-�랹���{���H�-[|����E>P��
?������+��7~ܒիd,{����<q�E��p�V���[������ֺ��\`L��_��߿y�Mk
>C&,O]�O��Ћ?\\[ƣ�k���s7,��_����?������\\��S_���#K��������W�^��V�Xs׭�n�~��o���YSW���[?t͇>Cl�?���"�IK���w�����[o<�Ҝ%M
ӧ��9���<�寗���۷��:��sٲ�O��e��y��o���ݓ�Au�?��/�=�5�b�4���׾]�k��-����oZ���3D�8�1X�4��p��������!�\\3_~��G������e"�z
Ұʔ�5S�r"\`9H�^�vpw*��1�vnܒ�5��G�|���w���G��kk��ĽD9���?�ڷ��;
>Cn�Z�����N�~��c�>�l��	F�b�j�h�羮Ñz�ֺ��� �����[��^3����s_:c]FF�b{���y�װ��rC�[��@���7��]�����%z�!��vn�R�������y]���i��ex���ݶ}��-.Ǹ,��7b�~�>���4�s�X��a�' 4�������U.F��y�_�7��tú�u�{���������(1'-������P?J�I�Bji^W���kF�yhk��Ɉ����FXPRK�S9�Qbtm����=��~�*���sp��@��Qb\\]�?��c=�}�|���F$\`�!��2J�h�)_ܡ��U�,��P+�a1J'��N���2&\`�t�w���┌ci���_n��X�Zw��#\`�d��F�Q�4������U9��\`�V��DF���>�R	?\\��\`v��"�H4JLY�w��
��ʉ�z�<,F�i|�W������ʆ��񂣐Qbj"����U�W�t%&e�)_~˓#iF��x��ԋ��3JL��>��h�%�WK���M���˥u�����E�0�K��u�� I���Qb�ܽ/ק|�#�Ēx���}K�H���Qbix��0�1Jkټ�y0B2J;�����|���Q�X����g�QUuu~�F~������M�>���PUU=n\\���>#0��"����G��ށv���0B0b3J,��������謮��0�0�3J��;c���ή�q��h90J������;vU
dk�����	�đy�;�߽嵣Ū�0b02a�8-�Om[�B�����0�0�a�8,�ֽ��?Hӱ~i�Y1J��;�Z���UJÈI�ȍQ�ڿs��o|w�MF\\F��Ϡ�����|����X�4���<%�RwG�c��ǎ��O������'��Sz��ص���Pi�	�2J|����]/o;�+
#<#gF�'�����/�<��ws�a�&\`d�(���j�/ox���[�adB��_����w��?�
#FE��Q���m��\`OWw�I��0� \`T��%�tv��G{�{N�G�ȉ�Q)*m�������j{��i90*HE�7?��}���ڼ7BF6��R!��W��ӻ^�z�.F�����(q��[�oh썆�1�e<Jlkݾy����l���>� \`�J��A�����o~��C�t���?�/|�A������%v:������9ћ�v�m�46-,�0��1*�MW�yk�s��(�������ޞ�cMJ�a���g��YUp0<�h-]�j�M����lF��~���kO�
[�z��O�)86���햦�+���F�[�z�㝃�*�v��-[�殨7�I��Qk�iAГz��s㖶��&'��\\�����(8!�8�&��w%�X�k;vmz����۰	�n�򿭛d:O�E3e���R:���ן�8���6aR�M_�S�(.���K�ȁC��7�"��]���o<7�=�$K�(2�����y����z{O�'�]w��{���U�0��(qL�v�l[�Bo_ՉT$ܰ��|�G.O�|��1&����o�<t�ؽsi7�˖]�'���$:cL%��7_z�c���<j��:{�շݒ�9$�X1J,����:��ޓ�l�&5N��[]����!90ƐQbxk�W__?�lX]C�uw��z1���e�X]��_y�X��o�u���Z87��F��1g�8J]�;v��e0-�7l���4k��=cT��G���w�������x�οne�?VG�(�đ���}kskOW��NT'ް�+.^񙏗�,Q��1J�}���s�s�I�z�næ/��]�(1�t�������84���6mެk��o�N�P��FI%Q���Gߣ�X{RnXm��K��E�	�f���:�9�ή�'�G�rî��ߜ6w�X�($\`��Q��tvڳ�=�H�a����sg��h\`	e\`�x:=]��w����R�d�_włKOs(0���0J,���׾�����w�.�6l��%���>)���Q6F�'���;�{_oO�\`*oٍؔ]�т���0��(�����r��}D�
�2k��}}�@�	ef�XUUu�\`{����7q�nX턺7���PWpPjF�U�(�������og�h�j&�]����8er�A@�Wɣ�������'�'�-���g�UpPF*s�����u�ȱ�$߰�lΒEe#\`���F�����G�T��J�
�s~����/8('#!4J�����x�׉tO�a���\\|�� e&\`��BF��=����G��z�&͘�d�UG �'\`$'�Qb_o_UU�IMJ�a5�.��55u��'\`$'�Qb��iDU�
���[���ת�0R��(�DB�oXӕ+�O-8 H�����G�v�O�?��[����y��v�f�3o�9��iH�����G��6lڼYg_���ۅ���y��^��M^�₂oR$\`�.�QbJ
���شr��ښ��R$\`��+%�Ѱ�u�/�P�D��!�WJL�a�/�8eR�w�0�����ڰ���)_�#\`D��+%��a��ϙ:gf�w�0����Kް)sg.ZX�}@ F0��}s	V�P�x�',��O�o�\\���M�8���ƍ_������1n�����s��	Q����cٰY:��~B��"0���Ǧag-��^d@��-��o.z�&ϜQ?}J���0b��XԆ5L�2y�Y�I�/�Qb�V;qٍ�4D%\`� �Q�V3�nڼY�(&\`d"�Q�(6n��)�f|%d��|�?JQêǏ�<k��|�#+���߰��S��Y0�R���4l�I��E���T�(qh
��0A�Ș����%~P�����M
yK�H��SE�O߰����&|5dE��VE�Oհ�7��8�����K!+F�*b�Xа�u��E%0rV)�ē6���Z��F�*e�8ذ���|�$\`�RF�Pa��P)�D�$F���Q"T��T�(*��QA*h�@��,4J��	�(� \`T"�DȀ�Q��!:�r%BhF�2J����f�q	��(�00J����!"�c�!�c�!�w%B �a�Q���������(B0*CowO__�Pf��0*BoO�@�����RÌ!qF�z:�n~���o�
3J��	���������7܆%B����vww�wFkd
3J�d	����=r���x�F�0�DH�������������;��mÌ!AF����������[�?�"4�(R#\`d���}=�]U�����0�DH����C{��WU�@���0�DH�����}�9p��s���0�DH����#����n�ƦaF��#]�;���}�Ic�0�DH�����#��^���&�mÌ�����z����zow���aF�PvFl}����l���=�6�(�K��m��׺ڏ���
3J�20۳��#��VYf��"\`D��������?P��6�(�B�����{��q�7eo�Q"���O�ûZ���O�m�Q"���̑���?��x�j�Q"���Iow���7�tu�*��%B)	a�v�l[�B����J�aF�P2Fo<���;�N�Q�
3J��0bx㹗���X\`�o�Q"���@�k;�^�1���I�aF�PF��Zw������/PÌa�	I;�������!��0�DSF������g��tu�G��%��0�������tv�V�
;E��2J�1"\`����{�Ï���7i7�������tg�(Ƃ���mO=���c�H�a?H�ǟ�4%�X0�����j�Vur~nXUuuM]��C�D(:#-�^޺cC�@4��"oXUU��	U����dF�P\\FB�l}��G�8���6x���5�(�H�H��=�6���w˔|�������)%B�I8r��3�?��q�x�Ro��)�����)%BQ������?���H�{��p�j'N��8a���(�B�(�u�������T��V;qB����<iF�0zF�mx��G���2%ڰq55�fL+�3J�Q0�i���x~�ɡJ�a���M�;�z\\�~j�a4��y㹗Z��z�S��mXUUմ���X�AF�0bFy�ݶ������䖤ݰ��g�L��se�##\`��;;w?�?�ϱ�Ghشy��n4h�##\`�ZwG�c���9я�6�q��g�gf�# \`�TwG����ݮ���mI�
��>e���%8EF�0\\FI����i���
��f�j&֝�pn�ΏQ"��Q:���������OI6��~�������Q"��Q"/���mO�p�>%ְ�q�f�wN��5�(�H�(��O>��?=�w�>�԰��?�V)�\`�C$\`����x�{F���Y�h¤�2^1�a(�����7��o����W�
klZ8u�̲_+��	c��p����t����߰isg�\\�0���Q"���1V�w<���ypϾ��߰	��_|~R��D8c�<��h{m��)J�a&7,���F�p:ƘX��ﶮ���ޤ۰q5��]�||mM�W�D8��Z�׵�]w�ޤذq������OL��\`��$\`YK�߸������\`���iS�%B!���Z����*B�^rA�G���}��ik���/}���Ix�ݰ�s�Y�(��(N&\`GW{G�=���^�Rmؔ�3λ��p��Q"� \`AW{���7m�;N�O�װ��S��^U��\`�'E�����^�Rj��ښ�n�hM]m�w�Q"0F�{ؼv�ϧѰ�5�o\\�^���xU�h�4�{�k���$а�����8��;��(�Qx�װ��aK?~UcS*��;zF�T8���԰��7��evqG%|�A�(��7l梳/�ĵ�]��G��a0ʤ�
�<s�E�_��z��!\`�OI6qʤ����fB]�t�Q"���QVcܰ����>�ɼ�5(�(FF�(��l؇���sfV�Ez�# \`$\`lv��o<7�BodB�a��4�a�V]r�e�*��
=J��0�Q���}����ʼd��FJ�Ѱ�sg.�iM%_�F�T#1�k�Թ�>���[[?��/V�D*�����6�fB���ߤ^��ɞ���5l�]�N_0�z�Q"y0R5̆���_���%�7#aCn��?�h�%.�BF�dL�H�v�U�.�tE���(�\\	�;cæ/�s�m����(�,	��ag-��ow	�Q"�0�(hX�ĺ���Y(�Q"�0�8�a��n��6y�Y.��3J$3F(�v��F���|Q%�#������7�|�J��%�
#�%�W͏�Q"y0"��l��z(�D2 \`��ش����py�Q"�	1�5��?�E�$��1J$:#��z}��UtF��&\`p�ή�.��\`�H\\F�V�ykӕ�c�(����-Y�j�U.��f�HDF��V�0�/�D�0�ش@�J�(�p�M�5�h���E�HN]C���]���(�@��|��ۍ���(�(���������B)/�DB0����F�0J$}F*��^u�m��8a�H�,�\\�(nlZp�z%��F�nq�#\`�d�qc���4U�(���p,���6p�k�_s׭ꕬ�%��Õ=ffv���|�F󉫐Qb~?\\��\`2��������P	�D��G����T����?w��|ُ��;�g��~�/Y����X�aҕ�(1��J#\`�4]yI�C�J�Ae<J��Ǫ	X<SfϘ�lq��p4_�ab�r�8o��)�g|��	XHK�\\�;x��/������%����p��5��̊�c]C�g���f �Q�Y3�����.����[����(1��,��kV���������;7'y���Z�%\`�]��7G�旬^���k
>Ll��Bh����\\��y���*�(q�M���Fhۧ�x{�w$66-���;
>L>���x*}t��Y3V�ukUuu�G10;�>) �(�{ �A����5����&x��y�#*A�Q�Al,���o]�kW�v G�*�;�R�C4l���Z�A�2�?������[�����8Yc����^9��?��J?�hZ���m��m��{<u
����n[���>C��O=�_�ų��=	�zeF��Ҵry�û_y�\\5���ir%l�[�[;�L�4�5�_w���+3��s.[v��9�?�����ć6o������0evc�g�,
ӧ.����;�ڿ���s9n?��e�!��|�a~����}��w'^��<���y�_�������)��7���s7Z�fI�r���������1=ƣ/��^c�S:�{��>���
����jlZp�m��C;c��G����k׍�=�o�u��~A��vn����z�͗^)ͩ�2k�埻�#^��J��7�����ug�Թ3/���o���C[��
��v��ucw��-[�t�U�U!���ڴuÃ������ݯ�0}����_������4IDW{Ƕ�Z�o(���zUӕ��+��X�:�g�K?�Ů��ڶ����9]���k�j�-����noQt;7nٹqK۶�퇇uccӂ�����?�i���ηѨL@H^J
������������������������������������������������������������������������@D>�  �IDAT���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������x����?�"7�>\`�    IEND�B\`�",
]
`;

exports[`create 'rust' 'react' 'rust': --rust_react_rust--frontend--assets--global.css 1`] = `
[
  "--rust_react_rust--frontend--assets--global.css",
  "* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #FF585D;
  --secondary: #0072CE;

  background-color: var(--bg);
  color: var(--fg);
  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 1em;
}

main {
  margin: 0 auto;
  max-width: 26em;
}

main.please-wait {
}

h1 {
  background-image: url(./logo-black.svg);
  background-position: center 1em;
  background-repeat: no-repeat;
  background-size: auto 1.5em;
  margin-top: 0;
  padding: 3.5em 0 0;
  text-align: center;
  font-size: 1.5em;
}
.greeting {
  color: var(--secondary);
  text-decoration: underline;
}
h2 {
  text-align: center;
}

.please-wait .change {
  pointer-events: none;
}

ul.information  {
  margin: 2em 0 2em 0;
  padding: 0;
  text-align: left;
  font-size: 0.8em;

}
.information li:first-child {
  border-top: 1px solid var(--light-gray);
}
.information li {
  padding: 0.5em 0;
  border-bottom: 1px solid var(--light-gray);
  list-style: none;
}

.change {
  display: flex;
  flex-direction: column;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
  font-size: 1em;
  border: 2px solid var(--light-gray);
  padding: 0.5em;
}
.change > div {
  display: flex;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
}
.change input {
  flex: 1;
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}
.change label {
  display: block;
  text-align: left;
  margin-right: 10px;
  padding-bottom: 0.5em;
}
.change button {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--secondary);
}

button, input {
  font: inherit;
  outline: none;
}
main.please-wait .change button {
  position: relative;
  pointer-events: none;
  background-color: white;
}
main.please-wait .change button span {
  visibility: hidden;
}
button {
  background-color: var(--secondary);
  border-radius: 5px;
  border: none;
  color: #efefef;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}
button:hover, button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}
input {
  background-color: var(--light-gray);
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 0.5em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

@media (prefers-color-scheme: dark) {
  html {
    --bg: #1e1e1e;
    --fg: #efefef;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
  }
  h1 {
    background-image: url(./logo-white.svg);
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}

main.please-wait .loader,
main.please-wait .loader:after{
  display: inline-block;
}
.loader,
.loader:after {
  display: none;
  border-radius: 50%;
  width: 20px;
  height: 20px;
}
.loader {
  font-size: 10px;
  position: absolute;
  top: calc(50% - 10px);
  left: calc(50% - 10px);
  text-indent: -9999em;
  border-top: 3px solid var(--secondary);
  border-right: 3px solid var(--secondary);
  border-bottom: 3px solid var(--secondary);
  border-left: 3px solid #ffffff;
  -webkit-transform: translateZ(0);
  -ms-transform: translateZ(0);
  transform: translateZ(0);
  -webkit-animation: load8 1.1s infinite linear;
  animation: load8 1.1s infinite linear;
}
@-webkit-keyframes load8 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
@keyframes load8 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
",
]
`;

exports[`create 'rust' 'react' 'rust': --rust_react_rust--frontend--assets--logo-black.svg 1`] = `
[
  "--rust_react_rust--frontend--assets--logo-black.svg",
  "<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>",
]
`;

exports[`create 'rust' 'react' 'rust': --rust_react_rust--frontend--assets--logo-white.svg 1`] = `
[
  "--rust_react_rust--frontend--assets--logo-white.svg",
  "<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>",
]
`;

exports[`create 'rust' 'react' 'rust': --rust_react_rust--frontend--index.html 1`] = `
[
  "--rust_react_rust--frontend--index.html",
  "<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="assets/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="assets/favicon.ico" />
    <title>Welcome to NEAR with React</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <script src="./index.js" type="module"></script>
  </body>
</html>
",
]
`;

exports[`create 'rust' 'react' 'rust': --rust_react_rust--frontend--index.js 1`] = `
[
  "--rust_react_rust--frontend--index.js",
  "// React
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

// NEAR
import { Wallet } from './near-wallet';

const CONTRACT_ADDRESS = process.env.CONTRACT_NAME

// When creating the wallet you can optionally ask to create an access key
// Having the key enables to call non-payable methods without interrupting the user to sign
const wallet = new Wallet({ createAccessKeyFor: CONTRACT_ADDRESS })

// Setup on page load
window.onload = async () => {
  const isSignedIn = await wallet.startUp()
 
  ReactDOM.render(
    <App isSignedIn={isSignedIn} contractId={CONTRACT_ADDRESS} wallet={wallet} />,
    document.getElementById('root')
  );
}",
]
`;

exports[`create 'rust' 'react' 'rust': --rust_react_rust--frontend--near-wallet.js 1`] = `
[
  "--rust_react_rust--frontend--near-wallet.js",
  "/* A helper file that simplifies using the wallet selector */

// near api js
import { providers } from 'near-api-js';

// wallet selector
import '@near-wallet-selector/modal-ui/styles.css';
import { setupModal } from '@near-wallet-selector/modal-ui';
import { setupWalletSelector } from '@near-wallet-selector/core';
import { setupMyNearWallet } from '@near-wallet-selector/my-near-wallet';

const THIRTY_TGAS = '30000000000000';
const NO_DEPOSIT = '0';

// Wallet that simplifies using the wallet selector
export class Wallet {
  walletSelector;
  wallet;
  network;
  createAccessKeyFor;

  constructor({ createAccessKeyFor = undefined, network = 'testnet' }) {
    // Login to a wallet passing a contractId will create a local
    // key, so the user skips signing non-payable transactions.
    // Omitting the accountId will result in the user being
    // asked to sign all transactions.
    this.createAccessKeyFor = createAccessKeyFor
    this.network = 'testnet'
  }

  // To be called when the website loads
  async startUp() {
    this.walletSelector = await setupWalletSelector({
      network: this.network,
      modules: [setupMyNearWallet()],
    });

    const isSignedIn = this.walletSelector.isSignedIn();

    if (isSignedIn) {
      this.wallet = await this.walletSelector.wallet();
      this.accountId = this.walletSelector.store.getState().accounts[0].accountId;
    }

    return isSignedIn;
  }

  // Sign-in method
  signIn() {
    const description = 'Please select a wallet to sign in.';
    const modal = setupModal(this.walletSelector, { contractId: this.createAccessKeyFor, description });
    modal.show();
  }

  // Sign-out method
  signOut() {
    this.wallet.signOut();
    this.wallet = this.accountId = this.createAccessKeyFor = null;
    window.location.replace(window.location.origin + window.location.pathname);
  }

  // Make a read-only call to retrieve information from the network
  async viewMethod({ contractId, method, args = {} }) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    let res = await provider.query({
      request_type: 'call_function',
      account_id: contractId,
      method_name: method,
      args_base64: Buffer.from(JSON.stringify(args)).toString('base64'),
      finality: 'optimistic',
    });
    return JSON.parse(Buffer.from(res.result).toString());
  }

  // Call a method that changes the contract's state
  async callMethod({ contractId, method, args = {}, gas = THIRTY_TGAS, deposit = NO_DEPOSIT }) {
    // Sign a transaction with the "FunctionCall" action
    return await this.wallet.signAndSendTransaction({
      signerId: this.accountId,
      receiverId: contractId,
      actions: [
        {
          type: 'FunctionCall',
          params: {
            methodName: method,
            args,
            gas,
            deposit,
          },
        },
      ],
    });
  }

  // Get transaction result from the network
  async getTransactionResult(txhash) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    // Retrieve transaction result from the network
    const transaction = await provider.txStatus(txhash, 'unnused');
    return providers.getTransactionLastResult(transaction);
  }
}",
]
`;

exports[`create 'rust' 'react' 'rust': --rust_react_rust--frontend--package.json 1`] = `
[
  "--rust_react_rust--frontend--package.json",
  "{
  "name": "my-near-app",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "start": "./start.sh",
    "build": "parcel build index.html --public-url ./"
  },
  "devDependencies": {
    "@babel/core": "^7.22.5",
    "@babel/preset-env": "^7.22.5",
    "@babel/preset-react": "^7.22.5",
    "@types/node": "^20.3.2",
    "buffer": "^5.5.0||^6.0.0",
    "env-cmd": "^10.1.0",
    "events": "^3.1.0",
    "https-browserify": "^1.0.0",
    "nodemon": "^2.0.22",
    "parcel": "^2.9.3",
    "process": "^0.11.10",
    "punycode": "^1.4.1",
    "react-test-renderer": "^18.2.0",
    "stream-http": "^3.1.0",
    "ts-node": "^10.9.1",
    "typescript": "^5.1.3",
    "url": "^0.11.0"
  },
  "dependencies": {
    "@near-wallet-selector/core": "^8.1.4",
    "@near-wallet-selector/modal-ui": "^8.1.4",
    "@near-wallet-selector/my-near-wallet": "^8.1.4",
    "near-api-js": "^2.1.4",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "regenerator-runtime": "^0.13.11"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
",
]
`;

exports[`create 'rust' 'react' 'rust': --rust_react_rust--frontend--start.sh 1`] = `
[
  "--rust_react_rust--frontend--start.sh",
  "#!/bin/sh

CONTRACT_DIRECTORY=../contract
DEV_ACCOUNT_FILE="\${CONTRACT_DIRECTORY}/neardev/dev-account.env"

start () {
  echo The app is starting!
  env-cmd -f $DEV_ACCOUNT_FILE parcel index.html --open
}

alert () {
  GREEN='\\033[1;32m'
  NC='\\033[0m' # No Color

  echo "======================================================"
  echo "It looks like you didn't deploy your contract"
  echo ">> Run \${GREEN}'npm run deploy'\${NC} from the your project's root directory"
  echo "This frontend template works with contracts deployed to NEAR TestNet"
  echo "======================================================"
}

if [ -f "$DEV_ACCOUNT_FILE" ]; then
  start
else
  alert
fi
",
]
`;

exports[`create 'rust' 'react' 'rust': --rust_react_rust--frontend--ui-components.js 1`] = `
[
  "--rust_react_rust--frontend--ui-components.js",
  "import React from 'react';

export function SignInPrompt({greeting, onClick}) {
  return (
    <main>
      <h1>
        The contract says: <span className="greeting">{greeting}</span>
      </h1>
      <h3>
        Welcome to NEAR!
      </h3>
      <p>
        Your contract is storing a greeting message in the NEAR blockchain. To
        change it you need to sign in using the NEAR Wallet. It is very simple,
        just use the button below.
      </p>
      <p>
        Do not worry, this app runs in the test network ("testnet"). It works
        just like the main network ("mainnet"), but using NEAR Tokens that are
        only for testing!
      </p>
      <br/>
      <p style={{ textAlign: 'center' }}>
        <button onClick={onClick}>Sign in with NEAR Wallet</button>
      </p>
    </main>
  );
}

export function SignOutButton({accountId, onClick}) {
  return (
    <button style={{ float: 'right' }} onClick={onClick}>
      Sign out {accountId}
    </button>
  );
}

export function EducationalText() {
  return (
    <>
      <p>
        Look at that! A Hello World app! This greeting is stored on the NEAR blockchain. Check it out:
      </p>
      <ol>
        <li>
          Look in <code>frontend/App.js</code> - you'll see <code>getGreeting</code> and <code>setGreeting</code> being called on <code>contract</code>. What's this?
        </li>
        <li>
          Ultimately, this <code>contract</code> code is defined in <code>./contract</code> – this is the source code for your <a target="_blank" rel="noreferrer" href="https://docs.near.org/docs/develop/contracts/overview">smart contract</a>.</li>
        <li>
          When you run <code>npm run deploy</code>, the code in <code>./contract</code> gets deployed to the NEAR testnet. You can see how this happens by looking in <code>package.json</code>.</li>
      </ol>
      <hr />
      <p>
        To keep learning, check out <a target="_blank" rel="noreferrer" href="https://docs.near.org">the NEAR docs</a> or look through some <a target="_blank" rel="noreferrer" href="https://examples.near.org">example apps</a>.
      </p>
    </>
  );
}
",
]
`;

exports[`create 'rust' 'react' 'rust': --rust_react_rust--integration-tests--Cargo.toml 1`] = `
[
  "--rust_react_rust--integration-tests--Cargo.toml",
  "[package]
name = "integration-tests"
version = "1.0.0"
publish = false
edition = "2018"

[dev-dependencies]
anyhow = "1.0"
borsh = "0.9"
maplit = "1.0"
near-units = "0.2.0"
# arbitrary_precision enabled for u128 types that workspaces requires for Balance types
serde_json = { version = "1.0", features = ["arbitrary_precision"] }
tokio = { version = "1.18.1", features = ["full"] }
tracing = "0.1"
tracing-subscriber = { version = "0.3.11", features = ["env-filter"] }
workspaces = "0.6.0"
pkg-config = "0.3.1"

[[example]]
name = "integration-tests"
path = "src/tests.rs"
",
]
`;

exports[`create 'rust' 'react' 'rust': --rust_react_rust--integration-tests--src--tests.rs 1`] = `
[
  "--rust_react_rust--integration-tests--src--tests.rs",
  "use std::{env, fs};
use near_units::parse_near;
use serde_json::json;
use workspaces::{Account, Contract};

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    let wasm_arg: &str = &(env::args().nth(1).unwrap());
    let wasm_filepath = fs::canonicalize(env::current_dir()?.join(wasm_arg))?;

    let worker = workspaces::sandbox().await?;
    let wasm = std::fs::read(wasm_filepath)?;
    let contract = worker.dev_deploy(&wasm).await?;

    // create accounts
    let account = worker.dev_create_account().await?;
    let alice = account
        .create_subaccount( "alice")
        .initial_balance(parse_near!("30 N"))
        .transact()
        .await?
        .into_result()?;

    // begin tests
    test_default_message(&alice, &contract).await?;
    test_changes_message(&alice, &contract).await?;
    Ok(())
}

async fn test_default_message(
    user: &Account,
    contract: &Contract,
) -> anyhow::Result<()> {
    let message: String = user
        .call( contract.id(), "get_greeting")
        .args_json(json!({}))
        .transact()
        .await?
        .json()?;

    assert_eq!(message, "Hello".to_string());
    println!("      Passed ✅ gets default message");
    Ok(())
}

async fn test_changes_message(
    user: &Account,
    contract: &Contract,
) -> anyhow::Result<()> {
    user.call(contract.id(), "set_greeting")
        .args_json(json!({"message": "Howdy"}))
        .transact()
        .await?
        .into_result()?;

    let message: String = user
        .call(contract.id(), "get_greeting")
        .args_json(json!({}))
        .transact()
        .await?
        .json()?;

    assert_eq!(message, "Howdy".to_string());
    println!("      Passed ✅ changes message");
    Ok(())
}",
]
`;

exports[`create 'rust' 'react' 'rust': --rust_react_rust--package.json 1`] = `
[
  "--rust_react_rust--package.json",
  "{
  "name": "rust_react_rust",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "start": "cd frontend && npm run start",
    "deploy": "cd contract && ./deploy.sh",
    "build": "npm run build:contract && npm run build:web",
    "build:web": "cd frontend && npm run build",
    "build:contract": "cd contract && ./build.sh",
    "test": "npm run test:unit && npm run test:integration",
    "test:unit": "cd contract && cargo test",
    "test:integration": "npm run build:contract && cd integration-tests && cargo run --example integration-tests \\"../contract/target/wasm32-unknown-unknown/release/hello_near.wasm\\"",
    "postinstall": "cd frontend && npm install && cd .. && echo rs tests && echo rs contract"
  },
  "devDependencies": {
    "near-cli": "^3.3.0"
  },
  "dependencies": {}
}",
]
`;

exports[`create 'rust' 'react' 'rust': --rust_react_rust--rust-toolchain.toml 1`] = `
[
  "--rust_react_rust--rust-toolchain.toml",
  "[toolchain]
channel = "1.69"
",
]
`;

exports[`create 'rust' 'vanilla' 'js': --rust_vanilla_js--.gitignore 1`] = `
[
  "--rust_vanilla_js--.gitignore",
  "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
# Developer note: near.gitignore will be renamed to .gitignore upon project creation
# dependencies
node_modules
/.pnp
.pnp.js

# build
/out
/dist

# keys
/templates/react/neardev

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local
/.cache

npm-debug.log*
yarn-debug.log*
yarn-error.log*
",
]
`;

exports[`create 'rust' 'vanilla' 'js': --rust_vanilla_js--.gitpod.yml 1`] = `
[
  "--rust_vanilla_js--.gitpod.yml",
  "tasks:
  - init: npm dev
    command: npm run dev
ports:
  - port: 1234
    onOpen: open-browser
",
]
`;

exports[`create 'rust' 'vanilla' 'js': --rust_vanilla_js--README.md 1`] = `
[
  "--rust_vanilla_js--README.md",
  "near-blank-project
==================

This app was initialized with [create-near-app]


Quick Start
===========

If you haven't installed dependencies during setup:

    npm install


Build and deploy your contract to TestNet with a temporary dev account:

    npm run deploy

Test your contract:

    npm test

If you have a frontend, run \`npm start\`. This will run a dev server.


Exploring The Code
==================

1. The smart-contract code lives in the \`/contract\` folder. See the README there for
   more info. In blockchain apps the smart contract is the "backend" of your app.
2. The frontend code lives in the \`/frontend\` folder. \`/frontend/index.html\` is a great
   place to start exploring. Note that it loads in \`/frontend/index.js\`,
   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.
3. Test your contract: \`npm test\`, this will run the tests in \`integration-tests\` directory.


Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. 
When you run \`npm run deploy\`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.
When you're ready to make it permanent, here's how:


Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local \`node_modules\` folder when you ran \`npm install\`, but for best ergonomics you may want to install it globally:

    npm install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all \`near\` commands with \`npx\`

Ensure that it's installed with \`near --version\` (or \`npx near --version\`)


Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as \`your-name.testnet\`, you can deploy your contract to \`near-blank-project.your-name.testnet\`. Assuming you've already created an account on [NEAR Wallet], here's how to create \`near-blank-project.your-name.testnet\`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace \`YOUR-NAME\` below with your actual account name):

      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: deploy the contract
---------------------------

Use the CLI to deploy the contract to TestNet with your account ID.
Replace \`PATH_TO_WASM_FILE\` with the \`wasm\` that was generated in \`contract\` build directory.

    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile PATH_TO_WASM_FILE


Step 3: set contract name in your frontend code
-----------------------------------------------

Modify the line in \`src/config.js\` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-blank-project.YOUR-NAME.testnet'



Troubleshooting
===============

On Windows, if you're seeing an error containing \`EPERM\` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.


  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/concepts/basics/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages
",
]
`;

exports[`create 'rust' 'vanilla' 'js': --rust_vanilla_js--contract--.cargo--config 1`] = `
[
  "--rust_vanilla_js--contract--.cargo--config",
  "[build]
rustflags = ["-C", "link-args=-s"]
",
]
`;

exports[`create 'rust' 'vanilla' 'js': --rust_vanilla_js--contract--.gitignore 1`] = `
[
  "--rust_vanilla_js--contract--.gitignore",
  "target
",
]
`;

exports[`create 'rust' 'vanilla' 'js': --rust_vanilla_js--contract--Cargo.toml 1`] = `
[
  "--rust_vanilla_js--contract--Cargo.toml",
  "[package]
name = "hello_near"
version = "1.0.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = "4.0.0"
uint = { version = "0.9.3", default-features = false }

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

[workspace]
members = []
",
]
`;

exports[`create 'rust' 'vanilla' 'js': --rust_vanilla_js--contract--README.md 1`] = `
[
  "--rust_vanilla_js--contract--README.md",
  "# Hello NEAR Contract

The smart contract exposes two methods to enable storing and retrieving a greeting in the NEAR network.

\`\`\`rust
const DEFAULT_GREETING: &str = "Hello";

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
    greeting: String,
}

impl Default for Contract {
    fn default() -> Self {
        Self { greeting: DEFAULT_GREETING.to_string() }
    }
}

#[near_bindgen]
impl Contract {
    // Public: Returns the stored greeting, defaulting to 'Hello'
    pub fn get_greeting(&self) -> String {
        return self.greeting.clone();
    }

    // Public: Takes a greeting, such as 'howdy', and records it
    pub fn set_greeting(&mut self, greeting: String) {
        // Record a log permanently to the blockchain!
        log!("Saving greeting {}", greeting);
        self.greeting = greeting;
    }
}
\`\`\`

<br />

# Quickstart

1. Make sure you have installed [rust](https://rust.org/).
2. Install the [\`NEAR CLI\`](https://github.com/near/near-cli#setup)

<br />

## 1. Build and Deploy the Contract
You can automatically compile and deploy the contract in the NEAR testnet by running:

\`\`\`bash
./deploy.sh
\`\`\`

Once finished, check the \`neardev/dev-account\` file to find the address in which the contract was deployed:

\`\`\`bash
cat ./neardev/dev-account
# e.g. dev-1659899566943-21539992274727
\`\`\`

<br />

## 2. Retrieve the Greeting

\`get_greeting\` is a read-only method (aka \`view\` method).

\`View\` methods can be called for **free** by anyone, even people **without a NEAR account**!

\`\`\`bash
# Use near-cli to get the greeting
near view <dev-account> get_greeting
\`\`\`

<br />

## 3. Store a New Greeting
\`set_greeting\` changes the contract's state, for which it is a \`change\` method.

\`Change\` methods can only be invoked using a NEAR account, since the account needs to pay GAS for the transaction.

\`\`\`bash
# Use near-cli to set a new greeting
near call <dev-account> set_greeting '{"message":"howdy"}' --accountId <dev-account>
\`\`\`

**Tip:** If you would like to call \`set_greeting\` using your own account, first login into NEAR using:

\`\`\`bash
# Use near-cli to login your NEAR account
near login
\`\`\`

and then use the logged account to sign the transaction: \`--accountId <your-account>\`.",
]
`;

exports[`create 'rust' 'vanilla' 'js': --rust_vanilla_js--contract--build.sh 1`] = `
[
  "--rust_vanilla_js--contract--build.sh",
  "#!/bin/sh

echo ">> Building contract"

rustup target add wasm32-unknown-unknown
cargo build --all --target wasm32-unknown-unknown --release
",
]
`;

exports[`create 'rust' 'vanilla' 'js': --rust_vanilla_js--contract--deploy.sh 1`] = `
[
  "--rust_vanilla_js--contract--deploy.sh",
  "#!/bin/sh

./build.sh

if [ $? -ne 0 ]; then
  echo ">> Error building contract"
  exit 1
fi

echo ">> Deploying contract"

# https://docs.near.org/tools/near-cli#near-dev-deploy
near dev-deploy --wasmFile ./target/wasm32-unknown-unknown/release/hello_near.wasm
",
]
`;

exports[`create 'rust' 'vanilla' 'js': --rust_vanilla_js--contract--src--lib.rs 1`] = `
[
  "--rust_vanilla_js--contract--src--lib.rs",
  "// Find all our documentation at https://docs.near.org
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{log, near_bindgen};

// Define the default message
const DEFAULT_MESSAGE: &str = "Hello";

// Define the contract structure
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
    message: String,
}

// Define the default, which automatically initializes the contract
impl Default for Contract {
    fn default() -> Self {
        Self { message: DEFAULT_MESSAGE.to_string() }
    }
}

// Implement the contract structure
#[near_bindgen]
impl Contract {
    // Public method - returns the greeting saved, defaulting to DEFAULT_MESSAGE
    pub fn get_greeting(&self) -> String {
        return self.message.clone();
    }

    // Public method - accepts a greeting, such as "howdy", and records it
    pub fn set_greeting(&mut self, message: String) {
        log!("Saving greeting {}", message);
        self.message = message;
    }
}

/*
 * The rest of this file holds the inline tests for the code above
 * Learn more about Rust tests: https://doc.rust-lang.org/book/ch11-01-writing-tests.html
 */
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn get_default_greeting() {
        let contract = Contract::default();
        // this test did not call set_greeting so should return the default "Hello" greeting
        assert_eq!(
            contract.get_greeting(),
            "Hello".to_string()
        );
    }

    #[test]
    fn set_then_get_greeting() {
        let mut contract = Contract::default();
        contract.set_greeting("howdy".to_string());
        assert_eq!(
            contract.get_greeting(),
            "howdy".to_string()
        );
    }
}
",
]
`;

exports[`create 'rust' 'vanilla' 'js': --rust_vanilla_js--frontend--assets--favicon.ico 1`] = `
[
  "--rust_vanilla_js--frontend--assets--favicon.ico",
  "�PNG

   
IHDR  @  @   ��Na   	pHYs  %  %IR$�    IDATx���p��}�qɖdK����6 c������6	?B�
m�����N���܄?n&����M��t�!�^2-�9���ޅ��p�~�#l�1�e�mY��Y�1�m�c��y����4F�����v��/_|�
 �� " $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ �[e�j�عq����;���pG[뎡��y�O��иh���Ο�����;�g��G��ŗ�ٱ��pGOW�)�����q55���]�h�'?2y֌�/!���#.��qp����/��]7�b�Y��MW�Xt劺I�g�B8�]��nx��Z��t��kΠ����K/\\q�ͽ����J�Ҽ����7_ze�w��U+>���ia�g�^�a����������������/�؟��^	,-�랹���{���H�-[|����E>P��
?������+��7~ܒիd,{����<q�E��p�V���[������ֺ��\`L��_��߿y�Mk
>C&,O]�O��Ћ?\\[ƣ�k���s7,��_����?������\\��S_���#K��������W�^��V�Xs׭�n�~��o���YSW���[?t͇>Cl�?���"�IK���w�����[o<�Ҝ%M
ӧ��9���<�寗���۷��:��sٲ�O��e��y��o���ݓ�Au�?��/�=�5�b�4���׾]�k��-����oZ���3D�8�1X�4��p��������!�\\3_~��G������e"�z
Ұʔ�5S�r"\`9H�^�vpw*��1�vnܒ�5��G�|���w���G��kk��ĽD9���?�ڷ��;
>Cn�Z�����N�~��c�>�l��	F�b�j�h�羮Ñz�ֺ��� �����[��^3����s_:c]FF�b{���y�װ��rC�[��@���7��]�����%z�!��vn�R�������y]���i��ex���ݶ}��-.Ǹ,��7b�~�>���4�s�X��a�' 4�������U.F��y�_�7��tú�u�{���������(1'-������P?J�I�Bji^W���kF�yhk��Ɉ����FXPRK�S9�Qbtm����=��~�*���sp��@��Qb\\]�?��c=�}�|���F$\`�!��2J�h�)_ܡ��U�,��P+�a1J'��N���2&\`�t�w���┌ci���_n��X�Zw��#\`�d��F�Q�4������U9��\`�V��DF���>�R	?\\��\`v��"�H4JLY�w��
��ʉ�z�<,F�i|�W������ʆ��񂣐Qbj"����U�W�t%&e�)_~˓#iF��x��ԋ��3JL��>��h�%�WK���M���˥u�����E�0�K��u�� I���Qb�ܽ/ק|�#�Ēx���}K�H���Qbix��0�1Jkټ�y0B2J;�����|���Q�X����g�QUuu~�F~������M�>���PUU=n\\���>#0��"����G��ށv���0B0b3J,��������謮��0�0�3J��;c���ή�q��h90J������;vU
dk�����	�đy�;�߽嵣Ū�0b02a�8-�Om[�B�����0�0�a�8,�ֽ��?Hӱ~i�Y1J��;�Z���UJÈI�ȍQ�ڿs��o|w�MF\\F��Ϡ�����|����X�4���<%�RwG�c��ǎ��O������'��Sz��ص���Pi�	�2J|����]/o;�+
#<#gF�'�����/�<��ws�a�&\`d�(���j�/ox���[�adB��_����w��?�
#FE��Q���m��\`OWw�I��0� \`T��%�tv��G{�{N�G�ȉ�Q)*m�������j{��i90*HE�7?��}���ڼ7BF6��R!��W��ӻ^�z�.F�����(q��[�oh썆�1�e<Jlkݾy����l���>� \`�J��A�����o~��C�t���?�/|�A������%v:������9ћ�v�m�46-,�0��1*�MW�yk�s��(�������ޞ�cMJ�a���g��YUp0<�h-]�j�M����lF��~���kO�
[�z��O�)86���햦�+���F�[�z�㝃�*�v��-[�殨7�I��Qk�iAГz��s㖶��&'��\\�����(8!�8�&��w%�X�k;vmz����۰	�n�򿭛d:O�E3e���R:���ן�8���6aR�M_�S�(.���K�ȁC��7�"��]���o<7�=�$K�(2�����y����z{O�'�]w��{���U�0��(qL�v�l[�Bo_ՉT$ܰ��|�G.O�|��1&����o�<t�ؽsi7�˖]�'���$:cL%��7_z�c���<j��:{�շݒ�9$�X1J,����:��ޓ�l�&5N��[]����!90ƐQbxk�W__?�lX]C�uw��z1���e�X]��_y�X��o�u���Z87��F��1g�8J]�;v��e0-�7l���4k��=cT��G���w�������x�οne�?VG�(�đ���}kskOW��NT'ް�+.^񙏗�,Q��1J�}���s�s�I�z�næ/��]�(1�t�������84���6mެk��o�N�P��FI%Q���Gߣ�X{RnXm��K��E�	�f���:�9�ή�'�G�rî��ߜ6w�X�($\`��Q��tvڳ�=�H�a����sg��h\`	e\`�x:=]��w����R�d�_włKOs(0���0J,���׾�����w�.�6l��%���>)���Q6F�'���;�{_oO�\`*oٍؔ]�т���0��(�����r��}D�
�2k��}}�@�	ef�XUUu�\`{����7q�nX턺7���PWpPjF�U�(�������og�h�j&�]����8er�A@�Wɣ�������'�'�-���g�UpPF*s�����u�ȱ�$߰�lΒEe#\`���F�����G�T��J�
�s~����/8('#!4J�����x�׉tO�a���\\|�� e&\`��BF��=����G��z�&͘�d�UG �'\`$'�Qb_o_UU�IMJ�a5�.��55u��'\`$'�Qb��iDU�
���[���ת�0R��(�DB�oXӕ+�O-8 H�����G�v�O�?��[����y��v�f�3o�9��iH�����G��6lڼYg_���ۅ���y��^��M^�₂oR$\`�.�QbJ
���شr��ښ��R$\`��+%�Ѱ�u�/�P�D��!�WJL�a�/�8eR�w�0�����ڰ���)_�#\`D��+%��a��ϙ:gf�w�0����Kް)sg.ZX�}@ F0��}s	V�P�x�',��O�o�\\���M�8���ƍ_������1n�����s��	Q����cٰY:��~B��"0���Ǧag-��^d@��-��o.z�&ϜQ?}J���0b��XԆ5L�2y�Y�I�/�Qb�V;qٍ�4D%\`� �Q�V3�nڼY�(&\`d"�Q�(6n��)�f|%d��|�?JQêǏ�<k��|�#+���߰��S��Y0�R���4l�I��E���T�(qh
��0A�Ș����%~P�����M
yK�H��SE�O߰����&|5dE��VE�Oհ�7��8�����K!+F�*b�Xа�u��E%0rV)�ē6���Z��F�*e�8ذ���|�$\`�RF�Pa��P)�D�$F���Q"T��T�(*��QA*h�@��,4J��	�(� \`T"�DȀ�Q��!:�r%BhF�2J����f�q	��(�00J����!"�c�!�c�!�w%B �a�Q���������(B0*CowO__�Pf��0*BoO�@�����RÌ!qF�z:�n~���o�
3J��	���������7܆%B����vww�wFkd
3J�d	����=r���x�F�0�DH�������������;��mÌ!AF����������[�?�"4�(R#\`d���}=�]U�����0�DH����C{��WU�@���0�DH�����}�9p��s���0�DH����#����n�ƦaF��#]�;���}�Ic�0�DH�����#��^���&�mÌ�����z����zow���aF�PvFl}����l���=�6�(�K��m��׺ڏ���
3J�20۳��#��VYf��"\`D��������?P��6�(�B�����{��q�7eo�Q"���O�ûZ���O�m�Q"���̑���?��x�j�Q"���Iow���7�tu�*��%B)	a�v�l[�B����J�aF�P2Fo<���;�N�Q�
3J��0bx㹗���X\`�o�Q"���@�k;�^�1���I�aF�PF��Zw������/PÌa�	I;�������!��0�DSF������g��tu�G��%��0�������tv�V�
;E��2J�1"\`����{�Ï���7i7�������tg�(Ƃ���mO=���c�H�a?H�ǟ�4%�X0�����j�Vur~nXUuuM]��C�D(:#-�^޺cC�@4��"oXUU��	U����dF�P\\FB�l}��G�8���6x���5�(�H�H��=�6���w˔|�������)%B�I8r��3�?��q�x�Ro��)�����)%BQ������?���H�{��p�j'N��8a���(�B�(�u�������T��V;qB����<iF�0zF�mx��G���2%ڰq55�fL+�3J�Q0�i���x~�ɡJ�a���M�;�z\\�~j�a4��y㹗Z��z�S��mXUUմ���X�AF�0bFy�ݶ������䖤ݰ��g�L��se�##\`��;;w?�?�ϱ�Ghشy��n4h�##\`�ZwG�c���9я�6�q��g�gf�# \`�TwG����ݮ���mI�
��>e���%8EF�0\\FI����i���
��f�j&֝�pn�ΏQ"��Q:���������OI6��~�������Q"��Q"/���mO�p�>%ְ�q�f�wN��5�(�H�(��O>��?=�w�>�԰��?�V)�\`�C$\`����x�{F���Y�h¤�2^1�a(�����7��o����W�
klZ8u�̲_+��	c��p����t����߰isg�\\�0���Q"���1V�w<���ypϾ��߰	��_|~R��D8c�<��h{m��)J�a&7,���F�p:ƘX��ﶮ���ޤ۰q5��]�||mM�W�D8��Z�׵�]w�ޤذq������OL��\`��$\`YK�߸������\`���iS�%B!���Z����*B�^rA�G���}��ik���/}���Ix�ݰ�s�Y�(��(N&\`GW{G�=���^�Rmؔ�3λ��p��Q"� \`AW{���7m�;N�O�װ��S��^U��\`�'E�����^�Rj��ښ�n�hM]m�w�Q"0F�{ؼv�ϧѰ�5�o\\�^���xU�h�4�{�k���$а�����8��;��(�Qx�װ��aK?~UcS*��;zF�T8���԰��7��evqG%|�A�(��7l梳/�ĵ�]��G��a0ʤ�
�<s�E�_��z��!\`�OI6qʤ����fB]�t�Q"���QVcܰ����>�ɼ�5(�(FF�(��l؇���sfV�Ez�# \`$\`lv��o<7�BodB�a��4�a�V]r�e�*��
=J��0�Q���}����ʼd��FJ�Ѱ�sg.�iM%_�F�T#1�k�Թ�>���[[?��/V�D*�����6�fB���ߤ^��ɞ���5l�]�N_0�z�Q"y0R5̆���_���%�7#aCn��?�h�%.�BF�dL�H�v�U�.�tE���(�\\	�;cæ/�s�m����(�,	��ag-��ow	�Q"�0�(hX�ĺ���Y(�Q"�0�8�a��n��6y�Y.��3J$3F(�v��F���|Q%�#������7�|�J��%�
#�%�W͏�Q"y0"��l��z(�D2 \`��ش����py�Q"�	1�5��?�E�$��1J$:#��z}��UtF��&\`p�ή�.��\`�H\\F�V�ykӕ�c�(����-Y�j�U.��f�HDF��V�0�/�D�0�ش@�J�(�p�M�5�h���E�HN]C���]���(�@��|��ۍ���(�(���������B)/�DB0����F�0J$}F*��^u�m��8a�H�,�\\�(nlZp�z%��F�nq�#\`�d�qc���4U�(���p,���6p�k�_s׭ꕬ�%��Õ=ffv���|�F󉫐Qb~?\\��\`2��������P	�D��G����T����?w��|ُ��;�g��~�/Y����X�aҕ�(1��J#\`�4]yI�C�J�Ae<J��Ǫ	X<SfϘ�lq��p4_�ab�r�8o��)�g|��	XHK�\\�;x��/������%����p��5��̊�c]C�g���f �Q�Y3�����.����[����(1��,��kV���������;7'y���Z�%\`�]��7G�旬^���k
>Ll��Bh����\\��y���*�(q�M���Fhۧ�x{�w$66-���;
>L>���x*}t��Y3V�ukUuu�G10;�>) �(�{ �A����5����&x��y�#*A�Q�Al,���o]�kW�v G�*�;�R�C4l���Z�A�2�?������[�����8Yc����^9��?��J?�hZ���m��m��{<u
����n[���>C��O=�_�ų��=	�zeF��Ҵry�û_y�\\5���ir%l�[�[;�L�4�5�_w���+3��s.[v��9�?�����ć6o������0evc�g�,
ӧ.����;�ڿ���s9n?��e�!��|�a~����}��w'^��<���y�_�������)��7���s7Z�fI�r���������1=ƣ/��^c�S:�{��>���
����jlZp�m��C;c��G����k׍�=�o�u��~A��vn����z�͗^)ͩ�2k�埻�#^��J��7�����ug�Թ3/���o���C[��
��v��ucw��-[�t�U�U!���ڴuÃ������ݯ�0}����_������4IDW{Ƕ�Z�o(���zUӕ��+��X�:�g�K?�Ů��ڶ����9]���k�j�-����noQt;7nٹqK۶�퇇uccӂ�����?�i���ηѨL@H^J
������������������������������������������������������������������������@D>�  �IDAT���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������x����?�"7�>\`�    IEND�B\`�",
]
`;

exports[`create 'rust' 'vanilla' 'js': --rust_vanilla_js--frontend--assets--global.css 1`] = `
[
  "--rust_vanilla_js--frontend--assets--global.css",
  "* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #FF585D;
  --secondary: #0072CE;

  background-color: var(--bg);
  color: var(--fg);
  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 1em;
}

main {
  margin: 0 auto;
  max-width: 26em;
}

main.please-wait {}

h1 {
  background-image: url(./logo-black.svg);
  background-position: center 1em;
  background-repeat: no-repeat;
  background-size: auto 1.5em;
  margin-top: 0;
  padding: 3.5em 0 0;
  text-align: center;
  font-size: 1.5em;
}
.greeting {
  color: var(--secondary);
  text-decoration: underline;
}
h2 {
  text-align: center;
}

.please-wait .change {
  pointer-events: none;
}

ul.information  {
  margin: 2em 0 2em 0;
  padding: 0;
  text-align: left;
  font-size: 0.8em;

}
.information li:first-child {
  border-top: 1px solid var(--light-gray);
}
.information li {
  padding: 0.5em 0;
  border-bottom: 1px solid var(--light-gray);
  list-style: none;
}

.change {
  display: flex;
  flex-direction: column;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
  font-size: 1em;
  border: 2px solid var(--light-gray);
  padding: 0.5em;
}
.change > div {
  display: flex;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
}
.change input {
  flex: 1;
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}
.change label {
  display: block;
  text-align: left;
  margin-right: 10px;
  padding-bottom: 0.5em;
}
.change button {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--secondary);
}

button, input {
  font: inherit;
  outline: none;
}

main.please-wait .change button {
  position: relative;
  pointer-events: none;
  background-color: white;
}
main.please-wait .change button span {
  visibility: hidden;
}

button {
  background-color: var(--secondary);
  border-radius: 5px;
  border: none;
  color: #efefef;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}
button:hover, button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}

input {
  background-color: var(--light-gray);
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 0.5em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

@media (prefers-color-scheme: dark) {
  html {
    --bg: #1e1e1e;
    --fg: #efefef;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
  }
  h1 {
    background-image: url(./logo-white.svg);
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}

main.please-wait .loader,
main.please-wait .loader:after{
  display: inline-block;
}
.loader,
.loader:after {
  display: none;
  border-radius: 50%;
  width: 20px;
  height: 20px;
}
.loader {
  font-size: 10px;
  position: absolute;
  top: calc(50% - 10px);
  left: calc(50% - 10px);
  text-indent: -9999em;
  border-top: 3px solid var(--secondary);
  border-right: 3px solid var(--secondary);
  border-bottom: 3px solid var(--secondary);
  border-left: 3px solid #ffffff;
  -webkit-transform: translateZ(0);
  -ms-transform: translateZ(0);
  transform: translateZ(0);
  -webkit-animation: load8 1.1s infinite linear;
  animation: load8 1.1s infinite linear;
}
@-webkit-keyframes load8 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
@keyframes load8 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
",
]
`;

exports[`create 'rust' 'vanilla' 'js': --rust_vanilla_js--frontend--assets--logo-black.svg 1`] = `
[
  "--rust_vanilla_js--frontend--assets--logo-black.svg",
  "<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>",
]
`;

exports[`create 'rust' 'vanilla' 'js': --rust_vanilla_js--frontend--assets--logo-white.svg 1`] = `
[
  "--rust_vanilla_js--frontend--assets--logo-white.svg",
  "<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>",
]
`;

exports[`create 'rust' 'vanilla' 'js': --rust_vanilla_js--frontend--index.html 1`] = `
[
  "--rust_vanilla_js--frontend--index.html",
  "<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" href="assets/favicon.ico"/>
  <link rel="apple-touch-icon" href="assets/favicon.ico"/>
  <!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous"> -->
  <title>Welcome to NEAR</title>
  <link rel="stylesheet" href="assets/global.css">
</head>
<body>
  <main id="signed-out-flow" style="display: none">
    <h1>
      The contract says: <span class="greeting" data-behavior="greeting"></span>
    </h1>
    <h3>
      Welcome to NEAR!
    </h3>
    <p>
      Your contract is storing a greeting message in the NEAR blockchain. To
      change it you need to sign in using the NEAR Wallet. It is very simple,
      just use the button below.
    </p>
    <p>
      Do not worry, this app runs in the test network ("testnet"). It works
      just like the main network ("mainnet"), but using NEAR Tokens that are
      only for testing!
    </p>
    <p style="text-align: center; margin-top: 2.5em">
      <button id="sign-in-button">Sign in with NEAR Wallet</button>
    </p>

  </main>

  <div id="signed-in-flow" style="display: none">
    <button style="float: right" id="sign-out-button">
      Sign out <span data-behavior="account-id"></span>
    </button>
    <main>
      <h1>
        The contract says: <span class="greeting" data-behavior="greeting"></span>
      </h1>
      <form class="change">
        <label for="greeting">Change greeting:</label>
        <div>
          <input
                  autocomplete="off"
                  id="greeting"
                  data-behavior="greeting"
          />
          <button>
            <span>Save</span>
            <div class="loader"></div>
          </button>
        </div>
      </form>
      <p>
        Look at that! A Hello World app! This greeting is stored on the NEAR blockchain. Check it out:
      </p>
      <ol>
        <li>
          Look in <code>index.js</code> - you will see a <code>Wallet</code> object being created and used 
          to interact with the methods <code>set_greeting</code> and <code>get_greeting</code>.
        </li>
        <li>
          These method live in the <a target="_blank" href="https://docs.near.org/docs/develop/contracts/overview">smart contract</a>,
          who's code is defined in the <code>contract/</code> folder.
        </li>
        <li>
          When you run <code>npm run start</code>, the code in <code>contract/</code> gets deployed to the NEAR testnet.
          You can see how this happens by looking in <code>package.json</code> at the <code>scripts</code> section to
          find the <code>dev</code> command.
        </li>
      </ol>
      <hr>
      <p>
        To keep learning, check out
        <a target="_blank" href="https://docs.near.org">the NEAR docs</a>
        or look through some
        <a target="_blank" href="https://examples.near.org">example apps</a>.
      </p>
    </main>
  </div>

  <script src="index.js" type="module"></script>
</body>
</html>
",
]
`;

exports[`create 'rust' 'vanilla' 'js': --rust_vanilla_js--frontend--index.js 1`] = `
[
  "--rust_vanilla_js--frontend--index.js",
  "import 'regenerator-runtime/runtime';
import { Wallet } from './near-wallet';

const CONTRACT_ADDRESS = process.env.CONTRACT_NAME;

// When creating the wallet you can optionally ask to create an access key
// Having the key enables to call non-payable methods without interrupting the user to sign
const wallet = new Wallet({ createAccessKeyFor: CONTRACT_ADDRESS })

// Setup on page load
window.onload = async () => {
  let isSignedIn = await wallet.startUp();

  if (isSignedIn) {
    signedInFlow();
  } else {
    signedOutFlow();
  }

  getGreeting();
};

// Button clicks
document.querySelector('form').onsubmit = setGreeting;
document.querySelector('#sign-in-button').onclick = () => { wallet.signIn(); };
document.querySelector('#sign-out-button').onclick = () => { wallet.signOut(); };

async function setGreeting(event) {
  // handle UI
  event.preventDefault();
  const { greeting } = event.target.elements;

  document.querySelector('#signed-in-flow main')
    .classList.add('please-wait');

  // use the wallet to send the greeting to the Smart Contract
  await wallet.callMethod({ method: 'set_greeting', args: { message: greeting.value }, contractId: CONTRACT_ADDRESS });

  // query the new greeting
  await getGreeting();

  // handle UI stuff
  document.querySelector('#signed-in-flow main').classList.remove('please-wait');
}

async function getGreeting() {
  // use the wallet to query the Smart Contract
  const currentGreeting = await wallet.viewMethod({ method: 'get_greeting', contractId: CONTRACT_ADDRESS });

  // handle UI stuff
  document.querySelectorAll('[data-behavior=greeting]').forEach(el => {
    el.innerText = currentGreeting;
    el.value = currentGreeting;
  });
}

// UI: Display the signed-out-flow container
function signedOutFlow() {
  document.querySelector('#signed-in-flow').style.display = 'none';
  document.querySelector('#signed-out-flow').style.display = 'block';
}

// UI: Displaying the signed in flow container and fill in account-specific data
function signedInFlow() {
  document.querySelector('#signed-out-flow').style.display = 'none';
  document.querySelector('#signed-in-flow').style.display = 'block';
  document.querySelectorAll('[data-behavior=account-id]').forEach(el => {
    el.innerText = wallet.accountId;
  });
}",
]
`;

exports[`create 'rust' 'vanilla' 'js': --rust_vanilla_js--frontend--near-wallet.js 1`] = `
[
  "--rust_vanilla_js--frontend--near-wallet.js",
  "/* A helper file that simplifies using the wallet selector */

// near api js
import { providers } from 'near-api-js';

// wallet selector
import '@near-wallet-selector/modal-ui/styles.css';
import { setupModal } from '@near-wallet-selector/modal-ui';
import { setupWalletSelector } from '@near-wallet-selector/core';
import { setupMyNearWallet } from '@near-wallet-selector/my-near-wallet';

const THIRTY_TGAS = '30000000000000';
const NO_DEPOSIT = '0';

// Wallet that simplifies using the wallet selector
export class Wallet {
  walletSelector;
  wallet;
  network;
  createAccessKeyFor;

  constructor({ createAccessKeyFor = undefined, network = 'testnet' }) {
    // Login to a wallet passing a contractId will create a local
    // key, so the user skips signing non-payable transactions.
    // Omitting the accountId will result in the user being
    // asked to sign all transactions.
    this.createAccessKeyFor = createAccessKeyFor
    this.network = 'testnet'
  }

  // To be called when the website loads
  async startUp() {
    this.walletSelector = await setupWalletSelector({
      network: this.network,
      modules: [setupMyNearWallet()],
    });

    const isSignedIn = this.walletSelector.isSignedIn();

    if (isSignedIn) {
      this.wallet = await this.walletSelector.wallet();
      this.accountId = this.walletSelector.store.getState().accounts[0].accountId;
    }

    return isSignedIn;
  }

  // Sign-in method
  signIn() {
    const description = 'Please select a wallet to sign in.';
    const modal = setupModal(this.walletSelector, { contractId: this.createAccessKeyFor, description });
    modal.show();
  }

  // Sign-out method
  signOut() {
    this.wallet.signOut();
    this.wallet = this.accountId = this.createAccessKeyFor = null;
    window.location.replace(window.location.origin + window.location.pathname);
  }

  // Make a read-only call to retrieve information from the network
  async viewMethod({ contractId, method, args = {} }) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    let res = await provider.query({
      request_type: 'call_function',
      account_id: contractId,
      method_name: method,
      args_base64: Buffer.from(JSON.stringify(args)).toString('base64'),
      finality: 'optimistic',
    });
    return JSON.parse(Buffer.from(res.result).toString());
  }

  // Call a method that changes the contract's state
  async callMethod({ contractId, method, args = {}, gas = THIRTY_TGAS, deposit = NO_DEPOSIT }) {
    // Sign a transaction with the "FunctionCall" action
    return await this.wallet.signAndSendTransaction({
      signerId: this.accountId,
      receiverId: contractId,
      actions: [
        {
          type: 'FunctionCall',
          params: {
            methodName: method,
            args,
            gas,
            deposit,
          },
        },
      ],
    });
  }

  // Get transaction result from the network
  async getTransactionResult(txhash) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    // Retrieve transaction result from the network
    const transaction = await provider.txStatus(txhash, 'unnused');
    return providers.getTransactionLastResult(transaction);
  }
}",
]
`;

exports[`create 'rust' 'vanilla' 'js': --rust_vanilla_js--frontend--package.json 1`] = `
[
  "--rust_vanilla_js--frontend--package.json",
  "{
  "name": "my-near-app",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "start": "./start.sh",
    "build": "parcel build index.html --public-url ./"
  },
  "devDependencies": {
    "env-cmd": "^10.1.0",
    "events": "^3.3.0",
    "https-browserify": "^1.0.0",
    "nodemon": "^2.0.16",
    "parcel": "^2.7.0",
    "punycode": "^1.4.1",
    "process": "^0.11.10",
    "stream-http": "^3.1.0",
    "url": "^0.11.0"
  },
  "dependencies": {
    "@near-wallet-selector/core": "^8.1.4",
    "@near-wallet-selector/ledger": "^8.1.4",
    "@near-wallet-selector/modal-ui": "^8.1.4",
    "@near-wallet-selector/my-near-wallet": "^8.1.4",
    "@near-wallet-selector/near-wallet": "^8.1.4",
    "near-api-js": "^2.1.4"
  }
}
",
]
`;

exports[`create 'rust' 'vanilla' 'js': --rust_vanilla_js--frontend--start.sh 1`] = `
[
  "--rust_vanilla_js--frontend--start.sh",
  "#!/bin/sh

CONTRACT_DIRECTORY=../contract
DEV_ACCOUNT_FILE="\${CONTRACT_DIRECTORY}/neardev/dev-account.env"

start () {
  echo The app is starting!
  env-cmd -f $DEV_ACCOUNT_FILE parcel index.html --open
}

alert () {
  GREEN='\\033[1;32m'
  NC='\\033[0m' # No Color

  echo "======================================================"
  echo "It looks like you didn't deploy your contract"
  echo ">> Run \${GREEN}'npm run deploy'\${NC} from the your project's root directory"
  echo "This frontend template works with contracts deployed to NEAR TestNet"
  echo "======================================================"
}

if [ -f "$DEV_ACCOUNT_FILE" ]; then
  start
else
  alert
fi
",
]
`;

exports[`create 'rust' 'vanilla' 'js': --rust_vanilla_js--integration-tests--ava.config.cjs 1`] = `
[
  "--rust_vanilla_js--integration-tests--ava.config.cjs",
  "require("util").inspect.defaultOptions.depth = 5; // Increase AVA's printing depth

module.exports = {
  timeout: "300000",
  files: ["src/*.ava.ts"],
  failWithoutAssertions: false,
  extensions: ["ts"],
  require: ["ts-node/register"],
};
",
]
`;

exports[`create 'rust' 'vanilla' 'js': --rust_vanilla_js--integration-tests--package.json 1`] = `
[
  "--rust_vanilla_js--integration-tests--package.json",
  "{
  "name": "ava-testing",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "test": "ava"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/node": "^18.6.2",
    "ava": "^4.2.0",
    "near-workspaces": "^3.2.1",
    "ts-node": "^10.8.0",
    "typescript": "^4.7.2"
  },
  "dependencies": {}
}
",
]
`;

exports[`create 'rust' 'vanilla' 'js': --rust_vanilla_js--integration-tests--src--main.ava.ts 1`] = `
[
  "--rust_vanilla_js--integration-tests--src--main.ava.ts",
  "import { Worker, NearAccount } from 'near-workspaces';
import anyTest, { TestFn } from 'ava';

const test = anyTest as TestFn<{
  worker: Worker;
  accounts: Record<string, NearAccount>;
}>;

test.beforeEach(async (t) => {
  // Init the worker and start a Sandbox server
  const worker = await Worker.init();

  // Deploy contract
  const root = worker.rootAccount;
  const contract = await root.createSubAccount('test-account');
  // Get wasm file path from package.json test script in folder above
  await contract.deploy(
    process.argv[2],
  );

  // Save state for test runs, it is unique for each test
  t.context.worker = worker;
  t.context.accounts = { root, contract };
});

test.afterEach.always(async (t) => {
  // Stop Sandbox server
  await t.context.worker.tearDown().catch((error) => {
    console.log('Failed to stop the Sandbox:', error);
  });
});

test('returns the default greeting', async (t) => {
  const { contract } = t.context.accounts;
  const message: string = await contract.view('get_greeting', {});
  t.is(message, 'Hello');
});

test('changes the message', async (t) => {
  const { root, contract } = t.context.accounts;
  await root.call(contract, 'set_greeting', { message: 'Howdy' });
  const message: string = await contract.view('get_greeting', {});
  t.is(message, 'Howdy');
});",
]
`;

exports[`create 'rust' 'vanilla' 'js': --rust_vanilla_js--package.json 1`] = `
[
  "--rust_vanilla_js--package.json",
  "{
  "name": "rust_vanilla_js",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "start": "cd frontend && npm run start",
    "deploy": "cd contract && ./deploy.sh",
    "build": "npm run build:contract && npm run build:web",
    "build:web": "cd frontend && npm run build",
    "build:contract": "cd contract && ./build.sh",
    "test": "npm run test:unit && npm run test:integration",
    "test:unit": "cd contract && cargo test",
    "test:integration": "npm run build:contract && cd integration-tests && npm test -- -- \\"./contract/target/wasm32-unknown-unknown/release/hello_near.wasm\\"",
    "postinstall": "cd frontend && npm install && cd .. && cd integration-tests && npm install && cd .. && echo rs contract"
  },
  "devDependencies": {
    "near-cli": "^3.3.0"
  },
  "dependencies": {}
}",
]
`;

exports[`create 'rust' 'vanilla' 'js': --rust_vanilla_js--rust-toolchain.toml 1`] = `
[
  "--rust_vanilla_js--rust-toolchain.toml",
  "[toolchain]
channel = "1.69"
",
]
`;

exports[`create 'rust' 'vanilla' 'rust': --rust_vanilla_rust--.gitignore 1`] = `
[
  "--rust_vanilla_rust--.gitignore",
  "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
# Developer note: near.gitignore will be renamed to .gitignore upon project creation
# dependencies
node_modules
/.pnp
.pnp.js

# build
/out
/dist

# keys
/templates/react/neardev

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local
/.cache

npm-debug.log*
yarn-debug.log*
yarn-error.log*
",
]
`;

exports[`create 'rust' 'vanilla' 'rust': --rust_vanilla_rust--.gitpod.yml 1`] = `
[
  "--rust_vanilla_rust--.gitpod.yml",
  "tasks:
  - init: npm dev
    command: npm run dev
ports:
  - port: 1234
    onOpen: open-browser
",
]
`;

exports[`create 'rust' 'vanilla' 'rust': --rust_vanilla_rust--README.md 1`] = `
[
  "--rust_vanilla_rust--README.md",
  "near-blank-project
==================

This app was initialized with [create-near-app]


Quick Start
===========

If you haven't installed dependencies during setup:

    npm install


Build and deploy your contract to TestNet with a temporary dev account:

    npm run deploy

Test your contract:

    npm test

If you have a frontend, run \`npm start\`. This will run a dev server.


Exploring The Code
==================

1. The smart-contract code lives in the \`/contract\` folder. See the README there for
   more info. In blockchain apps the smart contract is the "backend" of your app.
2. The frontend code lives in the \`/frontend\` folder. \`/frontend/index.html\` is a great
   place to start exploring. Note that it loads in \`/frontend/index.js\`,
   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.
3. Test your contract: \`npm test\`, this will run the tests in \`integration-tests\` directory.


Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. 
When you run \`npm run deploy\`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.
When you're ready to make it permanent, here's how:


Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local \`node_modules\` folder when you ran \`npm install\`, but for best ergonomics you may want to install it globally:

    npm install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all \`near\` commands with \`npx\`

Ensure that it's installed with \`near --version\` (or \`npx near --version\`)


Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as \`your-name.testnet\`, you can deploy your contract to \`near-blank-project.your-name.testnet\`. Assuming you've already created an account on [NEAR Wallet], here's how to create \`near-blank-project.your-name.testnet\`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace \`YOUR-NAME\` below with your actual account name):

      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: deploy the contract
---------------------------

Use the CLI to deploy the contract to TestNet with your account ID.
Replace \`PATH_TO_WASM_FILE\` with the \`wasm\` that was generated in \`contract\` build directory.

    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile PATH_TO_WASM_FILE


Step 3: set contract name in your frontend code
-----------------------------------------------

Modify the line in \`src/config.js\` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-blank-project.YOUR-NAME.testnet'



Troubleshooting
===============

On Windows, if you're seeing an error containing \`EPERM\` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.


  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/concepts/basics/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages
",
]
`;

exports[`create 'rust' 'vanilla' 'rust': --rust_vanilla_rust--contract--.cargo--config 1`] = `
[
  "--rust_vanilla_rust--contract--.cargo--config",
  "[build]
rustflags = ["-C", "link-args=-s"]
",
]
`;

exports[`create 'rust' 'vanilla' 'rust': --rust_vanilla_rust--contract--.gitignore 1`] = `
[
  "--rust_vanilla_rust--contract--.gitignore",
  "target
",
]
`;

exports[`create 'rust' 'vanilla' 'rust': --rust_vanilla_rust--contract--Cargo.toml 1`] = `
[
  "--rust_vanilla_rust--contract--Cargo.toml",
  "[package]
name = "hello_near"
version = "1.0.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = "4.0.0"
uint = { version = "0.9.3", default-features = false }

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

[workspace]
members = []
",
]
`;

exports[`create 'rust' 'vanilla' 'rust': --rust_vanilla_rust--contract--README.md 1`] = `
[
  "--rust_vanilla_rust--contract--README.md",
  "# Hello NEAR Contract

The smart contract exposes two methods to enable storing and retrieving a greeting in the NEAR network.

\`\`\`rust
const DEFAULT_GREETING: &str = "Hello";

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
    greeting: String,
}

impl Default for Contract {
    fn default() -> Self {
        Self { greeting: DEFAULT_GREETING.to_string() }
    }
}

#[near_bindgen]
impl Contract {
    // Public: Returns the stored greeting, defaulting to 'Hello'
    pub fn get_greeting(&self) -> String {
        return self.greeting.clone();
    }

    // Public: Takes a greeting, such as 'howdy', and records it
    pub fn set_greeting(&mut self, greeting: String) {
        // Record a log permanently to the blockchain!
        log!("Saving greeting {}", greeting);
        self.greeting = greeting;
    }
}
\`\`\`

<br />

# Quickstart

1. Make sure you have installed [rust](https://rust.org/).
2. Install the [\`NEAR CLI\`](https://github.com/near/near-cli#setup)

<br />

## 1. Build and Deploy the Contract
You can automatically compile and deploy the contract in the NEAR testnet by running:

\`\`\`bash
./deploy.sh
\`\`\`

Once finished, check the \`neardev/dev-account\` file to find the address in which the contract was deployed:

\`\`\`bash
cat ./neardev/dev-account
# e.g. dev-1659899566943-21539992274727
\`\`\`

<br />

## 2. Retrieve the Greeting

\`get_greeting\` is a read-only method (aka \`view\` method).

\`View\` methods can be called for **free** by anyone, even people **without a NEAR account**!

\`\`\`bash
# Use near-cli to get the greeting
near view <dev-account> get_greeting
\`\`\`

<br />

## 3. Store a New Greeting
\`set_greeting\` changes the contract's state, for which it is a \`change\` method.

\`Change\` methods can only be invoked using a NEAR account, since the account needs to pay GAS for the transaction.

\`\`\`bash
# Use near-cli to set a new greeting
near call <dev-account> set_greeting '{"message":"howdy"}' --accountId <dev-account>
\`\`\`

**Tip:** If you would like to call \`set_greeting\` using your own account, first login into NEAR using:

\`\`\`bash
# Use near-cli to login your NEAR account
near login
\`\`\`

and then use the logged account to sign the transaction: \`--accountId <your-account>\`.",
]
`;

exports[`create 'rust' 'vanilla' 'rust': --rust_vanilla_rust--contract--build.sh 1`] = `
[
  "--rust_vanilla_rust--contract--build.sh",
  "#!/bin/sh

echo ">> Building contract"

rustup target add wasm32-unknown-unknown
cargo build --all --target wasm32-unknown-unknown --release
",
]
`;

exports[`create 'rust' 'vanilla' 'rust': --rust_vanilla_rust--contract--deploy.sh 1`] = `
[
  "--rust_vanilla_rust--contract--deploy.sh",
  "#!/bin/sh

./build.sh

if [ $? -ne 0 ]; then
  echo ">> Error building contract"
  exit 1
fi

echo ">> Deploying contract"

# https://docs.near.org/tools/near-cli#near-dev-deploy
near dev-deploy --wasmFile ./target/wasm32-unknown-unknown/release/hello_near.wasm
",
]
`;

exports[`create 'rust' 'vanilla' 'rust': --rust_vanilla_rust--contract--src--lib.rs 1`] = `
[
  "--rust_vanilla_rust--contract--src--lib.rs",
  "// Find all our documentation at https://docs.near.org
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{log, near_bindgen};

// Define the default message
const DEFAULT_MESSAGE: &str = "Hello";

// Define the contract structure
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
    message: String,
}

// Define the default, which automatically initializes the contract
impl Default for Contract {
    fn default() -> Self {
        Self { message: DEFAULT_MESSAGE.to_string() }
    }
}

// Implement the contract structure
#[near_bindgen]
impl Contract {
    // Public method - returns the greeting saved, defaulting to DEFAULT_MESSAGE
    pub fn get_greeting(&self) -> String {
        return self.message.clone();
    }

    // Public method - accepts a greeting, such as "howdy", and records it
    pub fn set_greeting(&mut self, message: String) {
        log!("Saving greeting {}", message);
        self.message = message;
    }
}

/*
 * The rest of this file holds the inline tests for the code above
 * Learn more about Rust tests: https://doc.rust-lang.org/book/ch11-01-writing-tests.html
 */
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn get_default_greeting() {
        let contract = Contract::default();
        // this test did not call set_greeting so should return the default "Hello" greeting
        assert_eq!(
            contract.get_greeting(),
            "Hello".to_string()
        );
    }

    #[test]
    fn set_then_get_greeting() {
        let mut contract = Contract::default();
        contract.set_greeting("howdy".to_string());
        assert_eq!(
            contract.get_greeting(),
            "howdy".to_string()
        );
    }
}
",
]
`;

exports[`create 'rust' 'vanilla' 'rust': --rust_vanilla_rust--frontend--assets--favicon.ico 1`] = `
[
  "--rust_vanilla_rust--frontend--assets--favicon.ico",
  "�PNG

   
IHDR  @  @   ��Na   	pHYs  %  %IR$�    IDATx���p��}�qɖdK����6 c������6	?B�
m�����N���܄?n&����M��t�!�^2-�9���ޅ��p�~�#l�1�e�mY��Y�1�m�c��y����4F�����v��/_|�
 �� " $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ �[e�j�عq����;���pG[뎡��y�O��иh���Ο�����;�g��G��ŗ�ٱ��pGOW�)�����q55���]�h�'?2y֌�/!���#.��qp����/��]7�b�Y��MW�Xt劺I�g�B8�]��nx��Z��t��kΠ����K/\\q�ͽ����J�Ҽ����7_ze�w��U+>���ia�g�^�a����������������/�؟��^	,-�랹���{���H�-[|����E>P��
?������+��7~ܒիd,{����<q�E��p�V���[������ֺ��\`L��_��߿y�Mk
>C&,O]�O��Ћ?\\[ƣ�k���s7,��_����?������\\��S_���#K��������W�^��V�Xs׭�n�~��o���YSW���[?t͇>Cl�?���"�IK���w�����[o<�Ҝ%M
ӧ��9���<�寗���۷��:��sٲ�O��e��y��o���ݓ�Au�?��/�=�5�b�4���׾]�k��-����oZ���3D�8�1X�4��p��������!�\\3_~��G������e"�z
Ұʔ�5S�r"\`9H�^�vpw*��1�vnܒ�5��G�|���w���G��kk��ĽD9���?�ڷ��;
>Cn�Z�����N�~��c�>�l��	F�b�j�h�羮Ñz�ֺ��� �����[��^3����s_:c]FF�b{���y�װ��rC�[��@���7��]�����%z�!��vn�R�������y]���i��ex���ݶ}��-.Ǹ,��7b�~�>���4�s�X��a�' 4�������U.F��y�_�7��tú�u�{���������(1'-������P?J�I�Bji^W���kF�yhk��Ɉ����FXPRK�S9�Qbtm����=��~�*���sp��@��Qb\\]�?��c=�}�|���F$\`�!��2J�h�)_ܡ��U�,��P+�a1J'��N���2&\`�t�w���┌ci���_n��X�Zw��#\`�d��F�Q�4������U9��\`�V��DF���>�R	?\\��\`v��"�H4JLY�w��
��ʉ�z�<,F�i|�W������ʆ��񂣐Qbj"����U�W�t%&e�)_~˓#iF��x��ԋ��3JL��>��h�%�WK���M���˥u�����E�0�K��u�� I���Qb�ܽ/ק|�#�Ēx���}K�H���Qbix��0�1Jkټ�y0B2J;�����|���Q�X����g�QUuu~�F~������M�>���PUU=n\\���>#0��"����G��ށv���0B0b3J,��������謮��0�0�3J��;c���ή�q��h90J������;vU
dk�����	�đy�;�߽嵣Ū�0b02a�8-�Om[�B�����0�0�a�8,�ֽ��?Hӱ~i�Y1J��;�Z���UJÈI�ȍQ�ڿs��o|w�MF\\F��Ϡ�����|����X�4���<%�RwG�c��ǎ��O������'��Sz��ص���Pi�	�2J|����]/o;�+
#<#gF�'�����/�<��ws�a�&\`d�(���j�/ox���[�adB��_����w��?�
#FE��Q���m��\`OWw�I��0� \`T��%�tv��G{�{N�G�ȉ�Q)*m�������j{��i90*HE�7?��}���ڼ7BF6��R!��W��ӻ^�z�.F�����(q��[�oh썆�1�e<Jlkݾy����l���>� \`�J��A�����o~��C�t���?�/|�A������%v:������9ћ�v�m�46-,�0��1*�MW�yk�s��(�������ޞ�cMJ�a���g��YUp0<�h-]�j�M����lF��~���kO�
[�z��O�)86���햦�+���F�[�z�㝃�*�v��-[�殨7�I��Qk�iAГz��s㖶��&'��\\�����(8!�8�&��w%�X�k;vmz����۰	�n�򿭛d:O�E3e���R:���ן�8���6aR�M_�S�(.���K�ȁC��7�"��]���o<7�=�$K�(2�����y����z{O�'�]w��{���U�0��(qL�v�l[�Bo_ՉT$ܰ��|�G.O�|��1&����o�<t�ؽsi7�˖]�'���$:cL%��7_z�c���<j��:{�շݒ�9$�X1J,����:��ޓ�l�&5N��[]����!90ƐQbxk�W__?�lX]C�uw��z1���e�X]��_y�X��o�u���Z87��F��1g�8J]�;v��e0-�7l���4k��=cT��G���w�������x�οne�?VG�(�đ���}kskOW��NT'ް�+.^񙏗�,Q��1J�}���s�s�I�z�næ/��]�(1�t�������84���6mެk��o�N�P��FI%Q���Gߣ�X{RnXm��K��E�	�f���:�9�ή�'�G�rî��ߜ6w�X�($\`��Q��tvڳ�=�H�a����sg��h\`	e\`�x:=]��w����R�d�_włKOs(0���0J,���׾�����w�.�6l��%���>)���Q6F�'���;�{_oO�\`*oٍؔ]�т���0��(�����r��}D�
�2k��}}�@�	ef�XUUu�\`{����7q�nX턺7���PWpPjF�U�(�������og�h�j&�]����8er�A@�Wɣ�������'�'�-���g�UpPF*s�����u�ȱ�$߰�lΒEe#\`���F�����G�T��J�
�s~����/8('#!4J�����x�׉tO�a���\\|�� e&\`��BF��=����G��z�&͘�d�UG �'\`$'�Qb_o_UU�IMJ�a5�.��55u��'\`$'�Qb��iDU�
���[���ת�0R��(�DB�oXӕ+�O-8 H�����G�v�O�?��[����y��v�f�3o�9��iH�����G��6lڼYg_���ۅ���y��^��M^�₂oR$\`�.�QbJ
���شr��ښ��R$\`��+%�Ѱ�u�/�P�D��!�WJL�a�/�8eR�w�0�����ڰ���)_�#\`D��+%��a��ϙ:gf�w�0����Kް)sg.ZX�}@ F0��}s	V�P�x�',��O�o�\\���M�8���ƍ_������1n�����s��	Q����cٰY:��~B��"0���Ǧag-��^d@��-��o.z�&ϜQ?}J���0b��XԆ5L�2y�Y�I�/�Qb�V;qٍ�4D%\`� �Q�V3�nڼY�(&\`d"�Q�(6n��)�f|%d��|�?JQêǏ�<k��|�#+���߰��S��Y0�R���4l�I��E���T�(qh
��0A�Ș����%~P�����M
yK�H��SE�O߰����&|5dE��VE�Oհ�7��8�����K!+F�*b�Xа�u��E%0rV)�ē6���Z��F�*e�8ذ���|�$\`�RF�Pa��P)�D�$F���Q"T��T�(*��QA*h�@��,4J��	�(� \`T"�DȀ�Q��!:�r%BhF�2J����f�q	��(�00J����!"�c�!�c�!�w%B �a�Q���������(B0*CowO__�Pf��0*BoO�@�����RÌ!qF�z:�n~���o�
3J��	���������7܆%B����vww�wFkd
3J�d	����=r���x�F�0�DH�������������;��mÌ!AF����������[�?�"4�(R#\`d���}=�]U�����0�DH����C{��WU�@���0�DH�����}�9p��s���0�DH����#����n�ƦaF��#]�;���}�Ic�0�DH�����#��^���&�mÌ�����z����zow���aF�PvFl}����l���=�6�(�K��m��׺ڏ���
3J�20۳��#��VYf��"\`D��������?P��6�(�B�����{��q�7eo�Q"���O�ûZ���O�m�Q"���̑���?��x�j�Q"���Iow���7�tu�*��%B)	a�v�l[�B����J�aF�P2Fo<���;�N�Q�
3J��0bx㹗���X\`�o�Q"���@�k;�^�1���I�aF�PF��Zw������/PÌa�	I;�������!��0�DSF������g��tu�G��%��0�������tv�V�
;E��2J�1"\`����{�Ï���7i7�������tg�(Ƃ���mO=���c�H�a?H�ǟ�4%�X0�����j�Vur~nXUuuM]��C�D(:#-�^޺cC�@4��"oXUU��	U����dF�P\\FB�l}��G�8���6x���5�(�H�H��=�6���w˔|�������)%B�I8r��3�?��q�x�Ro��)�����)%BQ������?���H�{��p�j'N��8a���(�B�(�u�������T��V;qB����<iF�0zF�mx��G���2%ڰq55�fL+�3J�Q0�i���x~�ɡJ�a���M�;�z\\�~j�a4��y㹗Z��z�S��mXUUմ���X�AF�0bFy�ݶ������䖤ݰ��g�L��se�##\`��;;w?�?�ϱ�Ghشy��n4h�##\`�ZwG�c���9я�6�q��g�gf�# \`�TwG����ݮ���mI�
��>e���%8EF�0\\FI����i���
��f�j&֝�pn�ΏQ"��Q:���������OI6��~�������Q"��Q"/���mO�p�>%ְ�q�f�wN��5�(�H�(��O>��?=�w�>�԰��?�V)�\`�C$\`����x�{F���Y�h¤�2^1�a(�����7��o����W�
klZ8u�̲_+��	c��p����t����߰isg�\\�0���Q"���1V�w<���ypϾ��߰	��_|~R��D8c�<��h{m��)J�a&7,���F�p:ƘX��ﶮ���ޤ۰q5��]�||mM�W�D8��Z�׵�]w�ޤذq������OL��\`��$\`YK�߸������\`���iS�%B!���Z����*B�^rA�G���}��ik���/}���Ix�ݰ�s�Y�(��(N&\`GW{G�=���^�Rmؔ�3λ��p��Q"� \`AW{���7m�;N�O�װ��S��^U��\`�'E�����^�Rj��ښ�n�hM]m�w�Q"0F�{ؼv�ϧѰ�5�o\\�^���xU�h�4�{�k���$а�����8��;��(�Qx�װ��aK?~UcS*��;zF�T8���԰��7��evqG%|�A�(��7l梳/�ĵ�]��G��a0ʤ�
�<s�E�_��z��!\`�OI6qʤ����fB]�t�Q"���QVcܰ����>�ɼ�5(�(FF�(��l؇���sfV�Ez�# \`$\`lv��o<7�BodB�a��4�a�V]r�e�*��
=J��0�Q���}����ʼd��FJ�Ѱ�sg.�iM%_�F�T#1�k�Թ�>���[[?��/V�D*�����6�fB���ߤ^��ɞ���5l�]�N_0�z�Q"y0R5̆���_���%�7#aCn��?�h�%.�BF�dL�H�v�U�.�tE���(�\\	�;cæ/�s�m����(�,	��ag-��ow	�Q"�0�(hX�ĺ���Y(�Q"�0�8�a��n��6y�Y.��3J$3F(�v��F���|Q%�#������7�|�J��%�
#�%�W͏�Q"y0"��l��z(�D2 \`��ش����py�Q"�	1�5��?�E�$��1J$:#��z}��UtF��&\`p�ή�.��\`�H\\F�V�ykӕ�c�(����-Y�j�U.��f�HDF��V�0�/�D�0�ش@�J�(�p�M�5�h���E�HN]C���]���(�@��|��ۍ���(�(���������B)/�DB0����F�0J$}F*��^u�m��8a�H�,�\\�(nlZp�z%��F�nq�#\`�d�qc���4U�(���p,���6p�k�_s׭ꕬ�%��Õ=ffv���|�F󉫐Qb~?\\��\`2��������P	�D��G����T����?w��|ُ��;�g��~�/Y����X�aҕ�(1��J#\`�4]yI�C�J�Ae<J��Ǫ	X<SfϘ�lq��p4_�ab�r�8o��)�g|��	XHK�\\�;x��/������%����p��5��̊�c]C�g���f �Q�Y3�����.����[����(1��,��kV���������;7'y���Z�%\`�]��7G�旬^���k
>Ll��Bh����\\��y���*�(q�M���Fhۧ�x{�w$66-���;
>L>���x*}t��Y3V�ukUuu�G10;�>) �(�{ �A����5����&x��y�#*A�Q�Al,���o]�kW�v G�*�;�R�C4l���Z�A�2�?������[�����8Yc����^9��?��J?�hZ���m��m��{<u
����n[���>C��O=�_�ų��=	�zeF��Ҵry�û_y�\\5���ir%l�[�[;�L�4�5�_w���+3��s.[v��9�?�����ć6o������0evc�g�,
ӧ.����;�ڿ���s9n?��e�!��|�a~����}��w'^��<���y�_�������)��7���s7Z�fI�r���������1=ƣ/��^c�S:�{��>���
����jlZp�m��C;c��G����k׍�=�o�u��~A��vn����z�͗^)ͩ�2k�埻�#^��J��7�����ug�Թ3/���o���C[��
��v��ucw��-[�t�U�U!���ڴuÃ������ݯ�0}����_������4IDW{Ƕ�Z�o(���zUӕ��+��X�:�g�K?�Ů��ڶ����9]���k�j�-����noQt;7nٹqK۶�퇇uccӂ�����?�i���ηѨL@H^J
������������������������������������������������������������������������@D>�  �IDAT���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������x����?�"7�>\`�    IEND�B\`�",
]
`;

exports[`create 'rust' 'vanilla' 'rust': --rust_vanilla_rust--frontend--assets--global.css 1`] = `
[
  "--rust_vanilla_rust--frontend--assets--global.css",
  "* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #FF585D;
  --secondary: #0072CE;

  background-color: var(--bg);
  color: var(--fg);
  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 1em;
}

main {
  margin: 0 auto;
  max-width: 26em;
}

main.please-wait {}

h1 {
  background-image: url(./logo-black.svg);
  background-position: center 1em;
  background-repeat: no-repeat;
  background-size: auto 1.5em;
  margin-top: 0;
  padding: 3.5em 0 0;
  text-align: center;
  font-size: 1.5em;
}
.greeting {
  color: var(--secondary);
  text-decoration: underline;
}
h2 {
  text-align: center;
}

.please-wait .change {
  pointer-events: none;
}

ul.information  {
  margin: 2em 0 2em 0;
  padding: 0;
  text-align: left;
  font-size: 0.8em;

}
.information li:first-child {
  border-top: 1px solid var(--light-gray);
}
.information li {
  padding: 0.5em 0;
  border-bottom: 1px solid var(--light-gray);
  list-style: none;
}

.change {
  display: flex;
  flex-direction: column;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
  font-size: 1em;
  border: 2px solid var(--light-gray);
  padding: 0.5em;
}
.change > div {
  display: flex;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
}
.change input {
  flex: 1;
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}
.change label {
  display: block;
  text-align: left;
  margin-right: 10px;
  padding-bottom: 0.5em;
}
.change button {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--secondary);
}

button, input {
  font: inherit;
  outline: none;
}

main.please-wait .change button {
  position: relative;
  pointer-events: none;
  background-color: white;
}
main.please-wait .change button span {
  visibility: hidden;
}

button {
  background-color: var(--secondary);
  border-radius: 5px;
  border: none;
  color: #efefef;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}
button:hover, button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}

input {
  background-color: var(--light-gray);
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 0.5em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

@media (prefers-color-scheme: dark) {
  html {
    --bg: #1e1e1e;
    --fg: #efefef;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
  }
  h1 {
    background-image: url(./logo-white.svg);
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}

main.please-wait .loader,
main.please-wait .loader:after{
  display: inline-block;
}
.loader,
.loader:after {
  display: none;
  border-radius: 50%;
  width: 20px;
  height: 20px;
}
.loader {
  font-size: 10px;
  position: absolute;
  top: calc(50% - 10px);
  left: calc(50% - 10px);
  text-indent: -9999em;
  border-top: 3px solid var(--secondary);
  border-right: 3px solid var(--secondary);
  border-bottom: 3px solid var(--secondary);
  border-left: 3px solid #ffffff;
  -webkit-transform: translateZ(0);
  -ms-transform: translateZ(0);
  transform: translateZ(0);
  -webkit-animation: load8 1.1s infinite linear;
  animation: load8 1.1s infinite linear;
}
@-webkit-keyframes load8 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
@keyframes load8 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
",
]
`;

exports[`create 'rust' 'vanilla' 'rust': --rust_vanilla_rust--frontend--assets--logo-black.svg 1`] = `
[
  "--rust_vanilla_rust--frontend--assets--logo-black.svg",
  "<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>",
]
`;

exports[`create 'rust' 'vanilla' 'rust': --rust_vanilla_rust--frontend--assets--logo-white.svg 1`] = `
[
  "--rust_vanilla_rust--frontend--assets--logo-white.svg",
  "<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>",
]
`;

exports[`create 'rust' 'vanilla' 'rust': --rust_vanilla_rust--frontend--index.html 1`] = `
[
  "--rust_vanilla_rust--frontend--index.html",
  "<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" href="assets/favicon.ico"/>
  <link rel="apple-touch-icon" href="assets/favicon.ico"/>
  <!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous"> -->
  <title>Welcome to NEAR</title>
  <link rel="stylesheet" href="assets/global.css">
</head>
<body>
  <main id="signed-out-flow" style="display: none">
    <h1>
      The contract says: <span class="greeting" data-behavior="greeting"></span>
    </h1>
    <h3>
      Welcome to NEAR!
    </h3>
    <p>
      Your contract is storing a greeting message in the NEAR blockchain. To
      change it you need to sign in using the NEAR Wallet. It is very simple,
      just use the button below.
    </p>
    <p>
      Do not worry, this app runs in the test network ("testnet"). It works
      just like the main network ("mainnet"), but using NEAR Tokens that are
      only for testing!
    </p>
    <p style="text-align: center; margin-top: 2.5em">
      <button id="sign-in-button">Sign in with NEAR Wallet</button>
    </p>

  </main>

  <div id="signed-in-flow" style="display: none">
    <button style="float: right" id="sign-out-button">
      Sign out <span data-behavior="account-id"></span>
    </button>
    <main>
      <h1>
        The contract says: <span class="greeting" data-behavior="greeting"></span>
      </h1>
      <form class="change">
        <label for="greeting">Change greeting:</label>
        <div>
          <input
                  autocomplete="off"
                  id="greeting"
                  data-behavior="greeting"
          />
          <button>
            <span>Save</span>
            <div class="loader"></div>
          </button>
        </div>
      </form>
      <p>
        Look at that! A Hello World app! This greeting is stored on the NEAR blockchain. Check it out:
      </p>
      <ol>
        <li>
          Look in <code>index.js</code> - you will see a <code>Wallet</code> object being created and used 
          to interact with the methods <code>set_greeting</code> and <code>get_greeting</code>.
        </li>
        <li>
          These method live in the <a target="_blank" href="https://docs.near.org/docs/develop/contracts/overview">smart contract</a>,
          who's code is defined in the <code>contract/</code> folder.
        </li>
        <li>
          When you run <code>npm run start</code>, the code in <code>contract/</code> gets deployed to the NEAR testnet.
          You can see how this happens by looking in <code>package.json</code> at the <code>scripts</code> section to
          find the <code>dev</code> command.
        </li>
      </ol>
      <hr>
      <p>
        To keep learning, check out
        <a target="_blank" href="https://docs.near.org">the NEAR docs</a>
        or look through some
        <a target="_blank" href="https://examples.near.org">example apps</a>.
      </p>
    </main>
  </div>

  <script src="index.js" type="module"></script>
</body>
</html>
",
]
`;

exports[`create 'rust' 'vanilla' 'rust': --rust_vanilla_rust--frontend--index.js 1`] = `
[
  "--rust_vanilla_rust--frontend--index.js",
  "import 'regenerator-runtime/runtime';
import { Wallet } from './near-wallet';

const CONTRACT_ADDRESS = process.env.CONTRACT_NAME;

// When creating the wallet you can optionally ask to create an access key
// Having the key enables to call non-payable methods without interrupting the user to sign
const wallet = new Wallet({ createAccessKeyFor: CONTRACT_ADDRESS })

// Setup on page load
window.onload = async () => {
  let isSignedIn = await wallet.startUp();

  if (isSignedIn) {
    signedInFlow();
  } else {
    signedOutFlow();
  }

  getGreeting();
};

// Button clicks
document.querySelector('form').onsubmit = setGreeting;
document.querySelector('#sign-in-button').onclick = () => { wallet.signIn(); };
document.querySelector('#sign-out-button').onclick = () => { wallet.signOut(); };

async function setGreeting(event) {
  // handle UI
  event.preventDefault();
  const { greeting } = event.target.elements;

  document.querySelector('#signed-in-flow main')
    .classList.add('please-wait');

  // use the wallet to send the greeting to the Smart Contract
  await wallet.callMethod({ method: 'set_greeting', args: { message: greeting.value }, contractId: CONTRACT_ADDRESS });

  // query the new greeting
  await getGreeting();

  // handle UI stuff
  document.querySelector('#signed-in-flow main').classList.remove('please-wait');
}

async function getGreeting() {
  // use the wallet to query the Smart Contract
  const currentGreeting = await wallet.viewMethod({ method: 'get_greeting', contractId: CONTRACT_ADDRESS });

  // handle UI stuff
  document.querySelectorAll('[data-behavior=greeting]').forEach(el => {
    el.innerText = currentGreeting;
    el.value = currentGreeting;
  });
}

// UI: Display the signed-out-flow container
function signedOutFlow() {
  document.querySelector('#signed-in-flow').style.display = 'none';
  document.querySelector('#signed-out-flow').style.display = 'block';
}

// UI: Displaying the signed in flow container and fill in account-specific data
function signedInFlow() {
  document.querySelector('#signed-out-flow').style.display = 'none';
  document.querySelector('#signed-in-flow').style.display = 'block';
  document.querySelectorAll('[data-behavior=account-id]').forEach(el => {
    el.innerText = wallet.accountId;
  });
}",
]
`;

exports[`create 'rust' 'vanilla' 'rust': --rust_vanilla_rust--frontend--near-wallet.js 1`] = `
[
  "--rust_vanilla_rust--frontend--near-wallet.js",
  "/* A helper file that simplifies using the wallet selector */

// near api js
import { providers } from 'near-api-js';

// wallet selector
import '@near-wallet-selector/modal-ui/styles.css';
import { setupModal } from '@near-wallet-selector/modal-ui';
import { setupWalletSelector } from '@near-wallet-selector/core';
import { setupMyNearWallet } from '@near-wallet-selector/my-near-wallet';

const THIRTY_TGAS = '30000000000000';
const NO_DEPOSIT = '0';

// Wallet that simplifies using the wallet selector
export class Wallet {
  walletSelector;
  wallet;
  network;
  createAccessKeyFor;

  constructor({ createAccessKeyFor = undefined, network = 'testnet' }) {
    // Login to a wallet passing a contractId will create a local
    // key, so the user skips signing non-payable transactions.
    // Omitting the accountId will result in the user being
    // asked to sign all transactions.
    this.createAccessKeyFor = createAccessKeyFor
    this.network = 'testnet'
  }

  // To be called when the website loads
  async startUp() {
    this.walletSelector = await setupWalletSelector({
      network: this.network,
      modules: [setupMyNearWallet()],
    });

    const isSignedIn = this.walletSelector.isSignedIn();

    if (isSignedIn) {
      this.wallet = await this.walletSelector.wallet();
      this.accountId = this.walletSelector.store.getState().accounts[0].accountId;
    }

    return isSignedIn;
  }

  // Sign-in method
  signIn() {
    const description = 'Please select a wallet to sign in.';
    const modal = setupModal(this.walletSelector, { contractId: this.createAccessKeyFor, description });
    modal.show();
  }

  // Sign-out method
  signOut() {
    this.wallet.signOut();
    this.wallet = this.accountId = this.createAccessKeyFor = null;
    window.location.replace(window.location.origin + window.location.pathname);
  }

  // Make a read-only call to retrieve information from the network
  async viewMethod({ contractId, method, args = {} }) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    let res = await provider.query({
      request_type: 'call_function',
      account_id: contractId,
      method_name: method,
      args_base64: Buffer.from(JSON.stringify(args)).toString('base64'),
      finality: 'optimistic',
    });
    return JSON.parse(Buffer.from(res.result).toString());
  }

  // Call a method that changes the contract's state
  async callMethod({ contractId, method, args = {}, gas = THIRTY_TGAS, deposit = NO_DEPOSIT }) {
    // Sign a transaction with the "FunctionCall" action
    return await this.wallet.signAndSendTransaction({
      signerId: this.accountId,
      receiverId: contractId,
      actions: [
        {
          type: 'FunctionCall',
          params: {
            methodName: method,
            args,
            gas,
            deposit,
          },
        },
      ],
    });
  }

  // Get transaction result from the network
  async getTransactionResult(txhash) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    // Retrieve transaction result from the network
    const transaction = await provider.txStatus(txhash, 'unnused');
    return providers.getTransactionLastResult(transaction);
  }
}",
]
`;

exports[`create 'rust' 'vanilla' 'rust': --rust_vanilla_rust--frontend--package.json 1`] = `
[
  "--rust_vanilla_rust--frontend--package.json",
  "{
  "name": "my-near-app",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "start": "./start.sh",
    "build": "parcel build index.html --public-url ./"
  },
  "devDependencies": {
    "env-cmd": "^10.1.0",
    "events": "^3.3.0",
    "https-browserify": "^1.0.0",
    "nodemon": "^2.0.16",
    "parcel": "^2.7.0",
    "punycode": "^1.4.1",
    "process": "^0.11.10",
    "stream-http": "^3.1.0",
    "url": "^0.11.0"
  },
  "dependencies": {
    "@near-wallet-selector/core": "^8.1.4",
    "@near-wallet-selector/ledger": "^8.1.4",
    "@near-wallet-selector/modal-ui": "^8.1.4",
    "@near-wallet-selector/my-near-wallet": "^8.1.4",
    "@near-wallet-selector/near-wallet": "^8.1.4",
    "near-api-js": "^2.1.4"
  }
}
",
]
`;

exports[`create 'rust' 'vanilla' 'rust': --rust_vanilla_rust--frontend--start.sh 1`] = `
[
  "--rust_vanilla_rust--frontend--start.sh",
  "#!/bin/sh

CONTRACT_DIRECTORY=../contract
DEV_ACCOUNT_FILE="\${CONTRACT_DIRECTORY}/neardev/dev-account.env"

start () {
  echo The app is starting!
  env-cmd -f $DEV_ACCOUNT_FILE parcel index.html --open
}

alert () {
  GREEN='\\033[1;32m'
  NC='\\033[0m' # No Color

  echo "======================================================"
  echo "It looks like you didn't deploy your contract"
  echo ">> Run \${GREEN}'npm run deploy'\${NC} from the your project's root directory"
  echo "This frontend template works with contracts deployed to NEAR TestNet"
  echo "======================================================"
}

if [ -f "$DEV_ACCOUNT_FILE" ]; then
  start
else
  alert
fi
",
]
`;

exports[`create 'rust' 'vanilla' 'rust': --rust_vanilla_rust--integration-tests--Cargo.toml 1`] = `
[
  "--rust_vanilla_rust--integration-tests--Cargo.toml",
  "[package]
name = "integration-tests"
version = "1.0.0"
publish = false
edition = "2018"

[dev-dependencies]
anyhow = "1.0"
borsh = "0.9"
maplit = "1.0"
near-units = "0.2.0"
# arbitrary_precision enabled for u128 types that workspaces requires for Balance types
serde_json = { version = "1.0", features = ["arbitrary_precision"] }
tokio = { version = "1.18.1", features = ["full"] }
tracing = "0.1"
tracing-subscriber = { version = "0.3.11", features = ["env-filter"] }
workspaces = "0.6.0"
pkg-config = "0.3.1"

[[example]]
name = "integration-tests"
path = "src/tests.rs"
",
]
`;

exports[`create 'rust' 'vanilla' 'rust': --rust_vanilla_rust--integration-tests--src--tests.rs 1`] = `
[
  "--rust_vanilla_rust--integration-tests--src--tests.rs",
  "use std::{env, fs};
use near_units::parse_near;
use serde_json::json;
use workspaces::{Account, Contract};

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    let wasm_arg: &str = &(env::args().nth(1).unwrap());
    let wasm_filepath = fs::canonicalize(env::current_dir()?.join(wasm_arg))?;

    let worker = workspaces::sandbox().await?;
    let wasm = std::fs::read(wasm_filepath)?;
    let contract = worker.dev_deploy(&wasm).await?;

    // create accounts
    let account = worker.dev_create_account().await?;
    let alice = account
        .create_subaccount( "alice")
        .initial_balance(parse_near!("30 N"))
        .transact()
        .await?
        .into_result()?;

    // begin tests
    test_default_message(&alice, &contract).await?;
    test_changes_message(&alice, &contract).await?;
    Ok(())
}

async fn test_default_message(
    user: &Account,
    contract: &Contract,
) -> anyhow::Result<()> {
    let message: String = user
        .call( contract.id(), "get_greeting")
        .args_json(json!({}))
        .transact()
        .await?
        .json()?;

    assert_eq!(message, "Hello".to_string());
    println!("      Passed ✅ gets default message");
    Ok(())
}

async fn test_changes_message(
    user: &Account,
    contract: &Contract,
) -> anyhow::Result<()> {
    user.call(contract.id(), "set_greeting")
        .args_json(json!({"message": "Howdy"}))
        .transact()
        .await?
        .into_result()?;

    let message: String = user
        .call(contract.id(), "get_greeting")
        .args_json(json!({}))
        .transact()
        .await?
        .json()?;

    assert_eq!(message, "Howdy".to_string());
    println!("      Passed ✅ changes message");
    Ok(())
}",
]
`;

exports[`create 'rust' 'vanilla' 'rust': --rust_vanilla_rust--package.json 1`] = `
[
  "--rust_vanilla_rust--package.json",
  "{
  "name": "rust_vanilla_rust",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "start": "cd frontend && npm run start",
    "deploy": "cd contract && ./deploy.sh",
    "build": "npm run build:contract && npm run build:web",
    "build:web": "cd frontend && npm run build",
    "build:contract": "cd contract && ./build.sh",
    "test": "npm run test:unit && npm run test:integration",
    "test:unit": "cd contract && cargo test",
    "test:integration": "npm run build:contract && cd integration-tests && cargo run --example integration-tests \\"../contract/target/wasm32-unknown-unknown/release/hello_near.wasm\\"",
    "postinstall": "cd frontend && npm install && cd .. && echo rs tests && echo rs contract"
  },
  "devDependencies": {
    "near-cli": "^3.3.0"
  },
  "dependencies": {}
}",
]
`;

exports[`create 'rust' 'vanilla' 'rust': --rust_vanilla_rust--rust-toolchain.toml 1`] = `
[
  "--rust_vanilla_rust--rust-toolchain.toml",
  "[toolchain]
channel = "1.69"
",
]
`;
