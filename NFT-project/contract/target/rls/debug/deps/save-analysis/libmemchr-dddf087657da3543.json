{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4","program":"/home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","memchr","/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","--cfg","feature=\"use_std\"","-C","metadata=dddf087657da3543","-C","extra-filename=-dddf087657da3543","--out-dir","/home/pavel/Near/create-near-NFTapp/NFT-project/contract/target/rls/debug/deps","-L","dependency=/home/pavel/Near/create-near-NFTapp/NFT-project/contract/target/rls/debug/deps","--cap-lints","allow","--cfg","memchr_runtime_simd","--cfg","memchr_runtime_sse2","--cfg","memchr_runtime_sse42","--cfg","memchr_runtime_avx","--error-format=json","--sysroot","/home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/pavel/Near/create-near-NFTapp/NFT-project/contract/target/rls/debug/deps/libmemchr-dddf087657da3543.rmeta"},"prelude":{"crate_id":{"name":"memchr","disambiguator":[11395771671854979032,0]},"crate_root":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src","external_crates":[{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[1482942822998146276,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2034785968469428135,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[12655493918929861395,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13424910470399079611,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8213023121058624814,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[1453466684381863476,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[6350140743624839590,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14051362197407762759,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[9149086998956066884,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[10052156975085119838,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[8205769154475333920,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[6301584694146806614,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[15443445678815071393,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[11686829219546108309,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[1288115582928114942,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[3368074392128242346,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[7654683265571716261,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[14210105045647006011,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[1449232587040508138,0]}}],"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":0,"byte_end":13335,"line_start":1,"line_end":451,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":71},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":1713,"byte_end":1719,"line_start":45,"line_end":45,"column_start":16,"column_end":22},"alias_span":null,"name":"Memchr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":87},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":1721,"byte_end":1728,"line_start":45,"line_end":45,"column_start":24,"column_end":31},"alias_span":null,"name":"Memchr2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":104},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":1730,"byte_end":1737,"line_start":45,"line_end":45,"column_start":33,"column_end":40},"alias_span":null,"name":"Memchr3","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":0,"byte_end":13335,"line_start":1,"line_end":451,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":49},{"krate":0,"index":122},{"krate":0,"index":135},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":219},{"krate":0,"index":221},{"krate":0,"index":223},{"krate":0,"index":225},{"krate":0,"index":227}],"decl_id":null,"docs":"The `memchr` crate provides heavily optimized routines for searching bytes.","sig":null,"attributes":[{"value":"*\nThe `memchr` crate provides heavily optimized routines for searching bytes.\n\nThe `memchr` function is traditionally provided by libc, however, the\nperformance of `memchr` can vary significantly depending on the specific\nimplementation of libc that is used. They can range from manually tuned\nAssembly implementations (like that found in GNU's libc) all the way to\nnon-vectorized C implementations (like that found in MUSL).\n\nTo smooth out the differences between implementations of libc, at least\non `x86_64` for Rust 1.27+, this crate provides its own implementation of\n`memchr` that should perform competitively with the one found in GNU's libc.\nThe implementation is in pure Rust and has no dependency on a C compiler or an\nAssembler.\n\nAdditionally, GNU libc also provides an extension, `memrchr`. This crate\nprovides its own implementation of `memrchr` as well, on top of `memchr2`,\n`memchr3`, `memrchr2` and `memrchr3`. The difference between `memchr` and\n`memchr2` is that that `memchr2` permits finding all occurrences of two bytes\ninstead of one. Similarly for `memchr3`.\n*/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":0,"byte_end":1086,"line_start":1,"line_end":21,"column_start":1,"column_end":3}},{"value":"deny(missing_docs)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":1131,"byte_end":1153,"line_start":24,"line_end":24,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":71},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":25647,"byte_end":25653,"line_start":34,"line_end":34,"column_start":12,"column_end":18},"name":"Memchr","qualname":"::iter::Memchr","value":"Memchr {  }","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75}],"decl_id":null,"docs":" An iterator for `memchr`.\n","sig":null,"attributes":[{"value":"/ An iterator for `memchr`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":25606,"byte_end":25635,"line_start":33,"line_end":33,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":25904,"byte_end":25907,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<Memchr>::new","value":"pub fn new(u8, &[u8]) -> Memchr","parent":null,"children":[],"decl_id":null,"docs":" Creates a new iterator that yields all positions of needle in haystack.\n","sig":null,"attributes":[{"value":"/ Creates a new iterator that yields all positions of needle in haystack.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":25803,"byte_end":25878,"line_start":43,"line_end":43,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":25883,"byte_end":25892,"line_start":44,"line_end":44,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":87},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":26552,"byte_end":26559,"line_start":72,"line_end":72,"column_start":12,"column_end":19},"name":"Memchr2","qualname":"::iter::Memchr2","value":"Memchr2 {  }","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92}],"decl_id":null,"docs":" An iterator for `memchr2`.\n","sig":null,"attributes":[{"value":"/ An iterator for `memchr2`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":26510,"byte_end":26540,"line_start":71,"line_end":71,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":26829,"byte_end":26832,"line_start":84,"line_end":84,"column_start":12,"column_end":15},"name":"new","qualname":"<Memchr2>::new","value":"pub fn new(u8, u8, &[u8]) -> Memchr2","parent":null,"children":[],"decl_id":null,"docs":" Creates a new iterator that yields all positions of needle in haystack.\n","sig":null,"attributes":[{"value":"/ Creates a new iterator that yields all positions of needle in haystack.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":26728,"byte_end":26803,"line_start":82,"line_end":82,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":26808,"byte_end":26817,"line_start":83,"line_end":83,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":104},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":27638,"byte_end":27645,"line_start":119,"line_end":119,"column_start":12,"column_end":19},"name":"Memchr3","qualname":"::iter::Memchr3","value":"Memchr3 {  }","parent":null,"children":[{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110}],"decl_id":null,"docs":" An iterator for `memchr3`.\n","sig":null,"attributes":[{"value":"/ An iterator for `memchr3`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":27596,"byte_end":27626,"line_start":118,"line_end":118,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":27926,"byte_end":27929,"line_start":132,"line_end":132,"column_start":12,"column_end":15},"name":"new","qualname":"<Memchr3>::new","value":"pub fn new(u8, u8, u8, &[u8]) -> Memchr3","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Memchr3` that's initialized to zero with a haystack\n","sig":null,"attributes":[{"value":"/ Create a new `Memchr3` that's initialized to zero with a haystack","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":27831,"byte_end":27900,"line_start":130,"line_end":130,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":27905,"byte_end":27914,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":211},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":2202,"byte_end":2213,"line_start":64,"line_end":64,"column_start":8,"column_end":19},"name":"memchr_iter","qualname":"::memchr_iter","value":"pub fn memchr_iter(u8, &[u8]) -> Memchr","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needle in a haystack.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needle in a haystack.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":2119,"byte_end":2184,"line_start":62,"line_end":62,"column_start":1,"column_end":66}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":2185,"byte_end":2194,"line_start":63,"line_end":63,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":212},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":2376,"byte_end":2388,"line_start":70,"line_end":70,"column_start":8,"column_end":20},"name":"memchr2_iter","qualname":"::memchr2_iter","value":"pub fn memchr2_iter(u8, u8, &[u8]) -> Memchr2","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needles in a haystack.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needles in a haystack.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":2292,"byte_end":2358,"line_start":68,"line_end":68,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":2359,"byte_end":2368,"line_start":69,"line_end":69,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":213},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":2577,"byte_end":2589,"line_start":76,"line_end":76,"column_start":8,"column_end":20},"name":"memchr3_iter","qualname":"::memchr3_iter","value":"pub fn memchr3_iter(u8, u8, u8, &[u8]) -> Memchr3","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needles in a haystack.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needles in a haystack.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":2493,"byte_end":2559,"line_start":74,"line_end":74,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":2560,"byte_end":2569,"line_start":75,"line_end":75,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":214},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":2830,"byte_end":2842,"line_start":87,"line_end":87,"column_start":8,"column_end":20},"name":"memrchr_iter","qualname":"::memrchr_iter","value":"pub fn memrchr_iter(u8, &[u8]) -> Rev<Memchr>","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needle in a haystack, in reverse.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needle in a haystack, in reverse.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":2735,"byte_end":2812,"line_start":85,"line_end":85,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":2813,"byte_end":2822,"line_start":86,"line_end":86,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":215},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":3028,"byte_end":3041,"line_start":93,"line_end":93,"column_start":8,"column_end":21},"name":"memrchr2_iter","qualname":"::memrchr2_iter","value":"pub fn memrchr2_iter(u8, u8, &[u8]) -> Rev<Memchr2>","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needles in a haystack, in reverse.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needles in a haystack, in reverse.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":2932,"byte_end":3010,"line_start":91,"line_end":91,"column_start":1,"column_end":79}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":3011,"byte_end":3020,"line_start":92,"line_end":92,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":216},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":3268,"byte_end":3281,"line_start":103,"line_end":103,"column_start":8,"column_end":21},"name":"memrchr3_iter","qualname":"::memrchr3_iter","value":"pub fn memrchr3_iter(u8, u8, u8, &[u8]) -> Rev<Memchr3>","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needles in a haystack, in reverse.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needles in a haystack, in reverse.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":3172,"byte_end":3250,"line_start":101,"line_end":101,"column_start":1,"column_end":79}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":3251,"byte_end":3260,"line_start":102,"line_end":102,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":217},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":4108,"byte_end":4114,"line_start":133,"line_end":133,"column_start":8,"column_end":14},"name":"memchr","qualname":"::memchr","value":"pub fn memchr(u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Search for the first occurrence of a byte in a slice.","sig":null,"attributes":[{"value":"/ Search for the first occurrence of a byte in a slice.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":3438,"byte_end":3495,"line_start":112,"line_end":112,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":3496,"byte_end":3499,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the first occurrence of `needle` in","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":3500,"byte_end":3579,"line_start":114,"line_end":114,"column_start":1,"column_end":80}},{"value":"/ `haystack`, or `None` if one is not found.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":3580,"byte_end":3626,"line_start":115,"line_end":115,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":3627,"byte_end":3630,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":3631,"byte_end":3689,"line_start":117,"line_end":117,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().position(|&b| b == needle)`, `memchr` will use a highly","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":3690,"byte_end":3766,"line_start":118,"line_end":118,"column_start":1,"column_end":77}},{"value":"/ optimized routine that can be up to an order of magnitude faster in some","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":3767,"byte_end":3843,"line_start":119,"line_end":119,"column_start":1,"column_end":77}},{"value":"/ cases.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":3844,"byte_end":3854,"line_start":120,"line_end":120,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":3855,"byte_end":3858,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":3859,"byte_end":3872,"line_start":122,"line_end":122,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":3873,"byte_end":3876,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the first position of a byte in a byte string.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":3877,"byte_end":3950,"line_start":124,"line_end":124,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":3951,"byte_end":3954,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":3955,"byte_end":3962,"line_start":126,"line_end":126,"column_start":1,"column_end":8}},{"value":"/ use memchr::memchr;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":3963,"byte_end":3986,"line_start":127,"line_end":127,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":3987,"byte_end":3990,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":3991,"byte_end":4033,"line_start":129,"line_end":129,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memchr(b'k', haystack), Some(8));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":4034,"byte_end":4082,"line_start":130,"line_end":130,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":4083,"byte_end":4090,"line_start":131,"line_end":131,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":4091,"byte_end":4100,"line_start":132,"line_end":132,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":219},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":5885,"byte_end":5892,"line_start":196,"line_end":196,"column_start":8,"column_end":15},"name":"memchr2","qualname":"::memchr2","value":"pub fn memchr2(u8, u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Like `memchr`, but searches for either of two bytes instead of just one.","sig":null,"attributes":[{"value":"/ Like `memchr`, but searches for either of two bytes instead of just one.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":5080,"byte_end":5156,"line_start":173,"line_end":173,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":5157,"byte_end":5160,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the first occurrence of `needle1`","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":5161,"byte_end":5238,"line_start":175,"line_end":175,"column_start":1,"column_end":78}},{"value":"/ or the first occurrence of `needle2` in `haystack` (whichever occurs","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":5239,"byte_end":5311,"line_start":176,"line_end":176,"column_start":1,"column_end":73}},{"value":"/ earlier), or `None` if neither one is found.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":5312,"byte_end":5360,"line_start":177,"line_end":177,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":5361,"byte_end":5364,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":5365,"byte_end":5423,"line_start":179,"line_end":179,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().position(|&b| b == needle1 || b == needle2)`, `memchr2`","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":5424,"byte_end":5500,"line_start":180,"line_end":180,"column_start":1,"column_end":77}},{"value":"/ will use a highly optimized routine that can be up to an order of magnitude","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":5501,"byte_end":5580,"line_start":181,"line_end":181,"column_start":1,"column_end":80}},{"value":"/ faster in some cases.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":5581,"byte_end":5606,"line_start":182,"line_end":182,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":5607,"byte_end":5610,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":5611,"byte_end":5624,"line_start":184,"line_end":184,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":5625,"byte_end":5628,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the first position of either of two bytes in a byte","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":5629,"byte_end":5707,"line_start":186,"line_end":186,"column_start":1,"column_end":79}},{"value":"/ string.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":5708,"byte_end":5719,"line_start":187,"line_end":187,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":5720,"byte_end":5723,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":5724,"byte_end":5731,"line_start":189,"line_end":189,"column_start":1,"column_end":8}},{"value":"/ use memchr::memchr2;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":5732,"byte_end":5756,"line_start":190,"line_end":190,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":5757,"byte_end":5760,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":5761,"byte_end":5803,"line_start":192,"line_end":192,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memchr2(b'k', b'q', haystack), Some(4));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":5804,"byte_end":5859,"line_start":193,"line_end":193,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":5860,"byte_end":5867,"line_start":194,"line_end":194,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":5868,"byte_end":5877,"line_start":195,"line_end":195,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":221},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":7509,"byte_end":7516,"line_start":248,"line_end":248,"column_start":8,"column_end":15},"name":"memchr3","qualname":"::memchr3","value":"pub fn memchr3(u8, u8, u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Like `memchr`, but searches for any of three bytes instead of just one.","sig":null,"attributes":[{"value":"/ Like `memchr`, but searches for any of three bytes instead of just one.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":6653,"byte_end":6728,"line_start":225,"line_end":225,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":6729,"byte_end":6732,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the first occurrence of `needle1`,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":6733,"byte_end":6811,"line_start":227,"line_end":227,"column_start":1,"column_end":79}},{"value":"/ the first occurrence of `needle2`, or the first occurrence of `needle3` in","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":6812,"byte_end":6890,"line_start":228,"line_end":228,"column_start":1,"column_end":79}},{"value":"/ `haystack` (whichever occurs earliest), or `None` if none are found.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":6891,"byte_end":6963,"line_start":229,"line_end":229,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":6964,"byte_end":6967,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":6968,"byte_end":7026,"line_start":231,"line_end":231,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().position(|&b| b == needle1 || b == needle2 ||","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":7027,"byte_end":7093,"line_start":232,"line_end":232,"column_start":1,"column_end":67}},{"value":"/ b == needle3)`, `memchr3` will use a highly optimized routine that can be","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":7094,"byte_end":7171,"line_start":233,"line_end":233,"column_start":1,"column_end":78}},{"value":"/ up to an order of magnitude faster in some cases.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":7172,"byte_end":7225,"line_start":234,"line_end":234,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":7226,"byte_end":7229,"line_start":235,"line_end":235,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":7230,"byte_end":7243,"line_start":236,"line_end":236,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":7244,"byte_end":7247,"line_start":237,"line_end":237,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the first position of any of three bytes in a byte","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":7248,"byte_end":7325,"line_start":238,"line_end":238,"column_start":1,"column_end":78}},{"value":"/ string.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":7326,"byte_end":7337,"line_start":239,"line_end":239,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":7338,"byte_end":7341,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":7342,"byte_end":7349,"line_start":241,"line_end":241,"column_start":1,"column_end":8}},{"value":"/ use memchr::memchr3;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":7350,"byte_end":7374,"line_start":242,"line_end":242,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":7375,"byte_end":7378,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":7379,"byte_end":7421,"line_start":244,"line_end":244,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memchr3(b'k', b'q', b'e', haystack), Some(2));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":7422,"byte_end":7483,"line_start":245,"line_end":245,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":7484,"byte_end":7491,"line_start":246,"line_end":246,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":7492,"byte_end":7501,"line_start":247,"line_end":247,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":223},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":9026,"byte_end":9033,"line_start":303,"line_end":303,"column_start":8,"column_end":15},"name":"memrchr","qualname":"::memrchr","value":"pub fn memrchr(u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Search for the last occurrence of a byte in a slice.","sig":null,"attributes":[{"value":"/ Search for the last occurrence of a byte in a slice.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":8354,"byte_end":8410,"line_start":282,"line_end":282,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":8411,"byte_end":8414,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the last occurrence of `needle` in","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":8415,"byte_end":8493,"line_start":284,"line_end":284,"column_start":1,"column_end":79}},{"value":"/ `haystack`, or `None` if one is not found.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":8494,"byte_end":8540,"line_start":285,"line_end":285,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":8541,"byte_end":8544,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":8545,"byte_end":8603,"line_start":287,"line_end":287,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().rposition(|&b| b == needle)`, `memrchr` will use a highly","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":8604,"byte_end":8682,"line_start":288,"line_end":288,"column_start":1,"column_end":79}},{"value":"/ optimized routine that can be up to an order of magnitude faster in some","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":8683,"byte_end":8759,"line_start":289,"line_end":289,"column_start":1,"column_end":77}},{"value":"/ cases.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":8760,"byte_end":8770,"line_start":290,"line_end":290,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":8771,"byte_end":8774,"line_start":291,"line_end":291,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":8775,"byte_end":8788,"line_start":292,"line_end":292,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":8789,"byte_end":8792,"line_start":293,"line_end":293,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the last position of a byte in a byte string.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":8793,"byte_end":8865,"line_start":294,"line_end":294,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":8866,"byte_end":8869,"line_start":295,"line_end":295,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":8870,"byte_end":8877,"line_start":296,"line_end":296,"column_start":1,"column_end":8}},{"value":"/ use memchr::memrchr;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":8878,"byte_end":8902,"line_start":297,"line_end":297,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":8903,"byte_end":8906,"line_start":298,"line_end":298,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":8907,"byte_end":8949,"line_start":299,"line_end":299,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memrchr(b'o', haystack), Some(17));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":8950,"byte_end":9000,"line_start":300,"line_end":300,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":9001,"byte_end":9008,"line_start":301,"line_end":301,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":9009,"byte_end":9018,"line_start":302,"line_end":302,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":225},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":10862,"byte_end":10870,"line_start":367,"line_end":367,"column_start":8,"column_end":16},"name":"memrchr2","qualname":"::memrchr2","value":"pub fn memrchr2(u8, u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Like `memrchr`, but searches for either of two bytes instead of just one.","sig":null,"attributes":[{"value":"/ Like `memrchr`, but searches for either of two bytes instead of just one.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":10057,"byte_end":10134,"line_start":344,"line_end":344,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":10135,"byte_end":10138,"line_start":345,"line_end":345,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the last occurrence of `needle1`","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":10139,"byte_end":10215,"line_start":346,"line_end":346,"column_start":1,"column_end":77}},{"value":"/ or the last occurrence of `needle2` in `haystack` (whichever occurs later),","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":10216,"byte_end":10295,"line_start":347,"line_end":347,"column_start":1,"column_end":80}},{"value":"/ or `None` if neither one is found.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":10296,"byte_end":10334,"line_start":348,"line_end":348,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":10335,"byte_end":10338,"line_start":349,"line_end":349,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":10339,"byte_end":10397,"line_start":350,"line_end":350,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().rposition(|&b| b == needle1 || b == needle2)`, `memrchr2`","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":10398,"byte_end":10476,"line_start":351,"line_end":351,"column_start":1,"column_end":79}},{"value":"/ will use a highly optimized routine that can be up to an order of magnitude","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":10477,"byte_end":10556,"line_start":352,"line_end":352,"column_start":1,"column_end":80}},{"value":"/ faster in some cases.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":10557,"byte_end":10582,"line_start":353,"line_end":353,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":10583,"byte_end":10586,"line_start":354,"line_end":354,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":10587,"byte_end":10600,"line_start":355,"line_end":355,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":10601,"byte_end":10604,"line_start":356,"line_end":356,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the last position of either of two bytes in a byte","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":10605,"byte_end":10682,"line_start":357,"line_end":357,"column_start":1,"column_end":78}},{"value":"/ string.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":10683,"byte_end":10694,"line_start":358,"line_end":358,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":10695,"byte_end":10698,"line_start":359,"line_end":359,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":10699,"byte_end":10706,"line_start":360,"line_end":360,"column_start":1,"column_end":8}},{"value":"/ use memchr::memrchr2;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":10707,"byte_end":10732,"line_start":361,"line_end":361,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":10733,"byte_end":10736,"line_start":362,"line_end":362,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":10737,"byte_end":10779,"line_start":363,"line_end":363,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memrchr2(b'k', b'q', haystack), Some(8));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":10780,"byte_end":10836,"line_start":364,"line_end":364,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":10837,"byte_end":10844,"line_start":365,"line_end":365,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":10845,"byte_end":10854,"line_start":366,"line_end":366,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":227},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":12488,"byte_end":12496,"line_start":419,"line_end":419,"column_start":8,"column_end":16},"name":"memrchr3","qualname":"::memrchr3","value":"pub fn memrchr3(u8, u8, u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Like `memrchr`, but searches for any of three bytes instead of just one.","sig":null,"attributes":[{"value":"/ Like `memrchr`, but searches for any of three bytes instead of just one.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":11634,"byte_end":11710,"line_start":396,"line_end":396,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":11711,"byte_end":11714,"line_start":397,"line_end":397,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the last occurrence of `needle1`,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":11715,"byte_end":11792,"line_start":398,"line_end":398,"column_start":1,"column_end":78}},{"value":"/ the last occurrence of `needle2`, or the last occurrence of `needle3` in","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":11793,"byte_end":11869,"line_start":399,"line_end":399,"column_start":1,"column_end":77}},{"value":"/ `haystack` (whichever occurs later), or `None` if none are found.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":11870,"byte_end":11939,"line_start":400,"line_end":400,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":11940,"byte_end":11943,"line_start":401,"line_end":401,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":11944,"byte_end":12002,"line_start":402,"line_end":402,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().rposition(|&b| b == needle1 || b == needle2 ||","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":12003,"byte_end":12070,"line_start":403,"line_end":403,"column_start":1,"column_end":68}},{"value":"/ b == needle3)`, `memrchr3` will use a highly optimized routine that can be","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":12071,"byte_end":12149,"line_start":404,"line_end":404,"column_start":1,"column_end":79}},{"value":"/ up to an order of magnitude faster in some cases.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":12150,"byte_end":12203,"line_start":405,"line_end":405,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":12204,"byte_end":12207,"line_start":406,"line_end":406,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":12208,"byte_end":12221,"line_start":407,"line_end":407,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":12222,"byte_end":12225,"line_start":408,"line_end":408,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the last position of any of three bytes in a byte","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":12226,"byte_end":12302,"line_start":409,"line_end":409,"column_start":1,"column_end":77}},{"value":"/ string.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":12303,"byte_end":12314,"line_start":410,"line_end":410,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":12315,"byte_end":12318,"line_start":411,"line_end":411,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":12319,"byte_end":12326,"line_start":412,"line_end":412,"column_start":1,"column_end":8}},{"value":"/ use memchr::memrchr3;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":12327,"byte_end":12352,"line_start":413,"line_end":413,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":12353,"byte_end":12356,"line_start":414,"line_end":414,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":12357,"byte_end":12399,"line_start":415,"line_end":415,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memrchr3(b'k', b'q', b'e', haystack), Some(8));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":12400,"byte_end":12462,"line_start":416,"line_end":416,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":12463,"byte_end":12470,"line_start":417,"line_end":417,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/lib.rs","byte_start":12471,"byte_end":12480,"line_start":418,"line_end":418,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":25786,"byte_end":25792,"line_start":42,"line_end":42,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":26047,"byte_end":26053,"line_start":50,"line_end":50,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":26355,"byte_end":26361,"line_start":64,"line_end":64,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":26710,"byte_end":26717,"line_start":81,"line_end":81,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":27065,"byte_end":27072,"line_start":94,"line_end":94,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":27390,"byte_end":27397,"line_start":108,"line_end":108,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":27813,"byte_end":27820,"line_start":129,"line_end":129,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":28244,"byte_end":28251,"line_start":148,"line_end":148,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":28617,"byte_end":28624,"line_start":165,"line_end":165,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":25786,"byte_end":25792,"line_start":42,"line_end":42,"column_start":10,"column_end":16},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":71},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":26047,"byte_end":26053,"line_start":50,"line_end":50,"column_start":23,"column_end":29},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":71},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":26355,"byte_end":26361,"line_start":64,"line_end":64,"column_start":34,"column_end":40},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":71},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":26710,"byte_end":26717,"line_start":81,"line_end":81,"column_start":10,"column_end":17},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":87},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":27065,"byte_end":27072,"line_start":94,"line_end":94,"column_start":23,"column_end":30},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":87},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":27390,"byte_end":27397,"line_start":108,"line_end":108,"column_start":34,"column_end":41},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":87},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":27813,"byte_end":27820,"line_start":129,"line_end":129,"column_start":10,"column_end":17},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":104},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":28244,"byte_end":28251,"line_start":148,"line_end":148,"column_start":23,"column_end":30},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":104},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.4/src/iter.rs","byte_start":28617,"byte_end":28624,"line_start":165,"line_end":165,"column_start":34,"column_end":41},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":104},"to":{"krate":2,"index":7423}}]}