{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3","program":"/home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","hex","--edition=2018","/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=7dc44f68c82eaecd","-C","extra-filename=-7dc44f68c82eaecd","--out-dir","/home/pavel/Near/create-near-NFTapp/NFT-project/contract/target/rls/debug/deps","-L","dependency=/home/pavel/Near/create-near-NFTapp/NFT-project/contract/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/pavel/Near/create-near-NFTapp/NFT-project/contract/target/rls/debug/deps/libhex-7dc44f68c82eaecd.rmeta"},"prelude":{"crate_id":{"name":"hex","disambiguator":[4951051339835929601,0]},"crate_root":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src","external_crates":[{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[1482942822998146276,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2034785968469428135,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[12655493918929861395,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13424910470399079611,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8213023121058624814,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[1453466684381863476,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[6350140743624839590,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14051362197407762759,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[9149086998956066884,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[10052156975085119838,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[8205769154475333920,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[6301584694146806614,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[15443445678815071393,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[11686829219546108309,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[1288115582928114942,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[3368074392128242346,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[7654683265571716261,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[14210105045647006011,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[1449232587040508138,0]}}],"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":411,"byte_end":14956,"line_start":9,"line_end":525,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":86},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":1529,"byte_end":1541,"line_start":48,"line_end":48,"column_start":23,"column_end":35},"alias_span":null,"name":"FromHexError","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":411,"byte_end":14956,"line_start":9,"line_end":525,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":29},{"krate":0,"index":31},{"krate":0,"index":33},{"krate":0,"index":39},{"krate":0,"index":43},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":61},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":71},{"krate":0,"index":103},{"krate":0,"index":109},{"krate":0,"index":115},{"krate":0,"index":121},{"krate":0,"index":127},{"krate":0,"index":133},{"krate":0,"index":139},{"krate":0,"index":145},{"krate":0,"index":151},{"krate":0,"index":157},{"krate":0,"index":163},{"krate":0,"index":169},{"krate":0,"index":175},{"krate":0,"index":181},{"krate":0,"index":187},{"krate":0,"index":193},{"krate":0,"index":199},{"krate":0,"index":205},{"krate":0,"index":211},{"krate":0,"index":217},{"krate":0,"index":223},{"krate":0,"index":229},{"krate":0,"index":235},{"krate":0,"index":241},{"krate":0,"index":247},{"krate":0,"index":253},{"krate":0,"index":259},{"krate":0,"index":265},{"krate":0,"index":271},{"krate":0,"index":277},{"krate":0,"index":283},{"krate":0,"index":289},{"krate":0,"index":295},{"krate":0,"index":301},{"krate":0,"index":307},{"krate":0,"index":313},{"krate":0,"index":319},{"krate":0,"index":325},{"krate":0,"index":331},{"krate":0,"index":337},{"krate":0,"index":343},{"krate":0,"index":349},{"krate":0,"index":355},{"krate":0,"index":361},{"krate":0,"index":367},{"krate":0,"index":373},{"krate":0,"index":379},{"krate":0,"index":385},{"krate":0,"index":391},{"krate":0,"index":397},{"krate":0,"index":403},{"krate":0,"index":409},{"krate":0,"index":415},{"krate":0,"index":421},{"krate":0,"index":427},{"krate":0,"index":433},{"krate":0,"index":439},{"krate":0,"index":445},{"krate":0,"index":451},{"krate":0,"index":457},{"krate":0,"index":463},{"krate":0,"index":469},{"krate":0,"index":475},{"krate":0,"index":481},{"krate":0,"index":487},{"krate":0,"index":493},{"krate":0,"index":499},{"krate":0,"index":505},{"krate":0,"index":511},{"krate":0,"index":517},{"krate":0,"index":523},{"krate":0,"index":529},{"krate":0,"index":535},{"krate":0,"index":541},{"krate":0,"index":547},{"krate":0,"index":553},{"krate":0,"index":559},{"krate":0,"index":565},{"krate":0,"index":571},{"krate":0,"index":577},{"krate":0,"index":583},{"krate":0,"index":589},{"krate":0,"index":595},{"krate":0,"index":601},{"krate":0,"index":607},{"krate":0,"index":613},{"krate":0,"index":619},{"krate":0,"index":625},{"krate":0,"index":631},{"krate":0,"index":637},{"krate":0,"index":643},{"krate":0,"index":649},{"krate":0,"index":655},{"krate":0,"index":661},{"krate":0,"index":667},{"krate":0,"index":673},{"krate":0,"index":679},{"krate":0,"index":685},{"krate":0,"index":691},{"krate":0,"index":697},{"krate":0,"index":703},{"krate":0,"index":709},{"krate":0,"index":715},{"krate":0,"index":721},{"krate":0,"index":727},{"krate":0,"index":733},{"krate":0,"index":739},{"krate":0,"index":745},{"krate":0,"index":751},{"krate":0,"index":757},{"krate":0,"index":763},{"krate":0,"index":769},{"krate":0,"index":775},{"krate":0,"index":781},{"krate":0,"index":787},{"krate":0,"index":793},{"krate":0,"index":799},{"krate":0,"index":805},{"krate":0,"index":811},{"krate":0,"index":817},{"krate":0,"index":823},{"krate":0,"index":829},{"krate":0,"index":835},{"krate":0,"index":841},{"krate":0,"index":847},{"krate":0,"index":853},{"krate":0,"index":859},{"krate":0,"index":865},{"krate":0,"index":871},{"krate":0,"index":877},{"krate":0,"index":883},{"krate":0,"index":889},{"krate":0,"index":895},{"krate":0,"index":901},{"krate":0,"index":907},{"krate":0,"index":913},{"krate":0,"index":919},{"krate":0,"index":925},{"krate":0,"index":931},{"krate":0,"index":937},{"krate":0,"index":943},{"krate":0,"index":949},{"krate":0,"index":955},{"krate":0,"index":961},{"krate":0,"index":967},{"krate":0,"index":973},{"krate":0,"index":979},{"krate":0,"index":985},{"krate":0,"index":991},{"krate":0,"index":997},{"krate":0,"index":1003},{"krate":0,"index":1009},{"krate":0,"index":1015},{"krate":0,"index":1021},{"krate":0,"index":1027},{"krate":0,"index":1033},{"krate":0,"index":1039},{"krate":0,"index":1045},{"krate":0,"index":1051},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84}],"decl_id":null,"docs":" Encoding and decoding hex strings.","sig":null,"attributes":[{"value":"/ Encoding and decoding hex strings.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":411,"byte_end":449,"line_start":9,"line_end":9,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":450,"byte_end":453,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ For most cases, you can simply use the [`decode`], [`encode`] and","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":454,"byte_end":523,"line_start":11,"line_end":11,"column_start":1,"column_end":70}},{"value":"/ [`encode_upper`] functions. If you need a bit more control, use the traits","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":524,"byte_end":602,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/ [`ToHex`] and [`FromHex`] instead.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":603,"byte_end":641,"line_start":13,"line_end":13,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":642,"byte_end":645,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":646,"byte_end":659,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":660,"byte_end":663,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":664,"byte_end":671,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(not(feature = \"alloc\"))]","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":672,"byte_end":708,"line_start":18,"line_end":18,"column_start":1,"column_end":37}},{"value":"/ # let mut output = [0; 0x18];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":709,"byte_end":742,"line_start":19,"line_end":19,"column_start":1,"column_end":34}},{"value":"/ #","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":743,"byte_end":748,"line_start":20,"line_end":20,"column_start":1,"column_end":6}},{"value":"/ # #[cfg(not(feature = \"alloc\"))]","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":749,"byte_end":785,"line_start":21,"line_end":21,"column_start":1,"column_end":37}},{"value":"/ # hex::encode_to_slice(b\"Hello world!\", &mut output).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":786,"byte_end":852,"line_start":22,"line_end":22,"column_start":1,"column_end":67}},{"value":"/ #","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":853,"byte_end":858,"line_start":23,"line_end":23,"column_start":1,"column_end":6}},{"value":"/ # #[cfg(not(feature = \"alloc\"))]","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":859,"byte_end":895,"line_start":24,"line_end":24,"column_start":1,"column_end":37}},{"value":"/ # let hex_string = ::core::str::from_utf8(&output).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":896,"byte_end":960,"line_start":25,"line_end":25,"column_start":1,"column_end":65}},{"value":"/ #","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":961,"byte_end":966,"line_start":26,"line_end":26,"column_start":1,"column_end":6}},{"value":"/ # #[cfg(feature = \"alloc\")]","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":967,"byte_end":998,"line_start":27,"line_end":27,"column_start":1,"column_end":32}},{"value":"/ let hex_string = hex::encode(\"Hello world!\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":999,"byte_end":1048,"line_start":28,"line_end":28,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":1049,"byte_end":1052,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ println!(\"{}\", hex_string); // Prints \"48656c6c6f20776f726c6421\"","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":1053,"byte_end":1121,"line_start":30,"line_end":30,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":1122,"byte_end":1125,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # assert_eq!(hex_string, \"48656c6c6f20776f726c6421\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":1126,"byte_end":1183,"line_start":32,"line_end":32,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":1184,"byte_end":1191,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"allow(clippy :: unreadable_literal)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":1328,"byte_end":1365,"line_start":38,"line_end":38,"column_start":1,"column_end":38}}]},{"kind":"StructVariant","id":{"krate":0,"index":87},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/error.rs","byte_start":15210,"byte_end":15229,"line_start":8,"line_end":8,"column_start":5,"column_end":24},"name":"InvalidHexCharacter","qualname":"::error::FromHexError::InvalidHexCharacter","value":"FromHexError::InvalidHexCharacter { c, index }","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" An invalid character was found. Valid ones are: `0...9`, `a...f`\n or `A...F`.\n","sig":null,"attributes":[{"value":"/ An invalid character was found. Valid ones are: `0...9`, `a...f`","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/error.rs","byte_start":15117,"byte_end":15185,"line_start":6,"line_end":6,"column_start":5,"column_end":73}},{"value":"/ or `A...F`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/error.rs","byte_start":15190,"byte_end":15205,"line_start":7,"line_end":7,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":90},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/error.rs","byte_start":15356,"byte_end":15365,"line_start":12,"line_end":12,"column_start":5,"column_end":14},"name":"OddLength","qualname":"::error::FromHexError::OddLength","value":"FromHexError::OddLength","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" A hex string's length needs to be even, as two digits correspond to\n one byte.\n","sig":null,"attributes":[{"value":"/ A hex string's length needs to be even, as two digits correspond to","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/error.rs","byte_start":15262,"byte_end":15333,"line_start":10,"line_end":10,"column_start":5,"column_end":76}},{"value":"/ one byte.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/error.rs","byte_start":15338,"byte_end":15351,"line_start":11,"line_end":11,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":92},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/error.rs","byte_start":15538,"byte_end":15557,"line_start":17,"line_end":17,"column_start":5,"column_end":24},"name":"InvalidStringLength","qualname":"::error::FromHexError::InvalidStringLength","value":"FromHexError::InvalidStringLength","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" If the hex string is decoded into a fixed sized container, such as an\n array, the hex string's length * 2 has to match the container's\n length.\n","sig":null,"attributes":[{"value":"/ If the hex string is decoded into a fixed sized container, such as an","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/error.rs","byte_start":15372,"byte_end":15445,"line_start":14,"line_end":14,"column_start":5,"column_end":78}},{"value":"/ array, the hex string's length * 2 has to match the container's","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/error.rs","byte_start":15450,"byte_end":15517,"line_start":15,"line_end":15,"column_start":5,"column_end":72}},{"value":"/ length.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/error.rs","byte_start":15522,"byte_end":15533,"line_start":16,"line_end":16,"column_start":5,"column_end":16}}]},{"kind":"Enum","id":{"krate":0,"index":86},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/error.rs","byte_start":15098,"byte_end":15110,"line_start":5,"line_end":5,"column_start":10,"column_end":22},"name":"FromHexError","qualname":"::error::FromHexError","value":"pub enum FromHexError {\n    InvalidHexCharacter {\n        c: char,\n        index: usize,\n    },\n    OddLength,\n    InvalidStringLength,\n}","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":90},{"krate":0,"index":92}],"decl_id":null,"docs":" The error type for decoding a hex string into `Vec<u8>` or `[u8; N]`.\n","sig":null,"attributes":[{"value":"/ The error type for decoding a hex string into `Vec<u8>` or `[u8; N]`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/error.rs","byte_start":14974,"byte_end":15047,"line_start":3,"line_end":3,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":24},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":2276,"byte_end":2281,"line_start":73,"line_end":73,"column_start":11,"column_end":16},"name":"ToHex","qualname":"::ToHex","value":"ToHex","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":27}],"decl_id":null,"docs":" Encoding values as hex string.","sig":null,"attributes":[{"value":"/ Encoding values as hex string.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":1798,"byte_end":1832,"line_start":58,"line_end":58,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":1833,"byte_end":1836,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented for all `T` which implement `AsRef<[u8]>`. This","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":1837,"byte_end":1914,"line_start":60,"line_end":60,"column_start":1,"column_end":78}},{"value":"/ includes `String`, `str`, `Vec<u8>` and `[u8]`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":1915,"byte_end":1966,"line_start":61,"line_end":61,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":1967,"byte_end":1970,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":1971,"byte_end":1984,"line_start":63,"line_end":63,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":1985,"byte_end":1988,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":1989,"byte_end":1996,"line_start":65,"line_end":65,"column_start":1,"column_end":8}},{"value":"/ use hex::ToHex;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":1997,"byte_end":2016,"line_start":66,"line_end":66,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":2017,"byte_end":2020,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ println!(\"{}\", \"Hello world!\".encode_hex::<String>());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":2021,"byte_end":2079,"line_start":68,"line_end":68,"column_start":1,"column_end":59}},{"value":"/ # assert_eq!(\"Hello world!\".encode_hex::<String>(), \"48656c6c6f20776f726c6421\".to_string());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":2080,"byte_end":2176,"line_start":69,"line_end":69,"column_start":1,"column_end":97}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":2177,"byte_end":2184,"line_start":70,"line_end":70,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":2185,"byte_end":2188,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ *Note*: instead of using this trait, you might want to use [`encode()`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":2189,"byte_end":2265,"line_start":72,"line_end":72,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":2410,"byte_end":2420,"line_start":76,"line_end":76,"column_start":8,"column_end":18},"name":"encode_hex","qualname":"::ToHex::encode_hex","value":"pub fn encode_hex<T: iter::FromIterator<char>>(&Self) -> T","parent":{"krate":0,"index":24},"children":[],"decl_id":null,"docs":" Encode the hex strict representing `self` into the result. Lower case\n letters are used (e.g. `f9b4ca`)\n","sig":null,"attributes":[{"value":"/ Encode the hex strict representing `self` into the result. Lower case","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":2288,"byte_end":2361,"line_start":74,"line_end":74,"column_start":5,"column_end":78}},{"value":"/ letters are used (e.g. `f9b4ca`)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":2366,"byte_end":2402,"line_start":75,"line_end":75,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":2590,"byte_end":2606,"line_start":80,"line_end":80,"column_start":8,"column_end":24},"name":"encode_hex_upper","qualname":"::ToHex::encode_hex_upper","value":"pub fn encode_hex_upper<T: iter::FromIterator<char>>(&Self) -> T","parent":{"krate":0,"index":24},"children":[],"decl_id":null,"docs":" Encode the hex strict representing `self` into the result. Upper case\n letters are used (e.g. `F9B4CA`)\n","sig":null,"attributes":[{"value":"/ Encode the hex strict representing `self` into the result. Upper case","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":2468,"byte_end":2541,"line_start":78,"line_end":78,"column_start":5,"column_end":78}},{"value":"/ letters are used (e.g. `F9B4CA`)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":2546,"byte_end":2582,"line_start":79,"line_end":79,"column_start":5,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":61},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":4862,"byte_end":4869,"line_start":164,"line_end":164,"column_start":11,"column_end":18},"name":"FromHex","qualname":"::FromHex","value":"FromHex: Sized","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":63}],"decl_id":null,"docs":" Types that can be decoded from a hex string.","sig":null,"attributes":[{"value":"/ Types that can be decoded from a hex string.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":4370,"byte_end":4418,"line_start":147,"line_end":147,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":4419,"byte_end":4422,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented for `Vec<u8>` and small `u8`-arrays.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":4423,"byte_end":4489,"line_start":149,"line_end":149,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":4490,"byte_end":4493,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":4494,"byte_end":4507,"line_start":151,"line_end":151,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":4508,"byte_end":4511,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":4512,"byte_end":4519,"line_start":153,"line_end":153,"column_start":1,"column_end":8}},{"value":"/ use core::str;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":4520,"byte_end":4538,"line_start":154,"line_end":154,"column_start":1,"column_end":19}},{"value":"/ use hex::FromHex;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":4539,"byte_end":4560,"line_start":155,"line_end":155,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":4561,"byte_end":4564,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ let buffer = <[u8; 12]>::from_hex(\"48656c6c6f20776f726c6421\")?;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":4565,"byte_end":4632,"line_start":157,"line_end":157,"column_start":1,"column_end":68}},{"value":"/ let string = str::from_utf8(&buffer).expect(\"invalid buffer length\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":4633,"byte_end":4706,"line_start":158,"line_end":158,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":4707,"byte_end":4710,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ println!(\"{}\", string); // prints \"Hello world!\"","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":4711,"byte_end":4763,"line_start":160,"line_end":160,"column_start":1,"column_end":53}},{"value":"/ # assert_eq!(\"Hello world!\", string);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":4764,"byte_end":4805,"line_start":161,"line_end":161,"column_start":1,"column_end":42}},{"value":"/ # Ok::<(), hex::FromHexError>(())","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":4806,"byte_end":4843,"line_start":162,"line_end":162,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":4844,"byte_end":4851,"line_start":163,"line_end":163,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":62},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":4888,"byte_end":4893,"line_start":165,"line_end":165,"column_start":10,"column_end":15},"name":"Error","qualname":"::FromHex::Error","value":"type Error;","parent":{"krate":0,"index":61},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":5172,"byte_end":5180,"line_start":172,"line_end":172,"column_start":8,"column_end":16},"name":"from_hex","qualname":"::FromHex::from_hex","value":"pub fn from_hex<T: AsRef<[u8]>>(T) -> Result<Self, Self::Error>","parent":{"krate":0,"index":61},"children":[],"decl_id":null,"docs":" Creates an instance of type `Self` from the given hex string, or fails\n with a custom error type.","sig":null,"attributes":[{"value":"/ Creates an instance of type `Self` from the given hex string, or fails","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":4900,"byte_end":4974,"line_start":167,"line_end":167,"column_start":5,"column_end":79}},{"value":"/ with a custom error type.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":4979,"byte_end":5008,"line_start":168,"line_end":168,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":5013,"byte_end":5016,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ Both, upper and lower case characters are valid and can even be","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":5021,"byte_end":5088,"line_start":170,"line_end":170,"column_start":5,"column_end":72}},{"value":"/ mixed (e.g. `f9b4ca`, `F9B4CA` and `f9B4Ca` are all valid strings).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":5093,"byte_end":5164,"line_start":171,"line_end":171,"column_start":5,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":72},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":7906,"byte_end":7912,"line_start":259,"line_end":259,"column_start":8,"column_end":14},"name":"encode","qualname":"::encode","value":"pub fn encode<T: AsRef<[u8]>>(T) -> String","parent":null,"children":[],"decl_id":null,"docs":" Encodes `data` as hex string using lowercase characters.","sig":null,"attributes":[{"value":"/ Encodes `data` as hex string using lowercase characters.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":7367,"byte_end":7427,"line_start":244,"line_end":244,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":7428,"byte_end":7431,"line_start":245,"line_end":245,"column_start":1,"column_end":4}},{"value":"/ Lowercase characters are used (e.g. `f9b4ca`). The resulting string's","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":7432,"byte_end":7505,"line_start":246,"line_end":246,"column_start":1,"column_end":74}},{"value":"/ length is always even, each byte in `data` is always encoded using two hex","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":7506,"byte_end":7584,"line_start":247,"line_end":247,"column_start":1,"column_end":79}},{"value":"/ digits. Thus, the resulting string contains exactly twice as many bytes as","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":7585,"byte_end":7663,"line_start":248,"line_end":248,"column_start":1,"column_end":79}},{"value":"/ the input data.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":7664,"byte_end":7683,"line_start":249,"line_end":249,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":7684,"byte_end":7687,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":7688,"byte_end":7701,"line_start":251,"line_end":251,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":7702,"byte_end":7705,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":7706,"byte_end":7713,"line_start":253,"line_end":253,"column_start":1,"column_end":8}},{"value":"/ assert_eq!(hex::encode(\"Hello world!\"), \"48656c6c6f20776f726c6421\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":7714,"byte_end":7786,"line_start":254,"line_end":254,"column_start":1,"column_end":73}},{"value":"/ assert_eq!(hex::encode(vec![1, 2, 3, 15, 16]), \"0102030f10\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":7787,"byte_end":7852,"line_start":255,"line_end":255,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":7853,"byte_end":7860,"line_start":256,"line_end":256,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":7861,"byte_end":7872,"line_start":257,"line_end":257,"column_start":1,"column_end":12}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":7873,"byte_end":7898,"line_start":258,"line_end":258,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":74},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8349,"byte_end":8361,"line_start":275,"line_end":275,"column_start":8,"column_end":20},"name":"encode_upper","qualname":"::encode_upper","value":"pub fn encode_upper<T: AsRef<[u8]>>(T) -> String","parent":null,"children":[],"decl_id":null,"docs":" Encodes `data` as hex string using uppercase characters.","sig":null,"attributes":[{"value":"/ Encodes `data` as hex string using uppercase characters.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":7975,"byte_end":8035,"line_start":263,"line_end":263,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8036,"byte_end":8039,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ Apart from the characters' casing, this works exactly like `encode()`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8040,"byte_end":8114,"line_start":265,"line_end":265,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8115,"byte_end":8118,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8119,"byte_end":8132,"line_start":267,"line_end":267,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8133,"byte_end":8136,"line_start":268,"line_end":268,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8137,"byte_end":8144,"line_start":269,"line_end":269,"column_start":1,"column_end":8}},{"value":"/ assert_eq!(hex::encode_upper(\"Hello world!\"), \"48656C6C6F20776F726C6421\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8145,"byte_end":8223,"line_start":270,"line_end":270,"column_start":1,"column_end":79}},{"value":"/ assert_eq!(hex::encode_upper(vec![1, 2, 3, 15, 16]), \"0102030F10\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8224,"byte_end":8295,"line_start":271,"line_end":271,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8296,"byte_end":8303,"line_start":272,"line_end":272,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8304,"byte_end":8315,"line_start":273,"line_end":273,"column_start":1,"column_end":12}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8316,"byte_end":8341,"line_start":274,"line_end":274,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":76},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8946,"byte_end":8952,"line_start":296,"line_end":296,"column_start":8,"column_end":14},"name":"decode","qualname":"::decode","value":"pub fn decode<T: AsRef<[u8]>>(T) -> Result<Vec<u8>, FromHexError>","parent":null,"children":[],"decl_id":null,"docs":" Decodes a hex string into raw bytes.","sig":null,"attributes":[{"value":"/ Decodes a hex string into raw bytes.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8430,"byte_end":8470,"line_start":279,"line_end":279,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8471,"byte_end":8474,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/ Both, upper and lower case characters are valid in the input string and can","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8475,"byte_end":8554,"line_start":281,"line_end":281,"column_start":1,"column_end":80}},{"value":"/ even be mixed (e.g. `f9b4ca`, `F9B4CA` and `f9B4Ca` are all valid strings).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8555,"byte_end":8634,"line_start":282,"line_end":282,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8635,"byte_end":8638,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8639,"byte_end":8652,"line_start":284,"line_end":284,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8653,"byte_end":8656,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8657,"byte_end":8664,"line_start":286,"line_end":286,"column_start":1,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8665,"byte_end":8680,"line_start":287,"line_end":287,"column_start":1,"column_end":16}},{"value":"/     hex::decode(\"48656c6c6f20776f726c6421\"),","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8681,"byte_end":8729,"line_start":288,"line_end":288,"column_start":1,"column_end":49}},{"value":"/     Ok(\"Hello world!\".to_owned().into_bytes())","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8730,"byte_end":8780,"line_start":289,"line_end":289,"column_start":1,"column_end":51}},{"value":"/ );","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8781,"byte_end":8787,"line_start":290,"line_end":290,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8788,"byte_end":8791,"line_start":291,"line_end":291,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(hex::decode(\"123\"), Err(hex::FromHexError::OddLength));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8792,"byte_end":8862,"line_start":292,"line_end":292,"column_start":1,"column_end":71}},{"value":"/ assert!(hex::decode(\"foo\").is_err());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8863,"byte_end":8904,"line_start":293,"line_end":293,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8905,"byte_end":8912,"line_start":294,"line_end":294,"column_start":1,"column_end":8}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":8913,"byte_end":8938,"line_start":295,"line_end":295,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":78},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":9451,"byte_end":9466,"line_start":312,"line_end":312,"column_start":8,"column_end":23},"name":"decode_to_slice","qualname":"::decode_to_slice","value":"pub fn decode_to_slice<T: AsRef<[u8]>>(T, &mut [u8])\n-> Result<(), FromHexError>","parent":null,"children":[],"decl_id":null,"docs":" Decode a hex string into a mutable bytes slice.","sig":null,"attributes":[{"value":"/ Decode a hex string into a mutable bytes slice.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":9044,"byte_end":9095,"line_start":300,"line_end":300,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":9096,"byte_end":9099,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ Both, upper and lower case characters are valid in the input string and can","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":9100,"byte_end":9179,"line_start":302,"line_end":302,"column_start":1,"column_end":80}},{"value":"/ even be mixed (e.g. `f9b4ca`, `F9B4CA` and `f9B4Ca` are all valid strings).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":9180,"byte_end":9259,"line_start":303,"line_end":303,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":9260,"byte_end":9263,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":9264,"byte_end":9277,"line_start":305,"line_end":305,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":9278,"byte_end":9281,"line_start":306,"line_end":306,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":9282,"byte_end":9289,"line_start":307,"line_end":307,"column_start":1,"column_end":8}},{"value":"/ let mut bytes = [0u8; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":9290,"byte_end":9319,"line_start":308,"line_end":308,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(hex::decode_to_slice(\"6b697769\", &mut bytes as &mut [u8]), Ok(()));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":9320,"byte_end":9402,"line_start":309,"line_end":309,"column_start":1,"column_end":83}},{"value":"/ assert_eq!(&bytes, b\"kiwi\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":9403,"byte_end":9435,"line_start":310,"line_end":310,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":9436,"byte_end":9443,"line_start":311,"line_end":311,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":84},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":10795,"byte_end":10810,"line_start":367,"line_end":367,"column_start":8,"column_end":23},"name":"encode_to_slice","qualname":"::encode_to_slice","value":"pub fn encode_to_slice<T: AsRef<[u8]>>(T, &mut [u8])\n-> Result<(), FromHexError>","parent":null,"children":[],"decl_id":null,"docs":" Encodes some bytes into a mutable slice of bytes.","sig":null,"attributes":[{"value":"/ Encodes some bytes into a mutable slice of bytes.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":10343,"byte_end":10396,"line_start":350,"line_end":350,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":10397,"byte_end":10400,"line_start":351,"line_end":351,"column_start":1,"column_end":4}},{"value":"/ The output buffer, has to be able to hold at least `input.len() * 2` bytes,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":10401,"byte_end":10480,"line_start":352,"line_end":352,"column_start":1,"column_end":80}},{"value":"/ otherwise this function will return an error.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":10481,"byte_end":10530,"line_start":353,"line_end":353,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":10531,"byte_end":10534,"line_start":354,"line_end":354,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":10535,"byte_end":10548,"line_start":355,"line_end":355,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":10549,"byte_end":10552,"line_start":356,"line_end":356,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":10553,"byte_end":10560,"line_start":357,"line_end":357,"column_start":1,"column_end":8}},{"value":"/ # use hex::FromHexError;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":10561,"byte_end":10589,"line_start":358,"line_end":358,"column_start":1,"column_end":29}},{"value":"/ # fn main() -> Result<(), FromHexError> {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":10590,"byte_end":10635,"line_start":359,"line_end":359,"column_start":1,"column_end":46}},{"value":"/ let mut bytes = [0u8; 4 * 2];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":10636,"byte_end":10669,"line_start":360,"line_end":360,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":10670,"byte_end":10673,"line_start":361,"line_end":361,"column_start":1,"column_end":4}},{"value":"/ hex::encode_to_slice(b\"kiwi\", &mut bytes)?;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":10674,"byte_end":10721,"line_start":362,"line_end":362,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(&bytes, b\"6b697769\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":10722,"byte_end":10758,"line_start":363,"line_end":363,"column_start":1,"column_end":37}},{"value":"/ # Ok(())","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":10759,"byte_end":10771,"line_start":364,"line_end":364,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":10772,"byte_end":10779,"line_start":365,"line_end":365,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":10780,"byte_end":10787,"line_start":366,"line_end":366,"column_start":1,"column_end":8}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/error.rs","byte_start":15613,"byte_end":15625,"line_start":21,"line_end":21,"column_start":28,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/error.rs","byte_start":15652,"byte_end":15664,"line_start":23,"line_end":23,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":20}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":2900,"byte_end":2915,"line_start":92,"line_end":92,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":3144,"byte_end":3159,"line_start":102,"line_end":102,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":3733,"byte_end":3748,"line_start":122,"line_end":122,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":4112,"byte_end":4113,"line_start":137,"line_end":137,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":5596,"byte_end":5599,"line_start":188,"line_end":188,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/error.rs","byte_start":15613,"byte_end":15625,"line_start":21,"line_end":21,"column_start":28,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":86},"to":{"krate":1,"index":2336}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/error.rs","byte_start":15652,"byte_end":15664,"line_start":23,"line_end":23,"column_start":23,"column_end":35},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":86},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":2900,"byte_end":2915,"line_start":92,"line_end":92,"column_start":10,"column_end":25},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":33},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":3144,"byte_end":3159,"line_start":102,"line_end":102,"column_start":23,"column_end":38},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":33},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":3733,"byte_end":3748,"line_start":122,"line_end":122,"column_start":38,"column_end":53},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":33},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":4112,"byte_end":4113,"line_start":137,"line_end":137,"column_start":32,"column_end":33},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":56},"to":{"krate":0,"index":24}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":4871,"byte_end":4876,"line_start":164,"line_end":164,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":2994},"to":{"krate":0,"index":61}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hex-0.4.3/src/lib.rs","byte_start":5596,"byte_end":5599,"line_start":188,"line_end":188,"column_start":18,"column_end":21},"kind":{"Impl":{"id":6}},"from":{"krate":5,"index":7014},"to":{"krate":0,"index":61}}]}