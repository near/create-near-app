{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0","program":"/home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","indexmap","/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=dc7cadd029b47868","-C","extra-filename=-dc7cadd029b47868","--out-dir","/home/pavel/Near/create-near-NFTapp/NFT-project/contract/target/rls/debug/deps","-L","dependency=/home/pavel/Near/create-near-NFTapp/NFT-project/contract/target/rls/debug/deps","--extern","hashbrown=/home/pavel/Near/create-near-NFTapp/NFT-project/contract/target/rls/debug/deps/libhashbrown-42f79a9088e90730.rmeta","--cap-lints","allow","--cfg","has_std","--error-format=json","--sysroot","/home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/pavel/Near/create-near-NFTapp/NFT-project/contract/target/rls/debug/deps/libindexmap-dc7cadd029b47868.rmeta"},"prelude":{"crate_id":{"name":"indexmap","disambiguator":[15624054054790889034,0]},"crate_root":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src","external_crates":[{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[1482942822998146276,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2034785968469428135,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[12655493918929861395,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13424910470399079611,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8213023121058624814,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[1453466684381863476,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[6350140743624839590,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14051362197407762759,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[9149086998956066884,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[10052156975085119838,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[8205769154475333920,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[6301584694146806614,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[15443445678815071393,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[11686829219546108309,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[1288115582928114942,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[3368074392128242346,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[7654683265571716261,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[14210105045647006011,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[1449232587040508138,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","num":20,"id":{"name":"hashbrown","disambiguator":[5906986600653798502,0]}}],"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":92,"byte_end":5655,"line_start":2,"line_end":199,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":35},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":12304,"byte_end":12315,"line_start":9,"line_end":9,"column_start":23,"column_end":34},"alias_span":null,"name":"MutableKeys","value":"","parent":{"krate":0,"index":64}},{"kind":"Use","ref_id":{"krate":0,"index":223},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":12733,"byte_end":12738,"line_start":31,"line_end":31,"column_start":22,"column_end":27},"alias_span":null,"name":"Entry","value":"","parent":{"krate":0,"index":64}},{"kind":"Use","ref_id":{"krate":0,"index":121},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":12740,"byte_end":12753,"line_start":31,"line_end":31,"column_start":29,"column_end":42},"alias_span":null,"name":"OccupiedEntry","value":"","parent":{"krate":0,"index":64}},{"kind":"Use","ref_id":{"krate":0,"index":267},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":12755,"byte_end":12766,"line_start":31,"line_end":31,"column_start":44,"column_end":55},"alias_span":null,"name":"VacantEntry","value":"","parent":{"krate":0,"index":64}},{"kind":"Use","ref_id":{"krate":0,"index":13},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":3867,"byte_end":3877,"line_start":118,"line_end":118,"column_start":21,"column_end":31},"alias_span":null,"name":"Equivalent","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":343},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":3892,"byte_end":3900,"line_start":119,"line_end":119,"column_start":14,"column_end":22},"alias_span":null,"name":"IndexMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":776},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":3915,"byte_end":3923,"line_start":120,"line_end":120,"column_start":14,"column_end":22},"alias_span":null,"name":"IndexSet","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":92,"byte_end":5655,"line_start":2,"line_end":199,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":9},{"krate":0,"index":20},{"krate":0,"index":54},{"krate":0,"index":64},{"krate":0,"index":718},{"krate":0,"index":1146},{"krate":0,"index":1149},{"krate":0,"index":1152},{"krate":0,"index":1252},{"krate":0,"index":1255},{"krate":0,"index":1257},{"krate":0,"index":1258},{"krate":0,"index":1260},{"krate":0,"index":1261},{"krate":0,"index":1155},{"krate":0,"index":1264},{"krate":0,"index":1270},{"krate":0,"index":1273},{"krate":0,"index":1157},{"krate":0,"index":1162},{"krate":0,"index":1173}],"decl_id":null,"docs":" [`IndexMap`] is a hash table where the iteration order of the key-value\n pairs is independent of the hash values of the keys.","sig":null,"attributes":[{"value":"deny(unsafe_code)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":92,"byte_end":113,"line_start":2,"line_end":2,"column_start":1,"column_end":22}},{"value":"/ [`IndexMap`] is a hash table where the iteration order of the key-value","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":205,"byte_end":280,"line_start":6,"line_end":6,"column_start":1,"column_end":76}},{"value":"/ pairs is independent of the hash values of the keys.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":281,"byte_end":337,"line_start":7,"line_end":7,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":338,"byte_end":341,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`] is a corresponding hash set using the same implementation and","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":342,"byte_end":420,"line_start":9,"line_end":9,"column_start":1,"column_end":79}},{"value":"/ with similar properties.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":421,"byte_end":449,"line_start":10,"line_end":10,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":450,"byte_end":453,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`IndexMap`]: map/struct.IndexMap.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":454,"byte_end":496,"line_start":12,"line_end":12,"column_start":1,"column_end":43}},{"value":"/ [`IndexSet`]: set/struct.IndexSet.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":497,"byte_end":539,"line_start":13,"line_end":13,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":540,"byte_end":543,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":544,"byte_end":547,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ### Feature Highlights","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":548,"byte_end":574,"line_start":16,"line_end":16,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":575,"byte_end":578,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ [`IndexMap`] and [`IndexSet`] are drop-in compatible with the std `HashMap`","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":579,"byte_end":658,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"/ and `HashSet`, but they also have some features of note:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":659,"byte_end":719,"line_start":19,"line_end":19,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":720,"byte_end":723,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ - The ordering semantics (see their documentation for details)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":724,"byte_end":790,"line_start":21,"line_end":21,"column_start":1,"column_end":67}},{"value":"/ - Sorting methods and the [`.pop()`][IndexMap::pop] methods.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":791,"byte_end":855,"line_start":22,"line_end":22,"column_start":1,"column_end":65}},{"value":"/ - The [`Equivalent`] trait, which offers more flexible equality definitions","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":856,"byte_end":935,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/   between borrowed and owned versions of keys.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":936,"byte_end":986,"line_start":24,"line_end":24,"column_start":1,"column_end":51}},{"value":"/ - The [`MutableKeys`][map::MutableKeys] trait, which gives opt-in mutable","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":987,"byte_end":1064,"line_start":25,"line_end":25,"column_start":1,"column_end":78}},{"value":"/   access to hash map keys.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":1065,"byte_end":1095,"line_start":26,"line_end":26,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":1096,"byte_end":1099,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ ### Alternate Hashers","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":1100,"byte_end":1125,"line_start":28,"line_end":28,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":1126,"byte_end":1129,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ [`IndexMap`] and [`IndexSet`] have a default hasher type `S = RandomState`,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":1130,"byte_end":1209,"line_start":30,"line_end":30,"column_start":1,"column_end":80}},{"value":"/ just like the standard `HashMap` and `HashSet`, which is resistant to","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":1210,"byte_end":1283,"line_start":31,"line_end":31,"column_start":1,"column_end":74}},{"value":"/ HashDoS attacks but not the most performant. Type aliases can make it easier","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":1284,"byte_end":1364,"line_start":32,"line_end":32,"column_start":1,"column_end":81}},{"value":"/ to use alternate hashers:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":1365,"byte_end":1394,"line_start":33,"line_end":33,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":1395,"byte_end":1398,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":1399,"byte_end":1406,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/ # extern crate fnv;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":1407,"byte_end":1430,"line_start":36,"line_end":36,"column_start":1,"column_end":24}},{"value":"/ # extern crate fxhash;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":1431,"byte_end":1457,"line_start":37,"line_end":37,"column_start":1,"column_end":27}},{"value":"/ use fnv::FnvBuildHasher;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":1458,"byte_end":1486,"line_start":38,"line_end":38,"column_start":1,"column_end":29}},{"value":"/ use fxhash::FxBuildHasher;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":1487,"byte_end":1517,"line_start":39,"line_end":39,"column_start":1,"column_end":31}},{"value":"/ use indexmap::{IndexMap, IndexSet};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":1518,"byte_end":1557,"line_start":40,"line_end":40,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":1558,"byte_end":1561,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ type FnvIndexMap<K, V> = IndexMap<K, V, FnvBuildHasher>;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":1562,"byte_end":1622,"line_start":42,"line_end":42,"column_start":1,"column_end":61}},{"value":"/ type FnvIndexSet<T> = IndexSet<T, FnvBuildHasher>;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":1623,"byte_end":1677,"line_start":43,"line_end":43,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":1678,"byte_end":1681,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ type FxIndexMap<K, V> = IndexMap<K, V, FxBuildHasher>;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":1682,"byte_end":1740,"line_start":45,"line_end":45,"column_start":1,"column_end":59}},{"value":"/ type FxIndexSet<T> = IndexSet<T, FxBuildHasher>;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":1741,"byte_end":1793,"line_start":46,"line_end":46,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":1794,"byte_end":1797,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ let std: IndexSet<i32> = (0..100).collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":1798,"byte_end":1846,"line_start":48,"line_end":48,"column_start":1,"column_end":49}},{"value":"/ let fnv: FnvIndexSet<i32> = (0..100).collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":1847,"byte_end":1898,"line_start":49,"line_end":49,"column_start":1,"column_end":52}},{"value":"/ let fx: FxIndexSet<i32> = (0..100).collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":1899,"byte_end":1948,"line_start":50,"line_end":50,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(std, fnv);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":1949,"byte_end":1974,"line_start":51,"line_end":51,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(std, fx);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":1975,"byte_end":1999,"line_start":52,"line_end":52,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":2000,"byte_end":2007,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":2008,"byte_end":2011,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ### Rust Version","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":2012,"byte_end":2032,"line_start":55,"line_end":55,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":2033,"byte_end":2036,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ This version of indexmap requires Rust 1.32 or later, or Rust 1.36+ for","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":2037,"byte_end":2112,"line_start":57,"line_end":57,"column_start":1,"column_end":76}},{"value":"/ using with `alloc` (without `std`), see below.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":2113,"byte_end":2163,"line_start":58,"line_end":58,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":2164,"byte_end":2167,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ The indexmap 1.x release series will use a carefully considered version","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":2168,"byte_end":2243,"line_start":60,"line_end":60,"column_start":1,"column_end":76}},{"value":"/ upgrade policy, where in a later 1.x version, we will raise the minimum","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":2244,"byte_end":2319,"line_start":61,"line_end":61,"column_start":1,"column_end":76}},{"value":"/ required Rust version.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":2320,"byte_end":2346,"line_start":62,"line_end":62,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":2347,"byte_end":2350,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ ## No Standard Library Targets","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":2351,"byte_end":2385,"line_start":64,"line_end":64,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":2386,"byte_end":2389,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ From Rust 1.36, this crate supports being built without `std`, requiring","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":2390,"byte_end":2466,"line_start":66,"line_end":66,"column_start":1,"column_end":77}},{"value":"/ `alloc` instead. This is enabled automatically when it is detected that","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":2467,"byte_end":2542,"line_start":67,"line_end":67,"column_start":1,"column_end":76}},{"value":"/ `std` is not available. There is no crate feature to enable/disable to","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":2543,"byte_end":2617,"line_start":68,"line_end":68,"column_start":1,"column_end":75}},{"value":"/ trigger this. It can be tested by building for a std-less target.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":2618,"byte_end":2687,"line_start":69,"line_end":69,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":2688,"byte_end":2691,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ - Creating maps and sets using [`new`][IndexMap::new] and","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":2692,"byte_end":2753,"line_start":71,"line_end":71,"column_start":1,"column_end":62}},{"value":"/ [`with_capacity`][IndexMap::with_capacity] is unavailable without `std`.  ","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":2754,"byte_end":2832,"line_start":72,"line_end":72,"column_start":1,"column_end":79}},{"value":"/   Use methods [`IndexMap::default`][def],","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":2833,"byte_end":2878,"line_start":73,"line_end":73,"column_start":1,"column_end":46}},{"value":"/   [`with_hasher`][IndexMap::with_hasher],","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":2879,"byte_end":2924,"line_start":74,"line_end":74,"column_start":1,"column_end":46}},{"value":"/   [`with_capacity_and_hasher`][IndexMap::with_capacity_and_hasher] instead.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":2925,"byte_end":3004,"line_start":75,"line_end":75,"column_start":1,"column_end":80}},{"value":"/   A no-std compatible hasher will be needed as well, for example","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":3005,"byte_end":3073,"line_start":76,"line_end":76,"column_start":1,"column_end":69}},{"value":"/   from the crate `twox-hash`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":3074,"byte_end":3107,"line_start":77,"line_end":77,"column_start":1,"column_end":34}},{"value":"/ - Macros [`indexmap!`] and [`indexset!`] are unavailable without `std`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":3108,"byte_end":3183,"line_start":78,"line_end":78,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":3184,"byte_end":3187,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ [def]: map/struct.IndexMap.html#impl-Default","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":3188,"byte_end":3236,"line_start":80,"line_end":80,"column_start":1,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":13},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/equivalent.rs","byte_start":9353,"byte_end":9363,"line_start":13,"line_end":13,"column_start":11,"column_end":21},"name":"Equivalent","qualname":"::equivalent::Equivalent","value":"Equivalent<K: ?Sized>","parent":null,"children":[{"krate":0,"index":15}],"decl_id":null,"docs":" Key equivalence trait.","sig":null,"attributes":[{"value":"/ Key equivalence trait.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/equivalent.rs","byte_start":8963,"byte_end":8989,"line_start":3,"line_end":3,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/equivalent.rs","byte_start":8990,"byte_end":8993,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ This trait allows hash table lookup to be customized.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/equivalent.rs","byte_start":8994,"byte_end":9051,"line_start":5,"line_end":5,"column_start":1,"column_end":58}},{"value":"/ It has one blanket implementation that uses the regular `Borrow` solution,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/equivalent.rs","byte_start":9052,"byte_end":9130,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ just like `HashMap` and `BTreeMap` do, so that you can pass `&str` to lookup","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/equivalent.rs","byte_start":9131,"byte_end":9211,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ into a map with `String` keys and so on.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/equivalent.rs","byte_start":9212,"byte_end":9256,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/equivalent.rs","byte_start":9257,"byte_end":9260,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Contract","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/equivalent.rs","byte_start":9261,"byte_end":9275,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/equivalent.rs","byte_start":9276,"byte_end":9279,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ The implementor **must** hash like `K`, if it is hashable.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/equivalent.rs","byte_start":9280,"byte_end":9342,"line_start":12,"line_end":12,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/equivalent.rs","byte_start":9451,"byte_end":9461,"line_start":15,"line_end":15,"column_start":8,"column_end":18},"name":"equivalent","qualname":"::equivalent::Equivalent::equivalent","value":"pub fn equivalent(&Self, &K) -> bool","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" Compare self to `key` and return `true` if they are equal.\n","sig":null,"attributes":[{"value":"/ Compare self to `key` and return `true` if they are equal.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/equivalent.rs","byte_start":9381,"byte_end":9443,"line_start":14,"line_end":14,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":34},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":9769,"byte_end":9782,"line_start":6,"line_end":6,"column_start":12,"column_end":25},"name":"PrivateMarker","qualname":"::mutable_keys::PrivateMarker","value":"PrivateMarker {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":35},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":10330,"byte_end":10341,"line_start":20,"line_end":20,"column_start":11,"column_end":22},"name":"MutableKeys","qualname":"::mutable_keys::MutableKeys","value":"MutableKeys","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42}],"decl_id":null,"docs":" Opt-in mutable access to keys.","sig":null,"attributes":[{"value":"/ Opt-in mutable access to keys.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":9787,"byte_end":9821,"line_start":8,"line_end":8,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":9822,"byte_end":9825,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ These methods expose `&mut K`, mutable references to the key as it is stored","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":9826,"byte_end":9906,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ in the map.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":9907,"byte_end":9922,"line_start":11,"line_end":11,"column_start":1,"column_end":16}},{"value":"/ You are allowed to modify the keys in the hashmap **if the modifcation","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":9923,"byte_end":9997,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ does not change the key’s hash and equality**.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":9998,"byte_end":10050,"line_start":13,"line_end":13,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":10051,"byte_end":10054,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ If keys are modified erronously, you can no longer look them up.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":10055,"byte_end":10123,"line_start":15,"line_end":15,"column_start":1,"column_end":69}},{"value":"/ This is sound (memory safe) but a logical error hazard (just like","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":10124,"byte_end":10193,"line_start":16,"line_end":16,"column_start":1,"column_end":70}},{"value":"/ implementing PartialEq, Eq, or Hash incorrectly would be).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":10194,"byte_end":10256,"line_start":17,"line_end":17,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":10257,"byte_end":10260,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ `use` this trait to enable its methods for `IndexMap`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":10261,"byte_end":10319,"line_start":19,"line_end":19,"column_start":1,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":36},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":10353,"byte_end":10356,"line_start":21,"line_end":21,"column_start":10,"column_end":13},"name":"Key","qualname":"::mutable_keys::MutableKeys::Key","value":"type Key;","parent":{"krate":0,"index":35},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":37},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":10367,"byte_end":10372,"line_start":22,"line_end":22,"column_start":10,"column_end":15},"name":"Value","qualname":"::mutable_keys::MutableKeys::Value","value":"type Value;","parent":{"krate":0,"index":35},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":10444,"byte_end":10457,"line_start":25,"line_end":25,"column_start":8,"column_end":21},"name":"get_full_mut2","qualname":"::mutable_keys::MutableKeys::get_full_mut2","value":"pub fn get_full_mut2<Q: ?Sized>(&mut Self, &Q)\n-> Option<(usize, &mut Self::Key, &mut Self::Value)> where Q: Hash +\nEquivalent<Self::Key>","parent":{"krate":0,"index":35},"children":[],"decl_id":null,"docs":" Return item index, mutable reference to key and value\n","sig":null,"attributes":[{"value":"/ Return item index, mutable reference to key and value","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":10379,"byte_end":10436,"line_start":24,"line_end":24,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":10893,"byte_end":10900,"line_start":39,"line_end":39,"column_start":8,"column_end":15},"name":"retain2","qualname":"::mutable_keys::MutableKeys::retain2","value":"pub fn retain2<F>(&mut Self, F) where\nF: FnMut(&mut Self::Key, &mut Self::Value) -> bool","parent":{"krate":0,"index":35},"children":[],"decl_id":null,"docs":" Scan through each key-value pair in the map and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[{"value":"/ Scan through each key-value pair in the map and keep those where the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":10621,"byte_end":10693,"line_start":32,"line_end":32,"column_start":5,"column_end":77}},{"value":"/ closure `keep` returns `true`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":10698,"byte_end":10732,"line_start":33,"line_end":33,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":10737,"byte_end":10740,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ The elements are visited in order, and remaining elements keep their","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":10745,"byte_end":10817,"line_start":35,"line_end":35,"column_start":5,"column_end":77}},{"value":"/ order.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":10822,"byte_end":10832,"line_start":36,"line_end":36,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":10837,"byte_end":10840,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":10845,"byte_end":10885,"line_start":38,"line_end":38,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":11192,"byte_end":11208,"line_start":46,"line_end":46,"column_start":8,"column_end":24},"name":"__private_marker","qualname":"::mutable_keys::MutableKeys::__private_marker","value":"pub fn __private_marker(&Self) -> PrivateMarker","parent":{"krate":0,"index":35},"children":[],"decl_id":null,"docs":" This method is not useful in itself – it is there to “seal” the trait\n for external implementation, so that we can add methods without\n causing breaking changes.\n","sig":null,"attributes":[{"value":"/ This method is not useful in itself – it is there to “seal” the trait","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":10999,"byte_end":11078,"line_start":43,"line_end":43,"column_start":5,"column_end":78}},{"value":"/ for external implementation, so that we can add methods without","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":11083,"byte_end":11150,"line_start":44,"line_end":44,"column_start":5,"column_end":72}},{"value":"/ causing breaking changes.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":11155,"byte_end":11184,"line_start":45,"line_end":45,"column_start":5,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":64},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"map","qualname":"::map","value":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":287},{"krate":0,"index":290},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":299},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":305},{"krate":0,"index":308},{"krate":0,"index":311},{"krate":0,"index":314},{"krate":0,"index":317},{"krate":0,"index":320},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":327},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":337},{"krate":0,"index":340},{"krate":0,"index":343},{"krate":0,"index":349},{"krate":0,"index":355},{"krate":0,"index":365},{"krate":0,"index":370},{"krate":0,"index":375},{"krate":0,"index":385},{"krate":0,"index":452},{"krate":0,"index":460},{"krate":0,"index":463},{"krate":0,"index":466},{"krate":0,"index":469},{"krate":0,"index":474},{"krate":0,"index":479},{"krate":0,"index":484},{"krate":0,"index":489},{"krate":0,"index":494},{"krate":0,"index":499},{"krate":0,"index":504},{"krate":0,"index":509},{"krate":0,"index":514},{"krate":0,"index":519},{"krate":0,"index":524},{"krate":0,"index":529},{"krate":0,"index":534},{"krate":0,"index":539},{"krate":0,"index":544},{"krate":0,"index":549},{"krate":0,"index":554},{"krate":0,"index":559},{"krate":0,"index":564},{"krate":0,"index":569},{"krate":0,"index":574},{"krate":0,"index":579},{"krate":0,"index":584},{"krate":0,"index":589},{"krate":0,"index":594},{"krate":0,"index":599},{"krate":0,"index":603},{"krate":0,"index":607},{"krate":0,"index":612},{"krate":0,"index":616},{"krate":0,"index":620},{"krate":0,"index":625},{"krate":0,"index":630},{"krate":0,"index":634},{"krate":0,"index":642},{"krate":0,"index":650},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":661},{"krate":0,"index":664},{"krate":0,"index":672},{"krate":0,"index":679},{"krate":0,"index":685},{"krate":0,"index":692},{"krate":0,"index":700},{"krate":0,"index":705},{"krate":0,"index":714}],"decl_id":null,"docs":" `IndexMap` is a hash table where the iteration order of the key-value\n pairs is independent of the hash values of the keys.\n","sig":null,"attributes":[{"value":"/ `IndexMap` is a hash table where the iteration order of the key-value","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":12098,"byte_end":12171,"line_start":1,"line_end":1,"column_start":1,"column_end":74}},{"value":"/ pairs is independent of the hash values of the keys.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":12172,"byte_end":12228,"line_start":2,"line_end":2,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":121},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":74869,"byte_end":74882,"line_start":196,"line_end":196,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::map::core::raw::OccupiedEntry","value":"OccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127}],"decl_id":null,"docs":" A view into an occupied entry in a `IndexMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `IndexMap`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":74597,"byte_end":74647,"line_start":190,"line_end":190,"column_start":1,"column_end":51}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":74648,"byte_end":74685,"line_start":191,"line_end":191,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":74686,"byte_end":74689,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":74690,"byte_end":74720,"line_start":193,"line_end":193,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":75298,"byte_end":75301,"line_start":208,"line_end":208,"column_start":12,"column_end":15},"name":"key","qualname":"<OccupiedEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":75353,"byte_end":75356,"line_start":212,"line_end":212,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"pub fn get(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":75436,"byte_end":75443,"line_start":216,"line_end":216,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":75855,"byte_end":75860,"line_start":230,"line_end":230,"column_start":12,"column_end":17},"name":"index","qualname":"<OccupiedEntry>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index of the key-value pair\n","sig":null,"attributes":[{"value":"/ Return the index of the key-value pair","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":75787,"byte_end":75829,"line_start":228,"line_end":228,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":75834,"byte_end":75843,"line_start":229,"line_end":229,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":75939,"byte_end":75947,"line_start":234,"line_end":234,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"pub fn into_mut(Self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":76408,"byte_end":76425,"line_start":246,"line_end":246,"column_start":12,"column_end":29},"name":"swap_remove_entry","qualname":"<OccupiedEntry>::swap_remove_entry","value":"pub fn swap_remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[{"value":"/ Remove and return the key, value pair stored in the map for this entry","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":76057,"byte_end":76131,"line_start":239,"line_end":239,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":76136,"byte_end":76139,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":76144,"byte_end":76216,"line_start":241,"line_end":241,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":76221,"byte_end":76284,"line_start":242,"line_end":242,"column_start":5,"column_end":68}},{"value":"/ the postion of what used to be the last element!**","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":76289,"byte_end":76343,"line_start":243,"line_end":243,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":76348,"byte_end":76351,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":76356,"byte_end":76396,"line_start":245,"line_end":245,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":77083,"byte_end":77101,"line_start":262,"line_end":262,"column_start":12,"column_end":30},"name":"shift_remove_entry","qualname":"<OccupiedEntry>::shift_remove_entry","value":"pub fn shift_remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[{"value":"/ Remove and return the key, value pair stored in the map for this entry","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":76737,"byte_end":76811,"line_start":255,"line_end":255,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":76816,"byte_end":76819,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":76824,"byte_end":76890,"line_start":257,"line_end":257,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":76895,"byte_end":76956,"line_start":258,"line_end":258,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":76961,"byte_end":77018,"line_start":259,"line_end":259,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":77023,"byte_end":77026,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":77031,"byte_end":77071,"line_start":261,"line_end":261,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":227},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":62328,"byte_end":62336,"line_start":233,"line_end":233,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::core::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry)","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" Existing slot with equivalent key.\n","sig":null,"attributes":[{"value":"/ Existing slot with equivalent key.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":62285,"byte_end":62323,"line_start":232,"line_end":232,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":230},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":62419,"byte_end":62425,"line_start":235,"line_end":235,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::core::Entry::Vacant","value":"Entry::Vacant(VacantEntry)","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" Vacant slot (no equivalent key in the map).\n","sig":null,"attributes":[{"value":"/ Vacant slot (no equivalent key in the map).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":62367,"byte_end":62414,"line_start":234,"line_end":234,"column_start":5,"column_end":52}}]},{"kind":"Enum","id":{"krate":0,"index":223},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":62255,"byte_end":62260,"line_start":231,"line_end":231,"column_start":10,"column_end":15},"name":"Entry","qualname":"::map::core::Entry","value":"pub enum Entry<'a, K: 'a, V: 'a> {\n    Occupied(OccupiedEntry),\n    Vacant(VacantEntry),\n}","parent":null,"children":[{"krate":0,"index":227},{"krate":0,"index":230}],"decl_id":null,"docs":" Entry for an existing key-value pair or a vacant location to\n insert one.\n","sig":null,"attributes":[{"value":"/ Entry for an existing key-value pair or a vacant location to","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":62165,"byte_end":62229,"line_start":229,"line_end":229,"column_start":1,"column_end":65}},{"value":"/ insert one.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":62230,"byte_end":62245,"line_start":230,"line_end":230,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":62552,"byte_end":62561,"line_start":240,"line_end":240,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"pub fn or_insert(Self, V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time (amortized average).\n","sig":null,"attributes":[{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":62490,"byte_end":62540,"line_start":239,"line_end":239,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":62814,"byte_end":62828,"line_start":248,"line_end":248,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"pub fn or_insert_with<F>(Self, F) -> &'a mut V where F: FnOnce() -> V","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time (amortized average).\n","sig":null,"attributes":[{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":62752,"byte_end":62802,"line_start":247,"line_end":247,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":63065,"byte_end":63068,"line_start":258,"line_end":258,"column_start":12,"column_end":15},"name":"key","qualname":"<Entry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":63320,"byte_end":63325,"line_start":266,"line_end":266,"column_start":12,"column_end":17},"name":"index","qualname":"<Entry>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index where the key-value pair exists or will be inserted.\n","sig":null,"attributes":[{"value":"/ Return the index where the key-value pair exists or will be inserted.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":63235,"byte_end":63308,"line_start":265,"line_end":265,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":63552,"byte_end":63562,"line_start":274,"line_end":274,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<Entry>::and_modify","value":"pub fn and_modify<F>(Self, F) -> Self where F: FnOnce(&mut V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Modifies the entry if it is occupied.\n","sig":null,"attributes":[{"value":"/ Modifies the entry if it is occupied.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":63499,"byte_end":63540,"line_start":273,"line_end":273,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":64074,"byte_end":64084,"line_start":291,"line_end":291,"column_start":12,"column_end":22},"name":"or_default","qualname":"<Entry>::or_default","value":"pub fn or_default(Self) -> &'a mut V where V: Default","parent":null,"children":[],"decl_id":null,"docs":" Inserts a default-constructed value in the entry if it is vacant and returns a mutable\n reference to it. Otherwise a mutable reference to an already existent value is returned.","sig":null,"attributes":[{"value":"/ Inserts a default-constructed value in the entry if it is vacant and returns a mutable","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":63812,"byte_end":63902,"line_start":287,"line_end":287,"column_start":5,"column_end":95}},{"value":"/ reference to it. Otherwise a mutable reference to an already existent value is returned.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":63907,"byte_end":63999,"line_start":288,"line_end":288,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":64004,"byte_end":64007,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":64012,"byte_end":64062,"line_start":290,"line_end":290,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":64893,"byte_end":64899,"line_start":316,"line_end":316,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"pub fn insert(&mut Self, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry to `value`, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry to `value`, and returns the entry's old value.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":64803,"byte_end":64881,"line_start":315,"line_end":315,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":65142,"byte_end":65148,"line_start":323,"line_end":323,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"pub fn remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[{"value":"/ Remove the key, value pair stored in the map for this entry, and return the value.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":64978,"byte_end":65064,"line_start":320,"line_end":320,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":65069,"byte_end":65072,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove()`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":65077,"byte_end":65130,"line_start":322,"line_end":322,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":65563,"byte_end":65574,"line_start":334,"line_end":334,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<OccupiedEntry>::swap_remove","value":"pub fn swap_remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[{"value":"/ Remove the key, value pair stored in the map for this entry, and return the value.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":65200,"byte_end":65286,"line_start":327,"line_end":327,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":65291,"byte_end":65294,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":65299,"byte_end":65371,"line_start":329,"line_end":329,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":65376,"byte_end":65439,"line_start":330,"line_end":330,"column_start":5,"column_end":68}},{"value":"/ the postion of what used to be the last element!**","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":65444,"byte_end":65498,"line_start":331,"line_end":331,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":65503,"byte_end":65506,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":65511,"byte_end":65551,"line_start":333,"line_end":333,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":65992,"byte_end":66004,"line_start":345,"line_end":345,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<OccupiedEntry>::shift_remove","value":"pub fn shift_remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[{"value":"/ Remove the key, value pair stored in the map for this entry, and return the value.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":65634,"byte_end":65720,"line_start":338,"line_end":338,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":65725,"byte_end":65728,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":65733,"byte_end":65799,"line_start":340,"line_end":340,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":65804,"byte_end":65865,"line_start":341,"line_end":341,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":65870,"byte_end":65927,"line_start":342,"line_end":342,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":65932,"byte_end":65935,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":65940,"byte_end":65980,"line_start":344,"line_end":344,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":66223,"byte_end":66235,"line_start":352,"line_end":352,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<OccupiedEntry>::remove_entry","value":"pub fn remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[{"value":"/ Remove and return the key, value pair stored in the map for this entry","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":66065,"byte_end":66139,"line_start":349,"line_end":349,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":66144,"byte_end":66147,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove_entry()`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":66152,"byte_end":66211,"line_start":351,"line_end":351,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":267},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":66736,"byte_end":66747,"line_start":370,"line_end":370,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::map::core::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273}],"decl_id":null,"docs":" A view into a vacant entry in a `IndexMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `IndexMap`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":66604,"byte_end":66651,"line_start":366,"line_end":366,"column_start":1,"column_end":48}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":66652,"byte_end":66689,"line_start":367,"line_end":367,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":66690,"byte_end":66693,"line_start":368,"line_end":368,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":66694,"byte_end":66724,"line_start":369,"line_end":369,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":66891,"byte_end":66894,"line_start":377,"line_end":377,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":66946,"byte_end":66954,"line_start":381,"line_end":381,"column_start":12,"column_end":20},"name":"into_key","qualname":"<VacantEntry>::into_key","value":"pub fn into_key(Self) -> K","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":67071,"byte_end":67076,"line_start":386,"line_end":386,"column_start":12,"column_end":17},"name":"index","qualname":"<VacantEntry>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index where the key-value pair will be inserted.\n","sig":null,"attributes":[{"value":"/ Return the index where the key-value pair will be inserted.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":66996,"byte_end":67059,"line_start":385,"line_end":385,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":67136,"byte_end":67142,"line_start":390,"line_end":390,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry>::insert","value":"pub fn insert(Self, V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":343},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":14206,"byte_end":14214,"line_start":75,"line_end":75,"column_start":12,"column_end":20},"name":"IndexMap","qualname":"::map::IndexMap","value":"IndexMap {  }","parent":null,"children":[{"krate":0,"index":347},{"krate":0,"index":348}],"decl_id":null,"docs":" A hash table where the iteration order of the key-value pairs is independent\n of the hash values of the keys.","sig":null,"attributes":[{"value":"/ A hash table where the iteration order of the key-value pairs is independent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":12770,"byte_end":12850,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ of the hash values of the keys.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":12851,"byte_end":12886,"line_start":34,"line_end":34,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":12887,"byte_end":12890,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ The interface is closely compatible with the standard `HashMap`, but also","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":12891,"byte_end":12968,"line_start":36,"line_end":36,"column_start":1,"column_end":78}},{"value":"/ has additional features.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":12969,"byte_end":12997,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":12998,"byte_end":13001,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ # Order","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":13002,"byte_end":13013,"line_start":39,"line_end":39,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":13014,"byte_end":13017,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ The key-value pairs have a consistent order that is determined by","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":13018,"byte_end":13087,"line_start":41,"line_end":41,"column_start":1,"column_end":70}},{"value":"/ the sequence of insertion and removal calls on the map. The order does","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":13088,"byte_end":13162,"line_start":42,"line_end":42,"column_start":1,"column_end":75}},{"value":"/ not depend on the keys or the hash function at all.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":13163,"byte_end":13218,"line_start":43,"line_end":43,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":13219,"byte_end":13222,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ All iterators traverse the map in *the order*.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":13223,"byte_end":13273,"line_start":45,"line_end":45,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":13274,"byte_end":13277,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ The insertion order is preserved, with **notable exceptions** like the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":13278,"byte_end":13352,"line_start":47,"line_end":47,"column_start":1,"column_end":75}},{"value":"/ `.remove()` or `.swap_remove()` methods. Methods such as `.sort_by()` of","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":13353,"byte_end":13429,"line_start":48,"line_end":48,"column_start":1,"column_end":77}},{"value":"/ course result in a new order, depending on the sorting order.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":13430,"byte_end":13495,"line_start":49,"line_end":49,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":13496,"byte_end":13499,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ # Indices","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":13500,"byte_end":13513,"line_start":51,"line_end":51,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":13514,"byte_end":13517,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ The key-value pairs are indexed in a compact range without holes in the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":13518,"byte_end":13593,"line_start":53,"line_end":53,"column_start":1,"column_end":76}},{"value":"/ range `0..self.len()`. For example, the method `.get_full` looks up the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":13594,"byte_end":13669,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/ index for a key, and the method `.get_index` looks up the key-value pair by","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":13670,"byte_end":13749,"line_start":55,"line_end":55,"column_start":1,"column_end":80}},{"value":"/ index.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":13750,"byte_end":13760,"line_start":56,"line_end":56,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":13761,"byte_end":13764,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":13765,"byte_end":13779,"line_start":58,"line_end":58,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":13780,"byte_end":13783,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":13784,"byte_end":13791,"line_start":60,"line_end":60,"column_start":1,"column_end":8}},{"value":"/ use indexmap::IndexMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":13792,"byte_end":13819,"line_start":61,"line_end":61,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":13820,"byte_end":13823,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ // count the frequency of each letter in a sentence.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":13824,"byte_end":13880,"line_start":63,"line_end":63,"column_start":1,"column_end":57}},{"value":"/ let mut letters = IndexMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":13881,"byte_end":13919,"line_start":64,"line_end":64,"column_start":1,"column_end":39}},{"value":"/ for ch in \"a short treatise on fungi\".chars() {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":13920,"byte_end":13971,"line_start":65,"line_end":65,"column_start":1,"column_end":52}},{"value":"/     *letters.entry(ch).or_insert(0) += 1;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":13972,"byte_end":14017,"line_start":66,"line_end":66,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":14018,"byte_end":14023,"line_start":67,"line_end":67,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":14024,"byte_end":14027,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(letters[&'s'], 2);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":14028,"byte_end":14061,"line_start":69,"line_end":69,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(letters[&'t'], 3);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":14062,"byte_end":14095,"line_start":70,"line_end":70,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(letters[&'u'], 1);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":14096,"byte_end":14129,"line_start":71,"line_end":71,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(letters.get(&'y'), None);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":14130,"byte_end":14170,"line_start":72,"line_end":72,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":14171,"byte_end":14178,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"cfg(has_std)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":14179,"byte_end":14194,"line_start":74,"line_end":74,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":15948,"byte_end":15951,"line_start":152,"line_end":152,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexMap<K, V>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map. (Does not allocate.)\n","sig":null,"attributes":[{"value":"/ Create a new map. (Does not allocate.)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":15880,"byte_end":15922,"line_start":150,"line_end":150,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":15927,"byte_end":15936,"line_start":151,"line_end":151,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":16178,"byte_end":16191,"line_start":161,"line_end":161,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<IndexMap<K, V>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with capacity for `n` key-value pairs. (Does not\n allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new map with capacity for `n` key-value pairs. (Does not","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":16006,"byte_end":16075,"line_start":156,"line_end":156,"column_start":5,"column_end":74}},{"value":"/ allocate if `n` is zero.)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":16080,"byte_end":16109,"line_start":157,"line_end":157,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":16114,"byte_end":16117,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":16122,"byte_end":16152,"line_start":159,"line_end":159,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":16157,"byte_end":16166,"line_start":160,"line_end":160,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":16489,"byte_end":16513,"line_start":172,"line_end":172,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<IndexMap<K, V, S>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self where S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with capacity for `n` key-value pairs. (Does not\n allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new map with capacity for `n` key-value pairs. (Does not","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":16317,"byte_end":16386,"line_start":167,"line_end":167,"column_start":5,"column_end":74}},{"value":"/ allocate if `n` is zero.)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":16391,"byte_end":16420,"line_start":168,"line_end":168,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":16425,"byte_end":16428,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":16433,"byte_end":16463,"line_start":170,"line_end":170,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":16468,"byte_end":16477,"line_start":171,"line_end":171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":16999,"byte_end":17002,"line_start":193,"line_end":193,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexMap<K, V, S>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of key-value pairs in the map.","sig":null,"attributes":[{"value":"/ Return the number of key-value pairs in the map.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":16878,"byte_end":16930,"line_start":189,"line_end":189,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":16935,"byte_end":16938,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":16943,"byte_end":16973,"line_start":191,"line_end":191,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":16978,"byte_end":16987,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":17174,"byte_end":17182,"line_start":201,"line_end":201,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexMap<K, V, S>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains no elements.","sig":null,"attributes":[{"value":"/ Returns true if the map contains no elements.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":17056,"byte_end":17105,"line_start":197,"line_end":197,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":17110,"byte_end":17113,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":17118,"byte_end":17148,"line_start":199,"line_end":199,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":17153,"byte_end":17162,"line_start":200,"line_end":200,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":17287,"byte_end":17298,"line_start":206,"line_end":206,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<IndexMap<K, V, S>>::with_hasher","value":"pub fn with_hasher(S) -> Self where S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with `hash_builder`\n","sig":null,"attributes":[{"value":"/ Create a new map with `hash_builder`","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":17235,"byte_end":17275,"line_start":205,"line_end":205,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":17493,"byte_end":17499,"line_start":214,"line_end":214,"column_start":12,"column_end":18},"name":"hasher","qualname":"<IndexMap<K, V, S>>::hasher","value":"pub fn hasher(&Self) -> &S where S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the map's `BuildHasher`.\n","sig":null,"attributes":[{"value":"/ Return a reference to the map's `BuildHasher`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":17431,"byte_end":17481,"line_start":213,"line_end":213,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":17633,"byte_end":17641,"line_start":222,"line_end":222,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexMap<K, V, S>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time.\n","sig":null,"attributes":[{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":17591,"byte_end":17621,"line_start":221,"line_end":221,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":17908,"byte_end":17913,"line_start":235,"line_end":235,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexMap<K, V, S>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all key-value pairs in the map, while preserving its capacity.","sig":null,"attributes":[{"value":"/ Remove all key-value pairs in the map, while preserving its capacity.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":17780,"byte_end":17853,"line_start":232,"line_end":232,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":17858,"byte_end":17861,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":17866,"byte_end":17896,"line_start":234,"line_end":234,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":18079,"byte_end":18086,"line_start":242,"line_end":242,"column_start":12,"column_end":19},"name":"reserve","qualname":"<IndexMap<K, V, S>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserve capacity for `additional` more key-value pairs.","sig":null,"attributes":[{"value":"/ Reserve capacity for `additional` more key-value pairs.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":17965,"byte_end":18024,"line_start":239,"line_end":239,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":18029,"byte_end":18032,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":18037,"byte_end":18067,"line_start":241,"line_end":241,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":18279,"byte_end":18292,"line_start":249,"line_end":249,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<IndexMap<K, V, S>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the capacity of the map as much as possible.","sig":null,"attributes":[{"value":"/ Shrink the capacity of the map as much as possible.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":18169,"byte_end":18224,"line_start":246,"line_end":246,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":18229,"byte_end":18232,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":18237,"byte_end":18267,"line_start":248,"line_end":248,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":19191,"byte_end":19197,"line_start":272,"line_end":272,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexMap<K, V, S>>::insert","value":"pub fn insert(&mut Self, K, V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Insert a key-value pair in the map.","sig":null,"attributes":[{"value":"/ Insert a key-value pair in the map.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":18539,"byte_end":18578,"line_start":259,"line_end":259,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":18583,"byte_end":18586,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ If an equivalent key already exists in the map: the key remains and","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":18591,"byte_end":18662,"line_start":261,"line_end":261,"column_start":5,"column_end":76}},{"value":"/ retains in its place in the order, its corresponding value is updated","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":18667,"byte_end":18740,"line_start":262,"line_end":262,"column_start":5,"column_end":78}},{"value":"/ with `value` and the older value is returned inside `Some(_)`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":18745,"byte_end":18811,"line_start":263,"line_end":263,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":18816,"byte_end":18819,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ If no equivalent key existed in the map: the new key-value pair is","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":18824,"byte_end":18894,"line_start":265,"line_end":265,"column_start":5,"column_end":75}},{"value":"/ inserted, last in order, and `None` is returned.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":18899,"byte_end":18951,"line_start":266,"line_end":266,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":18956,"byte_end":18959,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":18964,"byte_end":19014,"line_start":268,"line_end":268,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":19019,"byte_end":19022,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ See also [`entry`](#method.entry) if you you want to insert *or* modify","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":19027,"byte_end":19102,"line_start":270,"line_end":270,"column_start":5,"column_end":80}},{"value":"/ or if you need to get the index of the corresponding key-value pair.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":19107,"byte_end":19179,"line_start":271,"line_end":271,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":19983,"byte_end":19994,"line_start":289,"line_end":289,"column_start":12,"column_end":23},"name":"insert_full","qualname":"<IndexMap<K, V, S>>::insert_full","value":"pub fn insert_full(&mut Self, K, V) -> (usize, Option<V>)","parent":null,"children":[],"decl_id":null,"docs":" Insert a key-value pair in the map, and get their index.","sig":null,"attributes":[{"value":"/ Insert a key-value pair in the map, and get their index.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":19292,"byte_end":19352,"line_start":276,"line_end":276,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":19357,"byte_end":19360,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ If an equivalent key already exists in the map: the key remains and","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":19365,"byte_end":19436,"line_start":278,"line_end":278,"column_start":5,"column_end":76}},{"value":"/ retains in its place in the order, its corresponding value is updated","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":19441,"byte_end":19514,"line_start":279,"line_end":279,"column_start":5,"column_end":78}},{"value":"/ with `value` and the older value is returned inside `(index, Some(_))`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":19519,"byte_end":19594,"line_start":280,"line_end":280,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":19599,"byte_end":19602,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ If no equivalent key existed in the map: the new key-value pair is","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":19607,"byte_end":19677,"line_start":282,"line_end":282,"column_start":5,"column_end":75}},{"value":"/ inserted, last in order, and `(index, None)` is returned.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":19682,"byte_end":19743,"line_start":283,"line_end":283,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":19748,"byte_end":19751,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":19756,"byte_end":19806,"line_start":285,"line_end":285,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":19811,"byte_end":19814,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ See also [`entry`](#method.entry) if you you want to insert *or* modify","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":19819,"byte_end":19894,"line_start":287,"line_end":287,"column_start":5,"column_end":80}},{"value":"/ or if you need to get the index of the corresponding key-value pair.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":19899,"byte_end":19971,"line_start":288,"line_end":288,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":20326,"byte_end":20331,"line_start":298,"line_end":298,"column_start":12,"column_end":17},"name":"entry","qualname":"<IndexMap<K, V, S>>::entry","value":"pub fn entry(&mut Self, K) -> Entry<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Get the given key’s corresponding entry in the map for insertion and/or\n in-place manipulation.","sig":null,"attributes":[{"value":"/ Get the given key’s corresponding entry in the map for insertion and/or","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":20143,"byte_end":20220,"line_start":294,"line_end":294,"column_start":5,"column_end":80}},{"value":"/ in-place manipulation.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":20225,"byte_end":20251,"line_start":295,"line_end":295,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":20256,"byte_end":20259,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":20264,"byte_end":20314,"line_start":297,"line_end":297,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":20536,"byte_end":20540,"line_start":304,"line_end":304,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexMap<K, V, S>>::iter","value":"pub fn iter(&Self) -> Iter<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the key-value pairs of the map, in their order","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":20450,"byte_end":20524,"line_start":303,"line_end":303,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":20730,"byte_end":20738,"line_start":311,"line_end":311,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<IndexMap<K, V, S>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the key-value pairs of the map, in their order","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":20644,"byte_end":20718,"line_start":310,"line_end":310,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":20935,"byte_end":20939,"line_start":318,"line_end":318,"column_start":12,"column_end":16},"name":"keys","qualname":"<IndexMap<K, V, S>>::keys","value":"pub fn keys(&Self) -> Keys<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the keys of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the keys of the map, in their order","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":20860,"byte_end":20923,"line_start":317,"line_end":317,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":21120,"byte_end":21126,"line_start":325,"line_end":325,"column_start":12,"column_end":18},"name":"values","qualname":"<IndexMap<K, V, S>>::values","value":"pub fn values(&Self) -> Values<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the values of the map, in their order","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":21043,"byte_end":21108,"line_start":324,"line_end":324,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":21345,"byte_end":21355,"line_start":333,"line_end":333,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<IndexMap<K, V, S>>::values_mut","value":"pub fn values_mut(&mut Self) -> ValuesMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over mutable references to the the values of the map,\n in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over mutable references to the the values of the map,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":21234,"byte_end":21310,"line_start":331,"line_end":331,"column_start":5,"column_end":81}},{"value":"/ in their order","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":21315,"byte_end":21333,"line_start":332,"line_end":332,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":21608,"byte_end":21620,"line_start":342,"line_end":342,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<IndexMap<K, V, S>>::contains_key","value":"pub fn contains_key<Q: ?Sized>(&Self, &Q) -> bool where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if an equivalent to `key` exists in the map.","sig":null,"attributes":[{"value":"/ Return `true` if an equivalent to `key` exists in the map.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":21481,"byte_end":21543,"line_start":339,"line_end":339,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":21548,"byte_end":21551,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":21556,"byte_end":21596,"line_start":341,"line_end":341,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":21914,"byte_end":21917,"line_start":353,"line_end":353,"column_start":12,"column_end":15},"name":"get","qualname":"<IndexMap<K, V, S>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&V> where Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the value stored for `key`, if it is present,\n else `None`.","sig":null,"attributes":[{"value":"/ Return a reference to the value stored for `key`, if it is present,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":21757,"byte_end":21828,"line_start":349,"line_end":349,"column_start":5,"column_end":76}},{"value":"/ else `None`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":21833,"byte_end":21849,"line_start":350,"line_end":350,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":21854,"byte_end":21857,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":21862,"byte_end":21902,"line_start":352,"line_end":352,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":22356,"byte_end":22369,"line_start":369,"line_end":369,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<IndexMap<K, V, S>>::get_key_value","value":"pub fn get_key_value<Q: ?Sized>(&Self, &Q) -> Option<(&K, &V)> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return references to the key-value pair stored for `key`,\n if it is present, else `None`.","sig":null,"attributes":[{"value":"/ Return references to the key-value pair stored for `key`,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":22191,"byte_end":22252,"line_start":365,"line_end":365,"column_start":5,"column_end":66}},{"value":"/ if it is present, else `None`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":22257,"byte_end":22291,"line_start":366,"line_end":366,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":22296,"byte_end":22299,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":22304,"byte_end":22344,"line_start":368,"line_end":368,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":22711,"byte_end":22719,"line_start":382,"line_end":382,"column_start":12,"column_end":20},"name":"get_full","qualname":"<IndexMap<K, V, S>>::get_full","value":"pub fn get_full<Q: ?Sized>(&Self, &Q) -> Option<(usize, &K, &V)> where\nQ: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return item index, key and value\n","sig":null,"attributes":[{"value":"/ Return item index, key and value","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":22663,"byte_end":22699,"line_start":381,"line_end":381,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":23081,"byte_end":23093,"line_start":395,"line_end":395,"column_start":12,"column_end":24},"name":"get_index_of","qualname":"<IndexMap<K, V, S>>::get_index_of","value":"pub fn get_index_of<Q: ?Sized>(&Self, &Q) -> Option<usize> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return item index, if it exists in the map\n","sig":null,"attributes":[{"value":"/ Return item index, if it exists in the map","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":23023,"byte_end":23069,"line_start":394,"line_end":394,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":23363,"byte_end":23370,"line_start":407,"line_end":407,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<IndexMap<K, V, S>>::get_mut","value":"pub fn get_mut<Q: ?Sized>(&mut Self, &Q) -> Option<&mut V> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":23671,"byte_end":23683,"line_start":419,"line_end":419,"column_start":12,"column_end":24},"name":"get_full_mut","qualname":"<IndexMap<K, V, S>>::get_full_mut","value":"pub fn get_full_mut<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, &K, &mut V)>\nwhere Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":24715,"byte_end":24721,"line_start":454,"line_end":454,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexMap<K, V, S>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":24394,"byte_end":24454,"line_start":446,"line_end":446,"column_start":5,"column_end":65}},{"value":"/ its value.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":24459,"byte_end":24473,"line_start":447,"line_end":447,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":24478,"byte_end":24481,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove(key)`, if you need to","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":24486,"byte_end":24557,"line_start":449,"line_end":449,"column_start":5,"column_end":76}},{"value":"/ preserve the order of the keys in the map, use `.shift_remove(key)`","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":24562,"byte_end":24633,"line_start":450,"line_end":450,"column_start":5,"column_end":76}},{"value":"/ instead.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":24638,"byte_end":24650,"line_start":451,"line_end":451,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":24655,"byte_end":24658,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":24663,"byte_end":24703,"line_start":453,"line_end":453,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":25171,"byte_end":25183,"line_start":468,"line_end":468,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<IndexMap<K, V, S>>::remove_entry","value":"pub fn remove_entry<Q: ?Sized>(&mut Self, &Q) -> Option<(K, V)> where\nQ: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key-value pair equivalent to `key`.","sig":null,"attributes":[{"value":"/ Remove and return the key-value pair equivalent to `key`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":24856,"byte_end":24917,"line_start":461,"line_end":461,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":24922,"byte_end":24925,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove_entry(key)`, if you need to","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":24930,"byte_end":25007,"line_start":463,"line_end":463,"column_start":5,"column_end":82}},{"value":"/ preserve the order of the keys in the map, use `.shift_remove_entry(key)`","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":25012,"byte_end":25089,"line_start":464,"line_end":464,"column_start":5,"column_end":82}},{"value":"/ instead.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":25094,"byte_end":25106,"line_start":465,"line_end":465,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":25111,"byte_end":25114,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":25119,"byte_end":25159,"line_start":467,"line_end":467,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":25739,"byte_end":25750,"line_start":485,"line_end":485,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<IndexMap<K, V, S>>::swap_remove","value":"pub fn swap_remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":25329,"byte_end":25389,"line_start":475,"line_end":475,"column_start":5,"column_end":65}},{"value":"/ its value.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":25394,"byte_end":25408,"line_start":476,"line_end":476,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":25413,"byte_end":25416,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":25421,"byte_end":25493,"line_start":478,"line_end":478,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":25498,"byte_end":25561,"line_start":479,"line_end":479,"column_start":5,"column_end":68}},{"value":"/ the postion of what used to be the last element!**","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":25566,"byte_end":25620,"line_start":480,"line_end":480,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":25625,"byte_end":25628,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":25633,"byte_end":25674,"line_start":482,"line_end":482,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":25679,"byte_end":25682,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":25687,"byte_end":25727,"line_start":484,"line_end":484,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":26293,"byte_end":26310,"line_start":501,"line_end":501,"column_start":12,"column_end":29},"name":"swap_remove_entry","qualname":"<IndexMap<K, V, S>>::swap_remove_entry","value":"pub fn swap_remove_entry<Q: ?Sized>(&mut Self, &Q) -> Option<(K, V)> where\nQ: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key-value pair equivalent to `key`.","sig":null,"attributes":[{"value":"/ Remove and return the key-value pair equivalent to `key`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":25901,"byte_end":25962,"line_start":492,"line_end":492,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":25967,"byte_end":25970,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":25975,"byte_end":26047,"line_start":494,"line_end":494,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":26052,"byte_end":26115,"line_start":495,"line_end":495,"column_start":5,"column_end":68}},{"value":"/ the postion of what used to be the last element!**","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":26120,"byte_end":26174,"line_start":496,"line_end":496,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":26179,"byte_end":26182,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":26187,"byte_end":26228,"line_start":498,"line_end":498,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":26233,"byte_end":26236,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":26241,"byte_end":26281,"line_start":500,"line_end":500,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":26980,"byte_end":26996,"line_start":521,"line_end":521,"column_start":12,"column_end":28},"name":"swap_remove_full","qualname":"<IndexMap<K, V, S>>::swap_remove_full","value":"pub fn swap_remove_full<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, K, V)>\nwhere Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return it and\n the index it had.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return it and","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":26556,"byte_end":26623,"line_start":511,"line_end":511,"column_start":5,"column_end":72}},{"value":"/ the index it had.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":26628,"byte_end":26649,"line_start":512,"line_end":512,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":26654,"byte_end":26657,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":26662,"byte_end":26734,"line_start":514,"line_end":514,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":26739,"byte_end":26802,"line_start":515,"line_end":515,"column_start":5,"column_end":68}},{"value":"/ the postion of what used to be the last element!**","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":26807,"byte_end":26861,"line_start":516,"line_end":516,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":26866,"byte_end":26869,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":26874,"byte_end":26915,"line_start":518,"line_end":518,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":26920,"byte_end":26923,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":26928,"byte_end":26968,"line_start":520,"line_end":520,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":27663,"byte_end":27675,"line_start":542,"line_end":542,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<IndexMap<K, V, S>>::shift_remove","value":"pub fn shift_remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":27258,"byte_end":27318,"line_start":532,"line_end":532,"column_start":5,"column_end":65}},{"value":"/ its value.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":27323,"byte_end":27337,"line_start":533,"line_end":533,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":27342,"byte_end":27345,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":27350,"byte_end":27416,"line_start":535,"line_end":535,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":27421,"byte_end":27482,"line_start":536,"line_end":536,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":27487,"byte_end":27544,"line_start":537,"line_end":537,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":27549,"byte_end":27552,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":27557,"byte_end":27598,"line_start":539,"line_end":539,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":27603,"byte_end":27606,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":27611,"byte_end":27651,"line_start":541,"line_end":541,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":28214,"byte_end":28232,"line_start":558,"line_end":558,"column_start":12,"column_end":30},"name":"shift_remove_entry","qualname":"<IndexMap<K, V, S>>::shift_remove_entry","value":"pub fn shift_remove_entry<Q: ?Sized>(&mut Self, &Q) -> Option<(K, V)> where\nQ: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key-value pair equivalent to `key`.","sig":null,"attributes":[{"value":"/ Remove and return the key-value pair equivalent to `key`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":27827,"byte_end":27888,"line_start":549,"line_end":549,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":27893,"byte_end":27896,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":27901,"byte_end":27967,"line_start":551,"line_end":551,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":27972,"byte_end":28033,"line_start":552,"line_end":552,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":28038,"byte_end":28095,"line_start":553,"line_end":553,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":28100,"byte_end":28103,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":28108,"byte_end":28149,"line_start":555,"line_end":555,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":28154,"byte_end":28157,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":28162,"byte_end":28202,"line_start":557,"line_end":557,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":28898,"byte_end":28915,"line_start":578,"line_end":578,"column_start":12,"column_end":29},"name":"shift_remove_full","qualname":"<IndexMap<K, V, S>>::shift_remove_full","value":"pub fn shift_remove_full<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, K, V)>\nwhere Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return it and\n the index it had.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return it and","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":28479,"byte_end":28546,"line_start":568,"line_end":568,"column_start":5,"column_end":72}},{"value":"/ the index it had.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":28551,"byte_end":28572,"line_start":569,"line_end":569,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":28577,"byte_end":28580,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":28585,"byte_end":28651,"line_start":571,"line_end":571,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":28656,"byte_end":28717,"line_start":572,"line_end":572,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":28722,"byte_end":28779,"line_start":573,"line_end":573,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":28784,"byte_end":28787,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":28792,"byte_end":28833,"line_start":575,"line_end":575,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":28838,"byte_end":28841,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":28846,"byte_end":28886,"line_start":577,"line_end":577,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":29277,"byte_end":29280,"line_start":592,"line_end":592,"column_start":12,"column_end":15},"name":"pop","qualname":"<IndexMap<K, V, S>>::pop","value":"pub fn pop(&mut Self) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the last key-value pair","sig":null,"attributes":[{"value":"/ Remove the last key-value pair","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":29178,"byte_end":29212,"line_start":589,"line_end":589,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":29217,"byte_end":29220,"line_start":590,"line_end":590,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":29225,"byte_end":29265,"line_start":591,"line_end":591,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":29623,"byte_end":29629,"line_start":603,"line_end":603,"column_start":12,"column_end":18},"name":"retain","qualname":"<IndexMap<K, V, S>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&K, &mut V) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Scan through each key-value pair in the map and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[{"value":"/ Scan through each key-value pair in the map and keep those where the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":29347,"byte_end":29419,"line_start":596,"line_end":596,"column_start":5,"column_end":77}},{"value":"/ closure `keep` returns `true`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":29424,"byte_end":29458,"line_start":597,"line_end":597,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":29463,"byte_end":29466,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ The elements are visited in order, and remaining elements keep their","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":29471,"byte_end":29543,"line_start":599,"line_end":599,"column_start":5,"column_end":77}},{"value":"/ order.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":29548,"byte_end":29558,"line_start":600,"line_end":600,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":29563,"byte_end":29566,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":29571,"byte_end":29611,"line_start":602,"line_end":602,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":30067,"byte_end":30076,"line_start":620,"line_end":620,"column_start":12,"column_end":21},"name":"sort_keys","qualname":"<IndexMap<K, V, S>>::sort_keys","value":"pub fn sort_keys(&mut Self) where K: Ord","parent":null,"children":[],"decl_id":null,"docs":" Sort the map’s key-value pairs by the default ordering of the keys.","sig":null,"attributes":[{"value":"/ Sort the map’s key-value pairs by the default ordering of the keys.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":29939,"byte_end":30012,"line_start":617,"line_end":617,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":30017,"byte_end":30020,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ See `sort_by` for details.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":30025,"byte_end":30055,"line_start":619,"line_end":619,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":30662,"byte_end":30669,"line_start":637,"line_end":637,"column_start":12,"column_end":19},"name":"sort_by","qualname":"<IndexMap<K, V, S>>::sort_by","value":"pub fn sort_by<F>(&mut Self, F) where F: FnMut(&K, &V, &K, &V) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the map’s key-value pairs in place using the comparison\n function `compare`.","sig":null,"attributes":[{"value":"/ Sort the map’s key-value pairs in place using the comparison","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":30243,"byte_end":30309,"line_start":629,"line_end":629,"column_start":5,"column_end":69}},{"value":"/ function `compare`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":30314,"byte_end":30337,"line_start":630,"line_end":630,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":30342,"byte_end":30345,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ The comparison function receives two key and value pairs to compare (you","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":30350,"byte_end":30426,"line_start":632,"line_end":632,"column_start":5,"column_end":81}},{"value":"/ can sort by keys or values or their combination as needed).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":30431,"byte_end":30494,"line_start":633,"line_end":633,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":30499,"byte_end":30502,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n log n + c)** time and **O(n)** space where *n* is","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":30507,"byte_end":30578,"line_start":635,"line_end":635,"column_start":5,"column_end":76}},{"value":"/ the length of the map and *c* the capacity. The sort is stable.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":30583,"byte_end":30650,"line_start":636,"line_end":636,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":31072,"byte_end":31081,"line_start":650,"line_end":650,"column_start":12,"column_end":21},"name":"sorted_by","qualname":"<IndexMap<K, V, S>>::sorted_by","value":"pub fn sorted_by<F>(Self, F) -> IntoIter<K, V> where F: FnMut(&K, &V, &K, &V)\n-> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the key-value pairs of the map and return a by value iterator of\n the key-value pairs with the result.","sig":null,"attributes":[{"value":"/ Sort the key-value pairs of the map and return a by value iterator of","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":30906,"byte_end":30979,"line_start":646,"line_end":646,"column_start":5,"column_end":78}},{"value":"/ the key-value pairs with the result.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":30984,"byte_end":31024,"line_start":647,"line_end":647,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":31029,"byte_end":31032,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ The sort is stable.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":31037,"byte_end":31060,"line_start":649,"line_end":649,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":31524,"byte_end":31531,"line_start":664,"line_end":664,"column_start":12,"column_end":19},"name":"reverse","qualname":"<IndexMap<K, V, S>>::reverse","value":"pub fn reverse(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reverses the order of the map’s key-value pairs in place.","sig":null,"attributes":[{"value":"/ Reverses the order of the map’s key-value pairs in place.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":31387,"byte_end":31450,"line_start":661,"line_end":661,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":31455,"byte_end":31458,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time and **O(1)** space.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":31463,"byte_end":31512,"line_start":663,"line_end":663,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":31719,"byte_end":31724,"line_start":670,"line_end":670,"column_start":12,"column_end":17},"name":"drain","qualname":"<IndexMap<K, V, S>>::drain","value":"pub fn drain(&mut Self, RangeFull) -> Drain<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Clears the `IndexMap`, returning all key-value pairs as a drain iterator.\n Keeps the allocated memory for reuse.\n","sig":null,"attributes":[{"value":"/ Clears the `IndexMap`, returning all key-value pairs as a drain iterator.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":31584,"byte_end":31661,"line_start":668,"line_end":668,"column_start":5,"column_end":82}},{"value":"/ Keeps the allocated memory for reuse.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":31666,"byte_end":31707,"line_start":669,"line_end":669,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":32034,"byte_end":32043,"line_start":683,"line_end":683,"column_start":12,"column_end":21},"name":"get_index","qualname":"<IndexMap<K, V, S>>::get_index","value":"pub fn get_index(&Self, usize) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Get a key-value pair by index","sig":null,"attributes":[{"value":"/ Get a key-value pair by index","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":31886,"byte_end":31919,"line_start":678,"line_end":678,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":31924,"byte_end":31927,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":31932,"byte_end":31979,"line_start":680,"line_end":680,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":31984,"byte_end":31987,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":31992,"byte_end":32022,"line_start":682,"line_end":682,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":32301,"byte_end":32314,"line_start":692,"line_end":692,"column_start":12,"column_end":25},"name":"get_index_mut","qualname":"<IndexMap<K, V, S>>::get_index_mut","value":"pub fn get_index_mut(&mut Self, usize) -> Option<(&mut K, &mut V)>","parent":null,"children":[],"decl_id":null,"docs":" Get a key-value pair by index","sig":null,"attributes":[{"value":"/ Get a key-value pair by index","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":32153,"byte_end":32186,"line_start":687,"line_end":687,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":32191,"byte_end":32194,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":32199,"byte_end":32246,"line_start":689,"line_end":689,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":32251,"byte_end":32254,"line_start":690,"line_end":690,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":32259,"byte_end":32289,"line_start":691,"line_end":691,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":32819,"byte_end":32836,"line_start":705,"line_end":705,"column_start":12,"column_end":29},"name":"swap_remove_index","qualname":"<IndexMap<K, V, S>>::swap_remove_index","value":"pub fn swap_remove_index(&mut Self, usize) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair by index","sig":null,"attributes":[{"value":"/ Remove the key-value pair by index","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":32444,"byte_end":32482,"line_start":696,"line_end":696,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":32487,"byte_end":32490,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":32495,"byte_end":32542,"line_start":698,"line_end":698,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":32547,"byte_end":32550,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":32555,"byte_end":32627,"line_start":700,"line_end":700,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":32632,"byte_end":32695,"line_start":701,"line_end":701,"column_start":5,"column_end":68}},{"value":"/ the postion of what used to be the last element!**","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":32700,"byte_end":32754,"line_start":702,"line_end":702,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":32759,"byte_end":32762,"line_start":703,"line_end":703,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":32767,"byte_end":32807,"line_start":704,"line_end":704,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":459},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":33306,"byte_end":33324,"line_start":718,"line_end":718,"column_start":12,"column_end":30},"name":"shift_remove_index","qualname":"<IndexMap<K, V, S>>::shift_remove_index","value":"pub fn shift_remove_index(&mut Self, usize) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair by index","sig":null,"attributes":[{"value":"/ Remove the key-value pair by index","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":32936,"byte_end":32974,"line_start":709,"line_end":709,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":32979,"byte_end":32982,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":32987,"byte_end":33034,"line_start":711,"line_end":711,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":33039,"byte_end":33042,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":33047,"byte_end":33113,"line_start":713,"line_end":713,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":33118,"byte_end":33179,"line_start":714,"line_end":714,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":33184,"byte_end":33241,"line_start":715,"line_end":715,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":33246,"byte_end":33249,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":33254,"byte_end":33294,"line_start":717,"line_end":717,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":469},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":33796,"byte_end":33800,"line_start":734,"line_end":734,"column_start":12,"column_end":16},"name":"Keys","qualname":"::map::Keys","value":"Keys {  }","parent":null,"children":[{"krate":0,"index":473}],"decl_id":null,"docs":" An iterator over the keys of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An iterator over the keys of a `IndexMap`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":33539,"byte_end":33585,"line_start":727,"line_end":727,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":33586,"byte_end":33589,"line_start":728,"line_end":728,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`keys`] method on [`IndexMap`]. See its","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":33590,"byte_end":33666,"line_start":729,"line_end":729,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":33667,"byte_end":33694,"line_start":730,"line_end":730,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":33695,"byte_end":33698,"line_start":731,"line_end":731,"column_start":1,"column_end":4}},{"value":"/ [`keys`]: struct.IndexMap.html#method.keys","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":33699,"byte_end":33745,"line_start":732,"line_end":732,"column_start":1,"column_end":47}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":33746,"byte_end":33784,"line_start":733,"line_end":733,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":499},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":34919,"byte_end":34925,"line_start":778,"line_end":778,"column_start":12,"column_end":18},"name":"Values","qualname":"::map::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":503}],"decl_id":null,"docs":" An iterator over the values of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An iterator over the values of a `IndexMap`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":34654,"byte_end":34702,"line_start":771,"line_end":771,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":34703,"byte_end":34706,"line_start":772,"line_end":772,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values`] method on [`IndexMap`]. See its","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":34707,"byte_end":34785,"line_start":773,"line_end":773,"column_start":1,"column_end":79}},{"value":"/ documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":34786,"byte_end":34813,"line_start":774,"line_end":774,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":34814,"byte_end":34817,"line_start":775,"line_end":775,"column_start":1,"column_end":4}},{"value":"/ [`values`]: struct.IndexMap.html#method.values","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":34818,"byte_end":34868,"line_start":776,"line_end":776,"column_start":1,"column_end":51}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":34869,"byte_end":34907,"line_start":777,"line_end":777,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":529},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":36075,"byte_end":36084,"line_start":822,"line_end":822,"column_start":12,"column_end":21},"name":"ValuesMut","qualname":"::map::ValuesMut","value":"ValuesMut {  }","parent":null,"children":[{"krate":0,"index":533}],"decl_id":null,"docs":" A mutable iterator over the values of a `IndexMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the values of a `IndexMap`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":35791,"byte_end":35846,"line_start":815,"line_end":815,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":35847,"byte_end":35850,"line_start":816,"line_end":816,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values_mut`] method on [`IndexMap`]. See its","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":35851,"byte_end":35933,"line_start":817,"line_end":817,"column_start":1,"column_end":83}},{"value":"/ documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":35934,"byte_end":35961,"line_start":818,"line_end":818,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":35962,"byte_end":35965,"line_start":819,"line_end":819,"column_start":1,"column_end":4}},{"value":"/ [`values_mut`]: struct.IndexMap.html#method.values_mut","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":35966,"byte_end":36024,"line_start":820,"line_end":820,"column_start":1,"column_end":59}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":36025,"byte_end":36063,"line_start":821,"line_end":821,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":549},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":36829,"byte_end":36833,"line_start":851,"line_end":851,"column_start":12,"column_end":16},"name":"Iter","qualname":"::map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":553}],"decl_id":null,"docs":" An iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An iterator over the entries of a `IndexMap`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":36569,"byte_end":36618,"line_start":844,"line_end":844,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":36619,"byte_end":36622,"line_start":845,"line_end":845,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`IndexMap`]. See its","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":36623,"byte_end":36699,"line_start":846,"line_end":846,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":36700,"byte_end":36727,"line_start":847,"line_end":847,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":36728,"byte_end":36731,"line_start":848,"line_end":848,"column_start":1,"column_end":4}},{"value":"/ [`iter`]: struct.IndexMap.html#method.iter","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":36732,"byte_end":36778,"line_start":849,"line_end":849,"column_start":1,"column_end":47}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":36779,"byte_end":36817,"line_start":850,"line_end":850,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":579},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":37975,"byte_end":37982,"line_start":895,"line_end":895,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":583}],"decl_id":null,"docs":" A mutable iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the entries of a `IndexMap`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":37696,"byte_end":37752,"line_start":888,"line_end":888,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":37753,"byte_end":37756,"line_start":889,"line_end":889,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter_mut`] method on [`IndexMap`]. See its","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":37757,"byte_end":37837,"line_start":890,"line_end":890,"column_start":1,"column_end":81}},{"value":"/ documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":37838,"byte_end":37865,"line_start":891,"line_end":891,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":37866,"byte_end":37869,"line_start":892,"line_end":892,"column_start":1,"column_end":4}},{"value":"/ [`iter_mut`]: struct.IndexMap.html#method.iter_mut","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":37870,"byte_end":37924,"line_start":893,"line_end":893,"column_start":1,"column_end":55}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":37925,"byte_end":37963,"line_start":894,"line_end":894,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":599},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":38787,"byte_end":38795,"line_start":924,"line_end":924,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":602}],"decl_id":null,"docs":" An owning iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the entries of a `IndexMap`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":38466,"byte_end":38522,"line_start":917,"line_end":917,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":38523,"byte_end":38526,"line_start":918,"line_end":918,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`IndexMap`]","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":38527,"byte_end":38599,"line_start":919,"line_end":919,"column_start":1,"column_end":73}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":38600,"byte_end":38675,"line_start":920,"line_end":920,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":38676,"byte_end":38679,"line_start":921,"line_end":921,"column_start":1,"column_end":4}},{"value":"/ [`into_iter`]: struct.IndexMap.html#method.into_iter","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":38680,"byte_end":38736,"line_start":922,"line_end":922,"column_start":1,"column_end":57}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":38737,"byte_end":38775,"line_start":923,"line_end":923,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":620},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":39766,"byte_end":39771,"line_start":960,"line_end":960,"column_start":12,"column_end":17},"name":"Drain","qualname":"::map::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":624}],"decl_id":null,"docs":" A draining iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ A draining iterator over the entries of a `IndexMap`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":39495,"byte_end":39552,"line_start":953,"line_end":953,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":39553,"byte_end":39556,"line_start":954,"line_end":954,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`IndexMap`]. See its","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":39557,"byte_end":39634,"line_start":955,"line_end":955,"column_start":1,"column_end":78}},{"value":"/ documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":39635,"byte_end":39662,"line_start":956,"line_end":956,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":39663,"byte_end":39666,"line_start":957,"line_end":957,"column_start":1,"column_end":4}},{"value":"/ [`drain`]: struct.IndexMap.html#method.drain","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":39667,"byte_end":39715,"line_start":958,"line_end":958,"column_start":1,"column_end":49}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":39716,"byte_end":39754,"line_start":959,"line_end":959,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":718},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"set","qualname":"::set","value":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","parent":null,"children":[{"krate":0,"index":719},{"krate":0,"index":722},{"krate":0,"index":725},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":739},{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":749},{"krate":0,"index":752},{"krate":0,"index":755},{"krate":0,"index":758},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":768},{"krate":0,"index":771},{"krate":0,"index":774},{"krate":0,"index":776},{"krate":0,"index":780},{"krate":0,"index":785},{"krate":0,"index":794},{"krate":0,"index":798},{"krate":0,"index":802},{"krate":0,"index":811},{"krate":0,"index":879},{"krate":0,"index":888},{"krate":0,"index":891},{"krate":0,"index":894},{"krate":0,"index":897},{"krate":0,"index":900},{"krate":0,"index":903},{"krate":0,"index":907},{"krate":0,"index":911},{"krate":0,"index":915},{"krate":0,"index":919},{"krate":0,"index":923},{"krate":0,"index":927},{"krate":0,"index":931},{"krate":0,"index":935},{"krate":0,"index":938},{"krate":0,"index":945},{"krate":0,"index":951},{"krate":0,"index":957},{"krate":0,"index":963},{"krate":0,"index":969},{"krate":0,"index":973},{"krate":0,"index":978},{"krate":0,"index":981},{"krate":0,"index":993},{"krate":0,"index":999},{"krate":0,"index":1006},{"krate":0,"index":1011},{"krate":0,"index":1016},{"krate":0,"index":1021},{"krate":0,"index":1027},{"krate":0,"index":1034},{"krate":0,"index":1039},{"krate":0,"index":1044},{"krate":0,"index":1049},{"krate":0,"index":1055},{"krate":0,"index":1066},{"krate":0,"index":1072},{"krate":0,"index":1078},{"krate":0,"index":1084},{"krate":0,"index":1089},{"krate":0,"index":1099},{"krate":0,"index":1104},{"krate":0,"index":1109},{"krate":0,"index":1114},{"krate":0,"index":1122},{"krate":0,"index":1130},{"krate":0,"index":1138}],"decl_id":null,"docs":" A hash set implemented using `IndexMap`\n","sig":null,"attributes":[{"value":"/ A hash set implemented using `IndexMap`","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":77412,"byte_end":77455,"line_start":1,"line_end":1,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":776},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":79519,"byte_end":79527,"line_start":67,"line_end":67,"column_start":12,"column_end":20},"name":"IndexSet","qualname":"::set::IndexSet","value":"IndexSet {  }","parent":null,"children":[{"krate":0,"index":779}],"decl_id":null,"docs":" A hash set where the iteration order of the values is independent of their\n hash values.","sig":null,"attributes":[{"value":"/ A hash set where the iteration order of the values is independent of their","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":77913,"byte_end":77991,"line_start":25,"line_end":25,"column_start":1,"column_end":79}},{"value":"/ hash values.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":77992,"byte_end":78008,"line_start":26,"line_end":26,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":78009,"byte_end":78012,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ The interface is closely compatible with the standard `HashSet`, but also","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":78013,"byte_end":78090,"line_start":28,"line_end":28,"column_start":1,"column_end":78}},{"value":"/ has additional features.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":78091,"byte_end":78119,"line_start":29,"line_end":29,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":78120,"byte_end":78123,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Order","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":78124,"byte_end":78135,"line_start":31,"line_end":31,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":78136,"byte_end":78139,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ The values have a consistent order that is determined by the sequence of","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":78140,"byte_end":78216,"line_start":33,"line_end":33,"column_start":1,"column_end":77}},{"value":"/ insertion and removal calls on the set. The order does not depend on the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":78217,"byte_end":78293,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"/ values or the hash function at all. Note that insertion order and value","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":78294,"byte_end":78369,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/ are not affected if a re-insertion is attempted once an element is","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":78370,"byte_end":78440,"line_start":36,"line_end":36,"column_start":1,"column_end":71}},{"value":"/ already present.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":78441,"byte_end":78461,"line_start":37,"line_end":37,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":78462,"byte_end":78465,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ All iterators traverse the set *in order*.  Set operation iterators like","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":78466,"byte_end":78542,"line_start":39,"line_end":39,"column_start":1,"column_end":77}},{"value":"/ `union` produce a concatenated order, as do their matching \"bitwise\"","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":78543,"byte_end":78615,"line_start":40,"line_end":40,"column_start":1,"column_end":73}},{"value":"/ operators.  See their documentation for specifics.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":78616,"byte_end":78670,"line_start":41,"line_end":41,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":78671,"byte_end":78674,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ The insertion order is preserved, with **notable exceptions** like the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":78675,"byte_end":78749,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ `.remove()` or `.swap_remove()` methods. Methods such as `.sort_by()` of","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":78750,"byte_end":78826,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/ course result in a new order, depending on the sorting order.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":78827,"byte_end":78892,"line_start":45,"line_end":45,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":78893,"byte_end":78896,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Indices","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":78897,"byte_end":78910,"line_start":47,"line_end":47,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":78911,"byte_end":78914,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ The values are indexed in a compact range without holes in the range","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":78915,"byte_end":78987,"line_start":49,"line_end":49,"column_start":1,"column_end":73}},{"value":"/ `0..self.len()`. For example, the method `.get_full` looks up the index for","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":78988,"byte_end":79067,"line_start":50,"line_end":50,"column_start":1,"column_end":80}},{"value":"/ a value, and the method `.get_index` looks up the value by index.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":79068,"byte_end":79137,"line_start":51,"line_end":51,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":79138,"byte_end":79141,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":79142,"byte_end":79156,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":79157,"byte_end":79160,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":79161,"byte_end":79168,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/ use indexmap::IndexSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":79169,"byte_end":79196,"line_start":56,"line_end":56,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":79197,"byte_end":79200,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ // Collects which letters appear in a sentence.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":79201,"byte_end":79252,"line_start":58,"line_end":58,"column_start":1,"column_end":52}},{"value":"/ let letters: IndexSet<_> = \"a short treatise on fungi\".chars().collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":79253,"byte_end":79330,"line_start":59,"line_end":59,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":79331,"byte_end":79334,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ assert!(letters.contains(&'s'));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":79335,"byte_end":79371,"line_start":61,"line_end":61,"column_start":1,"column_end":37}},{"value":"/ assert!(letters.contains(&'t'));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":79372,"byte_end":79408,"line_start":62,"line_end":62,"column_start":1,"column_end":37}},{"value":"/ assert!(letters.contains(&'u'));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":79409,"byte_end":79445,"line_start":63,"line_end":63,"column_start":1,"column_end":37}},{"value":"/ assert!(!letters.contains(&'y'));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":79446,"byte_end":79483,"line_start":64,"line_end":64,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":79484,"byte_end":79491,"line_start":65,"line_end":65,"column_start":1,"column_end":8}},{"value":"cfg(has_std)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":79492,"byte_end":79507,"line_start":66,"line_end":66,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":80977,"byte_end":80980,"line_start":135,"line_end":135,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexSet<T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set. (Does not allocate.)\n","sig":null,"attributes":[{"value":"/ Create a new set. (Does not allocate.)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":80923,"byte_end":80965,"line_start":134,"line_end":134,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":801},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":81218,"byte_end":81231,"line_start":145,"line_end":145,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<IndexSet<T>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with capacity for `n` elements.\n (Does not allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new set with capacity for `n` elements.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":81067,"byte_end":81119,"line_start":141,"line_end":141,"column_start":5,"column_end":57}},{"value":"/ (Does not allocate if `n` is zero.)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":81124,"byte_end":81163,"line_start":142,"line_end":142,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":81168,"byte_end":81171,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":81176,"byte_end":81206,"line_start":144,"line_end":144,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":805},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":81518,"byte_end":81542,"line_start":157,"line_end":157,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<IndexSet<T, S>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self where S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with capacity for `n` elements.\n (Does not allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new set with capacity for `n` elements.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":81367,"byte_end":81419,"line_start":153,"line_end":153,"column_start":5,"column_end":57}},{"value":"/ (Does not allocate if `n` is zero.)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":81424,"byte_end":81463,"line_start":154,"line_end":154,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":81468,"byte_end":81471,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":81476,"byte_end":81506,"line_start":156,"line_end":156,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":81828,"byte_end":81831,"line_start":169,"line_end":169,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexSet<T, S>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of elements in the set.","sig":null,"attributes":[{"value":"/ Return the number of elements in the set.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":81728,"byte_end":81773,"line_start":166,"line_end":166,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":81778,"byte_end":81781,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":81786,"byte_end":81816,"line_start":168,"line_end":168,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":81988,"byte_end":81996,"line_start":176,"line_end":176,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexSet<T, S>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the set contains no elements.","sig":null,"attributes":[{"value":"/ Returns true if the set contains no elements.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":81884,"byte_end":81933,"line_start":173,"line_end":173,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":81938,"byte_end":81941,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":81946,"byte_end":81976,"line_start":175,"line_end":175,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":82105,"byte_end":82116,"line_start":181,"line_end":181,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<IndexSet<T, S>>::with_hasher","value":"pub fn with_hasher(S) -> Self where S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with `hash_builder`\n","sig":null,"attributes":[{"value":"/ Create a new set with `hash_builder`","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":82053,"byte_end":82093,"line_start":180,"line_end":180,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":82338,"byte_end":82344,"line_start":191,"line_end":191,"column_start":12,"column_end":18},"name":"hasher","qualname":"<IndexSet<T, S>>::hasher","value":"pub fn hasher(&Self) -> &S where S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the set's `BuildHasher`.\n","sig":null,"attributes":[{"value":"/ Return a reference to the set's `BuildHasher`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":82276,"byte_end":82326,"line_start":190,"line_end":190,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":810},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":82477,"byte_end":82485,"line_start":199,"line_end":199,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexSet<T, S>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time.\n","sig":null,"attributes":[{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":82435,"byte_end":82465,"line_start":198,"line_end":198,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":82738,"byte_end":82743,"line_start":212,"line_end":212,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexSet<T, S>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all elements in the set, while preserving its capacity.","sig":null,"attributes":[{"value":"/ Remove all elements in the set, while preserving its capacity.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":82617,"byte_end":82683,"line_start":209,"line_end":209,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":82688,"byte_end":82691,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":82696,"byte_end":82726,"line_start":211,"line_end":211,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":815},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":82899,"byte_end":82906,"line_start":219,"line_end":219,"column_start":12,"column_end":19},"name":"reserve","qualname":"<IndexSet<T, S>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserve capacity for `additional` more values.","sig":null,"attributes":[{"value":"/ Reserve capacity for `additional` more values.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":82794,"byte_end":82844,"line_start":216,"line_end":216,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":82849,"byte_end":82852,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":82857,"byte_end":82887,"line_start":218,"line_end":218,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":816},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":83098,"byte_end":83111,"line_start":226,"line_end":226,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<IndexSet<T, S>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the capacity of the set as much as possible.","sig":null,"attributes":[{"value":"/ Shrink the capacity of the set as much as possible.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":82988,"byte_end":83043,"line_start":223,"line_end":223,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":83048,"byte_end":83051,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":83056,"byte_end":83086,"line_start":225,"line_end":225,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":817},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":83522,"byte_end":83528,"line_start":238,"line_end":238,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexSet<T, S>>::insert","value":"pub fn insert(&mut Self, T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Insert the value into the set.","sig":null,"attributes":[{"value":"/ Insert the value into the set.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":83170,"byte_end":83204,"line_start":230,"line_end":230,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":83209,"byte_end":83212,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ If an equivalent item already exists in the set, it returns","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":83217,"byte_end":83280,"line_start":232,"line_end":232,"column_start":5,"column_end":68}},{"value":"/ `false` leaving the original value in the set and without","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":83285,"byte_end":83346,"line_start":233,"line_end":233,"column_start":5,"column_end":66}},{"value":"/ altering its insertion order. Otherwise, it inserts the new","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":83351,"byte_end":83414,"line_start":234,"line_end":234,"column_start":5,"column_end":68}},{"value":"/ item and returns `true`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":83419,"byte_end":83447,"line_start":235,"line_end":235,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":83452,"byte_end":83455,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":83460,"byte_end":83510,"line_start":237,"line_end":237,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":84066,"byte_end":84077,"line_start":251,"line_end":251,"column_start":12,"column_end":23},"name":"insert_full","qualname":"<IndexSet<T, S>>::insert_full","value":"pub fn insert_full(&mut Self, T) -> (usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Insert the value into the set, and get its index.","sig":null,"attributes":[{"value":"/ Insert the value into the set, and get its index.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":83616,"byte_end":83669,"line_start":242,"line_end":242,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":83674,"byte_end":83677,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ If an equivalent item already exists in the set, it returns","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":83682,"byte_end":83745,"line_start":244,"line_end":244,"column_start":5,"column_end":68}},{"value":"/ the index of the existing item and `false`, leaving the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":83750,"byte_end":83809,"line_start":245,"line_end":245,"column_start":5,"column_end":64}},{"value":"/ original value in the set and without altering its insertion","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":83814,"byte_end":83878,"line_start":246,"line_end":246,"column_start":5,"column_end":69}},{"value":"/ order. Otherwise, it inserts the new item and returns the index","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":83883,"byte_end":83950,"line_start":247,"line_end":247,"column_start":5,"column_end":72}},{"value":"/ of the inserted item and `true`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":83955,"byte_end":83991,"line_start":248,"line_end":248,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":83996,"byte_end":83999,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":84004,"byte_end":84054,"line_start":250,"line_end":250,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":84476,"byte_end":84480,"line_start":265,"line_end":265,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexSet<T, S>>::iter","value":"pub fn iter(&Self) -> Iter<, T>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the set, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the values of the set, in their order","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":84399,"byte_end":84464,"line_start":264,"line_end":264,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":821},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":84745,"byte_end":84755,"line_start":274,"line_end":274,"column_start":12,"column_end":22},"name":"difference","qualname":"<IndexSet<T, S>>::difference","value":"pub fn difference<'a, S2>(&'a Self, &'a IndexSet<T, S2>) -> Difference where\nS2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in `self` but not `other`.","sig":null,"attributes":[{"value":"/ Return an iterator over the values that are in `self` but not `other`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":84577,"byte_end":84651,"line_start":271,"line_end":271,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":84656,"byte_end":84659,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ Values are produced in the same order that they appear in `self`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":84664,"byte_end":84733,"line_start":273,"line_end":273,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":85204,"byte_end":85224,"line_start":289,"line_end":289,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<IndexSet<T, S>>::symmetric_difference","value":"pub fn symmetric_difference<'a, S2>(&'a Self, &'a IndexSet<T, S2>)\n-> SymmetricDifference where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in `self` or `other`,\n but not in both.","sig":null,"attributes":[{"value":"/ Return an iterator over the values that are in `self` or `other`,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":84960,"byte_end":85029,"line_start":284,"line_end":284,"column_start":5,"column_end":74}},{"value":"/ but not in both.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":85034,"byte_end":85054,"line_start":285,"line_end":285,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":85059,"byte_end":85062,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ Values from `self` are produced in their original order, followed by","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":85067,"byte_end":85139,"line_start":287,"line_end":287,"column_start":5,"column_end":77}},{"value":"/ values from `other` in their original order.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":85144,"byte_end":85192,"line_start":288,"line_end":288,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":827},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":85664,"byte_end":85676,"line_start":304,"line_end":304,"column_start":12,"column_end":24},"name":"intersection","qualname":"<IndexSet<T, S>>::intersection","value":"pub fn intersection<'a, S2>(&'a Self, &'a IndexSet<T, S2>) -> Intersection\nwhere S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in both `self` and `other`.","sig":null,"attributes":[{"value":"/ Return an iterator over the values that are in both `self` and `other`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":85495,"byte_end":85570,"line_start":301,"line_end":301,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":85575,"byte_end":85578,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ Values are produced in the same order that they appear in `self`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":85583,"byte_end":85652,"line_start":303,"line_end":303,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":830},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":86118,"byte_end":86123,"line_start":318,"line_end":318,"column_start":12,"column_end":17},"name":"union","qualname":"<IndexSet<T, S>>::union","value":"pub fn union<'a, S2>(&'a Self, &'a IndexSet<T, S2>) -> Union where\nS2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over all values that are in `self` or `other`.","sig":null,"attributes":[{"value":"/ Return an iterator over all values that are in `self` or `other`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":85885,"byte_end":85954,"line_start":314,"line_end":314,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":85959,"byte_end":85962,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ Values from `self` are produced in their original order, followed by","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":85967,"byte_end":86039,"line_start":316,"line_end":316,"column_start":5,"column_end":77}},{"value":"/ values that are unique to `other` in their original order.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":86044,"byte_end":86106,"line_start":317,"line_end":317,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":833},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":86457,"byte_end":86465,"line_start":330,"line_end":330,"column_start":12,"column_end":20},"name":"contains","qualname":"<IndexSet<T, S>>::contains","value":"pub fn contains<Q: ?Sized>(&Self, &Q) -> bool where Q: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if an equivalent to `value` exists in the set.","sig":null,"attributes":[{"value":"/ Return `true` if an equivalent to `value` exists in the set.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":86328,"byte_end":86392,"line_start":327,"line_end":327,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":86397,"byte_end":86400,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":86405,"byte_end":86445,"line_start":329,"line_end":329,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":835},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":86758,"byte_end":86761,"line_start":341,"line_end":341,"column_start":12,"column_end":15},"name":"get","qualname":"<IndexSet<T, S>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&T> where Q: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the value stored in the set, if it is present,\n else `None`.","sig":null,"attributes":[{"value":"/ Return a reference to the value stored in the set, if it is present,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":86600,"byte_end":86672,"line_start":337,"line_end":337,"column_start":5,"column_end":77}},{"value":"/ else `None`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":86677,"byte_end":86693,"line_start":338,"line_end":338,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":86698,"byte_end":86701,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":86706,"byte_end":86746,"line_start":340,"line_end":340,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":86964,"byte_end":86972,"line_start":349,"line_end":349,"column_start":12,"column_end":20},"name":"get_full","qualname":"<IndexSet<T, S>>::get_full","value":"pub fn get_full<Q: ?Sized>(&Self, &Q) -> Option<(usize, &T)> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return item index and value\n","sig":null,"attributes":[{"value":"/ Return item index and value","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":86921,"byte_end":86952,"line_start":348,"line_end":348,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":841},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":87202,"byte_end":87214,"line_start":357,"line_end":357,"column_start":12,"column_end":24},"name":"get_index_of","qualname":"<IndexSet<T, S>>::get_index_of","value":"pub fn get_index_of<Q: ?Sized>(&Self, &Q) -> Option<usize> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return item index, if it exists in the set\n","sig":null,"attributes":[{"value":"/ Return item index, if it exists in the set","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":87144,"byte_end":87190,"line_start":356,"line_end":356,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":87557,"byte_end":87564,"line_start":368,"line_end":368,"column_start":12,"column_end":19},"name":"replace","qualname":"<IndexSet<T, S>>::replace","value":"pub fn replace(&mut Self, T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set, replacing the existing value, if any, that is\n equal to the given one. Returns the replaced value.","sig":null,"attributes":[{"value":"/ Adds a value to the set, replacing the existing value, if any, that is","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":87358,"byte_end":87432,"line_start":364,"line_end":364,"column_start":5,"column_end":79}},{"value":"/ equal to the given one. Returns the replaced value.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":87437,"byte_end":87492,"line_start":365,"line_end":365,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":87497,"byte_end":87500,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":87505,"byte_end":87545,"line_start":367,"line_end":367,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":845},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":88140,"byte_end":88146,"line_start":386,"line_end":386,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexSet<T, S>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> bool where Q: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[{"value":"/ Remove the value from the set, and return `true` if it was present.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":87837,"byte_end":87908,"line_start":380,"line_end":380,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":87913,"byte_end":87916,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove(value)`, if you want","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":87921,"byte_end":87991,"line_start":382,"line_end":382,"column_start":5,"column_end":75}},{"value":"/ to preserve the order of the values in the set, use `.shift_remove(value)`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":87996,"byte_end":88075,"line_start":383,"line_end":383,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":88080,"byte_end":88083,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":88088,"byte_end":88128,"line_start":385,"line_end":385,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":847},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":88691,"byte_end":88702,"line_start":402,"line_end":402,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<IndexSet<T, S>>::swap_remove","value":"pub fn swap_remove<Q: ?Sized>(&mut Self, &Q) -> bool where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[{"value":"/ Remove the value from the set, and return `true` if it was present.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":88280,"byte_end":88351,"line_start":393,"line_end":393,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":88356,"byte_end":88359,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":88364,"byte_end":88437,"line_start":395,"line_end":395,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":88442,"byte_end":88505,"line_start":396,"line_end":396,"column_start":5,"column_end":68}},{"value":"/ the postion of what used to be the last element!**","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":88510,"byte_end":88564,"line_start":397,"line_end":397,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":88569,"byte_end":88572,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ Return `false` if `value` was not in the set.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":88577,"byte_end":88626,"line_start":399,"line_end":399,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":88631,"byte_end":88634,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":88639,"byte_end":88679,"line_start":401,"line_end":401,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":849},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":89256,"byte_end":89268,"line_start":418,"line_end":418,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<IndexSet<T, S>>::shift_remove","value":"pub fn shift_remove<Q: ?Sized>(&mut Self, &Q) -> bool where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[{"value":"/ Remove the value from the set, and return `true` if it was present.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":88850,"byte_end":88921,"line_start":409,"line_end":409,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":88926,"byte_end":88929,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":88934,"byte_end":89001,"line_start":411,"line_end":411,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":89006,"byte_end":89067,"line_start":412,"line_end":412,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":89072,"byte_end":89129,"line_start":413,"line_end":413,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":89134,"byte_end":89137,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ Return `false` if `value` was not in the set.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":89142,"byte_end":89191,"line_start":415,"line_end":415,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":89196,"byte_end":89199,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":89204,"byte_end":89244,"line_start":417,"line_end":417,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":851},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":89754,"byte_end":89758,"line_start":433,"line_end":433,"column_start":12,"column_end":16},"name":"take","qualname":"<IndexSet<T, S>>::take","value":"pub fn take<Q: ?Sized>(&mut Self, &Q) -> Option<T> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":89417,"byte_end":89491,"line_start":425,"line_end":425,"column_start":5,"column_end":79}},{"value":"/ given one.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":89496,"byte_end":89510,"line_start":426,"line_end":426,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":89515,"byte_end":89518,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_take(value)`, if you need to","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":89523,"byte_end":89594,"line_start":428,"line_end":428,"column_start":5,"column_end":76}},{"value":"/ preserve the order of the values in the set, use `.shift_take(value)`","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":89599,"byte_end":89672,"line_start":429,"line_end":429,"column_start":5,"column_end":78}},{"value":"/ instead.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":89677,"byte_end":89689,"line_start":430,"line_end":430,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":89694,"byte_end":89697,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":89702,"byte_end":89742,"line_start":432,"line_end":432,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":853},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":90327,"byte_end":90336,"line_start":450,"line_end":450,"column_start":12,"column_end":21},"name":"swap_take","qualname":"<IndexSet<T, S>>::swap_take","value":"pub fn swap_take<Q: ?Sized>(&mut Self, &Q) -> Option<T> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":89895,"byte_end":89969,"line_start":440,"line_end":440,"column_start":5,"column_end":79}},{"value":"/ given one.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":89974,"byte_end":89988,"line_start":441,"line_end":441,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":89993,"byte_end":89996,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":90001,"byte_end":90074,"line_start":443,"line_end":443,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":90079,"byte_end":90142,"line_start":444,"line_end":444,"column_start":5,"column_end":68}},{"value":"/ the postion of what used to be the last element!**","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":90147,"byte_end":90201,"line_start":445,"line_end":445,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":90206,"byte_end":90209,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":90214,"byte_end":90262,"line_start":447,"line_end":447,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":90267,"byte_end":90270,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":90275,"byte_end":90315,"line_start":449,"line_end":449,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":856},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":90929,"byte_end":90939,"line_start":467,"line_end":467,"column_start":12,"column_end":22},"name":"shift_take","qualname":"<IndexSet<T, S>>::shift_take","value":"pub fn shift_take<Q: ?Sized>(&mut Self, &Q) -> Option<T> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":90502,"byte_end":90576,"line_start":457,"line_end":457,"column_start":5,"column_end":79}},{"value":"/ given one.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":90581,"byte_end":90595,"line_start":458,"line_end":458,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":90600,"byte_end":90603,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":90608,"byte_end":90675,"line_start":460,"line_end":460,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":90680,"byte_end":90741,"line_start":461,"line_end":461,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":90746,"byte_end":90803,"line_start":462,"line_end":462,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":90808,"byte_end":90811,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":90816,"byte_end":90864,"line_start":464,"line_end":464,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":90869,"byte_end":90872,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":90877,"byte_end":90917,"line_start":466,"line_end":466,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":91457,"byte_end":91473,"line_start":481,"line_end":481,"column_start":12,"column_end":28},"name":"swap_remove_full","qualname":"<IndexSet<T, S>>::swap_remove_full","value":"pub fn swap_remove_full<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, T)> where\nQ: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set return it and the index it had.","sig":null,"attributes":[{"value":"/ Remove the value from the set return it and the index it had.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":91106,"byte_end":91171,"line_start":474,"line_end":474,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":91176,"byte_end":91179,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":91184,"byte_end":91257,"line_start":476,"line_end":476,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":91262,"byte_end":91325,"line_start":477,"line_end":477,"column_start":5,"column_end":68}},{"value":"/ the postion of what used to be the last element!**","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":91330,"byte_end":91384,"line_start":478,"line_end":478,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":91389,"byte_end":91392,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":91397,"byte_end":91445,"line_start":480,"line_end":480,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":92001,"byte_end":92018,"line_start":495,"line_end":495,"column_start":12,"column_end":29},"name":"shift_remove_full","qualname":"<IndexSet<T, S>>::shift_remove_full","value":"pub fn shift_remove_full<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, T)> where\nQ: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set return it and the index it had.","sig":null,"attributes":[{"value":"/ Remove the value from the set return it and the index it had.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":91655,"byte_end":91720,"line_start":488,"line_end":488,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":91725,"byte_end":91728,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":91733,"byte_end":91800,"line_start":490,"line_end":490,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":91805,"byte_end":91866,"line_start":491,"line_end":491,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":91871,"byte_end":91928,"line_start":492,"line_end":492,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":91933,"byte_end":91936,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":91941,"byte_end":91989,"line_start":494,"line_end":494,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":865},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":92291,"byte_end":92294,"line_start":505,"line_end":505,"column_start":12,"column_end":15},"name":"pop","qualname":"<IndexSet<T, S>>::pop","value":"pub fn pop(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the last value","sig":null,"attributes":[{"value":"/ Remove the last value","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":92201,"byte_end":92226,"line_start":502,"line_end":502,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":92231,"byte_end":92234,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":92239,"byte_end":92279,"line_start":504,"line_end":504,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":92639,"byte_end":92645,"line_start":516,"line_end":516,"column_start":12,"column_end":18},"name":"retain","qualname":"<IndexSet<T, S>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Scan through each value in the set and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[{"value":"/ Scan through each value in the set and keep those where the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":92372,"byte_end":92435,"line_start":509,"line_end":509,"column_start":5,"column_end":68}},{"value":"/ closure `keep` returns `true`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":92440,"byte_end":92474,"line_start":510,"line_end":510,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":92479,"byte_end":92482,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ The elements are visited in order, and remaining elements keep their","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":92487,"byte_end":92559,"line_start":512,"line_end":512,"column_start":5,"column_end":77}},{"value":"/ order.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":92564,"byte_end":92574,"line_start":513,"line_end":513,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":92579,"byte_end":92582,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":92587,"byte_end":92627,"line_start":515,"line_end":515,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":92890,"byte_end":92894,"line_start":526,"line_end":526,"column_start":12,"column_end":16},"name":"sort","qualname":"<IndexSet<T, S>>::sort","value":"pub fn sort(&mut Self) where T: Ord","parent":null,"children":[],"decl_id":null,"docs":" Sort the set’s values by their default ordering.","sig":null,"attributes":[{"value":"/ Sort the set’s values by their default ordering.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":92781,"byte_end":92835,"line_start":523,"line_end":523,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":92840,"byte_end":92843,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ See `sort_by` for details.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":92848,"byte_end":92878,"line_start":525,"line_end":525,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":93155,"byte_end":93162,"line_start":536,"line_end":536,"column_start":12,"column_end":19},"name":"sort_by","qualname":"<IndexSet<T, S>>::sort_by","value":"pub fn sort_by<F>(&mut Self, F) where F: FnMut(&T, &T) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the set’s values in place using the comparison function `compare`.","sig":null,"attributes":[{"value":"/ Sort the set’s values in place using the comparison function `compare`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":92978,"byte_end":93055,"line_start":533,"line_end":533,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":93060,"byte_end":93063,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n log n)** time and **O(n)** space. The sort is stable.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":93068,"byte_end":93143,"line_start":535,"line_end":535,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":93465,"byte_end":93474,"line_start":547,"line_end":547,"column_start":12,"column_end":21},"name":"sorted_by","qualname":"<IndexSet<T, S>>::sorted_by","value":"pub fn sorted_by<F>(Self, F) -> IntoIter<T> where F: FnMut(&T, &T) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the values of the set and return a by value iterator of\n the values with the result.","sig":null,"attributes":[{"value":"/ Sort the values of the set and return a by value iterator of","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":93317,"byte_end":93381,"line_start":543,"line_end":543,"column_start":5,"column_end":69}},{"value":"/ the values with the result.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":93386,"byte_end":93417,"line_start":544,"line_end":544,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":93422,"byte_end":93425,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ The sort is stable.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":93430,"byte_end":93453,"line_start":546,"line_end":546,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":877},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":93809,"byte_end":93816,"line_start":559,"line_end":559,"column_start":12,"column_end":19},"name":"reverse","qualname":"<IndexSet<T, S>>::reverse","value":"pub fn reverse(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reverses the order of the set’s values in place.","sig":null,"attributes":[{"value":"/ Reverses the order of the set’s values in place.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":93681,"byte_end":93735,"line_start":556,"line_end":556,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":93740,"byte_end":93743,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time and **O(1)** space.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":93748,"byte_end":93797,"line_start":558,"line_end":558,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":878},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":93994,"byte_end":93999,"line_start":565,"line_end":565,"column_start":12,"column_end":17},"name":"drain","qualname":"<IndexSet<T, S>>::drain","value":"pub fn drain(&mut Self, RangeFull) -> Drain<, T>","parent":null,"children":[],"decl_id":null,"docs":" Clears the `IndexSet`, returning all values as a drain iterator.\n Keeps the allocated memory for reuse.\n","sig":null,"attributes":[{"value":"/ Clears the `IndexSet`, returning all values as a drain iterator.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":93868,"byte_end":93936,"line_start":563,"line_end":563,"column_start":5,"column_end":73}},{"value":"/ Keeps the allocated memory for reuse.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":93941,"byte_end":93982,"line_start":564,"line_end":564,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":882},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":94295,"byte_end":94304,"line_start":578,"line_end":578,"column_start":12,"column_end":21},"name":"get_index","qualname":"<IndexSet<T, S>>::get_index","value":"pub fn get_index(&Self, usize) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get a value by index","sig":null,"attributes":[{"value":"/ Get a value by index","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":94156,"byte_end":94180,"line_start":573,"line_end":573,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":94185,"byte_end":94188,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":94193,"byte_end":94240,"line_start":575,"line_end":575,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":94245,"byte_end":94248,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":94253,"byte_end":94283,"line_start":577,"line_end":577,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":94781,"byte_end":94798,"line_start":591,"line_end":591,"column_start":12,"column_end":29},"name":"swap_remove_index","qualname":"<IndexSet<T, S>>::swap_remove_index","value":"pub fn swap_remove_index(&mut Self, usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair by index","sig":null,"attributes":[{"value":"/ Remove the key-value pair by index","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":94405,"byte_end":94443,"line_start":582,"line_end":582,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":94448,"byte_end":94451,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":94456,"byte_end":94503,"line_start":584,"line_end":584,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":94508,"byte_end":94511,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":94516,"byte_end":94589,"line_start":586,"line_end":586,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":94594,"byte_end":94657,"line_start":587,"line_end":587,"column_start":5,"column_end":68}},{"value":"/ the postion of what used to be the last element!**","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":94662,"byte_end":94716,"line_start":588,"line_end":588,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":94721,"byte_end":94724,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":94729,"byte_end":94769,"line_start":590,"line_end":590,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":886},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":95280,"byte_end":95298,"line_start":604,"line_end":604,"column_start":12,"column_end":30},"name":"shift_remove_index","qualname":"<IndexSet<T, S>>::shift_remove_index","value":"pub fn shift_remove_index(&mut Self, usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair by index","sig":null,"attributes":[{"value":"/ Remove the key-value pair by index","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":94909,"byte_end":94947,"line_start":595,"line_end":595,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":94952,"byte_end":94955,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":94960,"byte_end":95007,"line_start":597,"line_end":597,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":95012,"byte_end":95015,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":95020,"byte_end":95087,"line_start":599,"line_end":599,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":95092,"byte_end":95153,"line_start":600,"line_end":600,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":95158,"byte_end":95215,"line_start":601,"line_end":601,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":95220,"byte_end":95223,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":95228,"byte_end":95268,"line_start":603,"line_end":603,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":888},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":95727,"byte_end":95735,"line_start":616,"line_end":616,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":890}],"decl_id":null,"docs":" An owning iterator over the items of a `IndexSet`.","sig":null,"attributes":[{"value":"/ An owning iterator over the items of a `IndexSet`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":95408,"byte_end":95462,"line_start":609,"line_end":609,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":95463,"byte_end":95466,"line_start":610,"line_end":610,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`IndexSet`]","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":95467,"byte_end":95539,"line_start":611,"line_end":611,"column_start":1,"column_end":73}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":95540,"byte_end":95615,"line_start":612,"line_end":612,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":95616,"byte_end":95619,"line_start":613,"line_end":613,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":95620,"byte_end":95658,"line_start":614,"line_end":614,"column_start":1,"column_end":39}},{"value":"/ [`into_iter`]: struct.IndexSet.html#method.into_iter","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":95659,"byte_end":95715,"line_start":615,"line_end":615,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":903},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":96624,"byte_end":96628,"line_start":652,"line_end":652,"column_start":12,"column_end":16},"name":"Iter","qualname":"::set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":906}],"decl_id":null,"docs":" An iterator over the items of a `IndexSet`.","sig":null,"attributes":[{"value":"/ An iterator over the items of a `IndexSet`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":96366,"byte_end":96413,"line_start":645,"line_end":645,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":96414,"byte_end":96417,"line_start":646,"line_end":646,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`IndexSet`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":96418,"byte_end":96486,"line_start":647,"line_end":647,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":96487,"byte_end":96522,"line_start":648,"line_end":648,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":96523,"byte_end":96526,"line_start":649,"line_end":649,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":96527,"byte_end":96565,"line_start":650,"line_end":650,"column_start":1,"column_end":39}},{"value":"/ [`iter`]: struct.IndexSet.html#method.iter","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":96566,"byte_end":96612,"line_start":651,"line_end":651,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":927},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":97642,"byte_end":97647,"line_start":695,"line_end":695,"column_start":12,"column_end":17},"name":"Drain","qualname":"::set::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":930}],"decl_id":null,"docs":" A draining iterator over the items of a `IndexSet`.","sig":null,"attributes":[{"value":"/ A draining iterator over the items of a `IndexSet`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":97373,"byte_end":97428,"line_start":688,"line_end":688,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":97429,"byte_end":97432,"line_start":689,"line_end":689,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`IndexSet`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":97433,"byte_end":97502,"line_start":690,"line_end":690,"column_start":1,"column_end":70}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":97503,"byte_end":97538,"line_start":691,"line_end":691,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":97539,"byte_end":97542,"line_start":692,"line_end":692,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":97543,"byte_end":97581,"line_start":693,"line_end":693,"column_start":1,"column_end":39}},{"value":"/ [`drain`]: struct.IndexSet.html#method.drain","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":97582,"byte_end":97630,"line_start":694,"line_end":694,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":984},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":99959,"byte_end":99970,"line_start":808,"line_end":808,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<IndexSet<T, S>>::is_disjoint","value":"pub fn is_disjoint<S2>(&Self, &IndexSet<T, S2>) -> bool where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has no elements in common with `other`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":99879,"byte_end":99947,"line_start":807,"line_end":807,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":988},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":100345,"byte_end":100354,"line_start":820,"line_end":820,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<IndexSet<T, S>>::is_subset","value":"pub fn is_subset<S2>(&Self, &IndexSet<T, S2>) -> bool where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all elements of `self` are contained in `other`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all elements of `self` are contained in `other`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":100263,"byte_end":100333,"line_start":819,"line_end":819,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":991},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":100622,"byte_end":100633,"line_start":828,"line_end":828,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<IndexSet<T, S>>::is_superset","value":"pub fn is_superset<S2>(&Self, &IndexSet<T, S2>) -> bool where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all elements of `other` are contained in `self`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all elements of `other` are contained in `self`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":100540,"byte_end":100610,"line_start":827,"line_end":827,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":993},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":101059,"byte_end":101069,"line_start":843,"line_end":843,"column_start":12,"column_end":22},"name":"Difference","qualname":"::set::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":997},{"krate":0,"index":998}],"decl_id":null,"docs":" A lazy iterator producing elements in the difference of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the difference of `IndexSet`s.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":100758,"byte_end":100830,"line_start":836,"line_end":836,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":100831,"byte_end":100834,"line_start":837,"line_end":837,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`difference`] method on [`IndexSet`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":100835,"byte_end":100909,"line_start":838,"line_end":838,"column_start":1,"column_end":75}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":100910,"byte_end":100945,"line_start":839,"line_end":839,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":100946,"byte_end":100949,"line_start":840,"line_end":840,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":100950,"byte_end":100988,"line_start":841,"line_end":841,"column_start":1,"column_end":39}},{"value":"/ [`difference`]: struct.IndexSet.html#method.difference","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":100989,"byte_end":101047,"line_start":842,"line_end":842,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":1021},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":102638,"byte_end":102650,"line_start":910,"line_end":910,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::set::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":1025},{"krate":0,"index":1026}],"decl_id":null,"docs":" A lazy iterator producing elements in the intersection of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the intersection of `IndexSet`s.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":102329,"byte_end":102403,"line_start":903,"line_end":903,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":102404,"byte_end":102407,"line_start":904,"line_end":904,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`intersection`] method on [`IndexSet`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":102408,"byte_end":102484,"line_start":905,"line_end":905,"column_start":1,"column_end":77}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":102485,"byte_end":102520,"line_start":906,"line_end":906,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":102521,"byte_end":102524,"line_start":907,"line_end":907,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":102525,"byte_end":102563,"line_start":908,"line_end":908,"column_start":1,"column_end":39}},{"value":"/ [`intersection`]: struct.IndexSet.html#method.intersection","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":102564,"byte_end":102626,"line_start":909,"line_end":909,"column_start":1,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":1049},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":104259,"byte_end":104278,"line_start":977,"line_end":977,"column_start":12,"column_end":31},"name":"SymmetricDifference","qualname":"::set::SymmetricDifference","value":"SymmetricDifference {  }","parent":null,"children":[{"krate":0,"index":1054}],"decl_id":null,"docs":" A lazy iterator producing elements in the symmetric difference of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the symmetric difference of `IndexSet`s.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":103918,"byte_end":104000,"line_start":970,"line_end":970,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":104001,"byte_end":104004,"line_start":971,"line_end":971,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`symmetric_difference`] method on","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":104005,"byte_end":104075,"line_start":972,"line_end":972,"column_start":1,"column_end":71}},{"value":"/ [`IndexSet`]. See its documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":104076,"byte_end":104125,"line_start":973,"line_end":973,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":104126,"byte_end":104129,"line_start":974,"line_end":974,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":104130,"byte_end":104168,"line_start":975,"line_end":975,"column_start":1,"column_end":39}},{"value":"/ [`symmetric_difference`]: struct.IndexSet.html#method.symmetric_difference","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":104169,"byte_end":104247,"line_start":976,"line_end":976,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":1084},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":105816,"byte_end":105821,"line_start":1042,"line_end":1042,"column_start":12,"column_end":17},"name":"Union","qualname":"::set::Union","value":"Union {  }","parent":null,"children":[{"krate":0,"index":1088}],"decl_id":null,"docs":" A lazy iterator producing elements in the union of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the union of `IndexSet`s.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":105535,"byte_end":105602,"line_start":1035,"line_end":1035,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":105603,"byte_end":105606,"line_start":1036,"line_end":1036,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`union`] method on [`IndexSet`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":105607,"byte_end":105676,"line_start":1037,"line_end":1037,"column_start":1,"column_end":70}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":105677,"byte_end":105712,"line_start":1038,"line_end":1038,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":105713,"byte_end":105716,"line_start":1039,"line_end":1039,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":105717,"byte_end":105755,"line_start":1040,"line_end":1040,"column_start":1,"column_end":39}},{"value":"/ [`union`]: struct.IndexSet.html#method.union","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":105756,"byte_end":105804,"line_start":1041,"line_end":1041,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":1174},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":5411,"byte_end":5416,"line_start":192,"line_end":192,"column_start":10,"column_end":15},"name":"Entry","qualname":"::Entries::Entry","value":"type Entry;","parent":{"krate":0,"index":1173},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/equivalent.rs","byte_start":9535,"byte_end":9536,"line_start":18,"line_end":18,"column_start":46,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":19}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":11376,"byte_end":11384,"line_start":52,"line_end":52,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":51},{"krate":0,"index":53}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":68119,"byte_end":68131,"line_start":13,"line_end":13,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":68350,"byte_end":68362,"line_start":20,"line_end":20,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":75133,"byte_end":75146,"line_start":204,"line_end":204,"column_start":40,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":75261,"byte_end":75274,"line_start":207,"line_end":207,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":56636,"byte_end":56648,"line_start":40,"line_end":40,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":57334,"byte_end":57346,"line_start":63,"line_end":63,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":57661,"byte_end":57673,"line_start":76,"line_end":76,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":58176,"byte_end":58188,"line_start":103,"line_end":103,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":62468,"byte_end":62473,"line_start":238,"line_end":238,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":64364,"byte_end":64369,"line_start":302,"line_end":302,"column_start":65,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":64773,"byte_end":64786,"line_start":314,"line_end":314,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":66360,"byte_end":66373,"line_start":357,"line_end":357,"column_start":65,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":66856,"byte_end":66867,"line_start":376,"line_end":376,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":67332,"byte_end":67343,"line_start":396,"line_end":396,"column_start":52,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":14423,"byte_end":14431,"line_start":85,"line_end":85,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":353},{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":14829,"byte_end":14837,"line_start":104,"line_end":104,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":15361,"byte_end":15369,"line_start":130,"line_end":130,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":15859,"byte_end":15867,"line_start":149,"line_end":149,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":373},{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":16293,"byte_end":16301,"line_start":166,"line_end":166,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":17712,"byte_end":17720,"line_start":227,"line_end":227,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":408},{"krate":0,"index":410},{"krate":0,"index":412},{"krate":0,"index":414},{"krate":0,"index":416},{"krate":0,"index":418},{"krate":0,"index":420},{"krate":0,"index":422},{"krate":0,"index":424},{"krate":0,"index":426},{"krate":0,"index":428},{"krate":0,"index":430},{"krate":0,"index":432},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":438},{"krate":0,"index":440},{"krate":0,"index":443},{"krate":0,"index":447},{"krate":0,"index":450},{"krate":0,"index":451}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":31862,"byte_end":31870,"line_start":677,"line_end":677,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":33902,"byte_end":33906,"line_start":738,"line_end":738,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":478},{"krate":0,"index":1180},{"krate":0,"index":1181},{"krate":0,"index":1182},{"krate":0,"index":1183},{"krate":0,"index":1184},{"krate":0,"index":1185}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":34025,"byte_end":34029,"line_start":744,"line_end":744,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":483}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":34186,"byte_end":34190,"line_start":750,"line_end":750,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":488}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":34345,"byte_end":34349,"line_start":757,"line_end":757,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":493}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":34515,"byte_end":34519,"line_start":765,"line_end":765,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":498}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":35016,"byte_end":35022,"line_start":782,"line_end":782,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":508},{"krate":0,"index":1187},{"krate":0,"index":1188},{"krate":0,"index":1189},{"krate":0,"index":1190},{"krate":0,"index":1191},{"krate":0,"index":1192}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":35143,"byte_end":35149,"line_start":788,"line_end":788,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":513}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":35313,"byte_end":35319,"line_start":794,"line_end":794,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":35474,"byte_end":35480,"line_start":801,"line_end":801,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":35650,"byte_end":35656,"line_start":809,"line_end":809,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":36178,"byte_end":36187,"line_start":826,"line_end":826,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":538},{"krate":0,"index":1194},{"krate":0,"index":1195},{"krate":0,"index":1196},{"krate":0,"index":1197},{"krate":0,"index":1198},{"krate":0,"index":1199}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":36312,"byte_end":36321,"line_start":832,"line_end":832,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":543}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":36485,"byte_end":36494,"line_start":838,"line_end":838,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":548}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":36924,"byte_end":36928,"line_start":855,"line_end":855,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":558},{"krate":0,"index":1201},{"krate":0,"index":1202},{"krate":0,"index":1203},{"krate":0,"index":1204},{"krate":0,"index":1205},{"krate":0,"index":1206}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":37053,"byte_end":37057,"line_start":861,"line_end":861,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":563}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":37216,"byte_end":37220,"line_start":867,"line_end":867,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":568}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":37375,"byte_end":37379,"line_start":874,"line_end":874,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":573}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":37557,"byte_end":37561,"line_start":882,"line_end":882,"column_start":55,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":38076,"byte_end":38083,"line_start":899,"line_end":899,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":588},{"krate":0,"index":1208},{"krate":0,"index":1209},{"krate":0,"index":1210},{"krate":0,"index":1211},{"krate":0,"index":1212},{"krate":0,"index":1213}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":38215,"byte_end":38222,"line_start":905,"line_end":905,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":593}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":38384,"byte_end":38391,"line_start":911,"line_end":911,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":38879,"byte_end":38887,"line_start":928,"line_end":928,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":606},{"krate":0,"index":1215},{"krate":0,"index":1216},{"krate":0,"index":1217},{"krate":0,"index":1218},{"krate":0,"index":1219},{"krate":0,"index":1220}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":39005,"byte_end":39013,"line_start":934,"line_end":934,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":39169,"byte_end":39177,"line_start":940,"line_end":940,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":615}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":39298,"byte_end":39306,"line_start":946,"line_end":946,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":619}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":39901,"byte_end":39906,"line_start":968,"line_end":968,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":629},{"krate":0,"index":1222},{"krate":0,"index":1223},{"krate":0,"index":1224},{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1227}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":40028,"byte_end":40033,"line_start":974,"line_end":974,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1229}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":40636,"byte_end":40644,"line_start":1002,"line_end":1002,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":40972,"byte_end":40980,"line_start":1018,"line_end":1018,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":670},{"krate":0,"index":671}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":41479,"byte_end":41487,"line_start":1036,"line_end":1036,"column_start":50,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":41789,"byte_end":41797,"line_start":1048,"line_end":1048,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":683}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":42381,"byte_end":42389,"line_start":1067,"line_end":1067,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":689}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":43688,"byte_end":43696,"line_start":1100,"line_end":1100,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":697}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":44092,"byte_end":44100,"line_start":1114,"line_end":1114,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":704}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":44334,"byte_end":44342,"line_start":1124,"line_end":1124,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":711}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":44707,"byte_end":44715,"line_start":1141,"line_end":1141,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":79683,"byte_end":79691,"line_start":75,"line_end":75,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":783},{"krate":0,"index":784}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":79953,"byte_end":79961,"line_start":91,"line_end":91,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":790},{"krate":0,"index":791},{"krate":0,"index":792}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":80472,"byte_end":80480,"line_start":117,"line_end":117,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":797}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":80905,"byte_end":80913,"line_start":133,"line_end":133,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":800},{"krate":0,"index":801}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":81346,"byte_end":81354,"line_start":152,"line_end":152,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":810}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":82552,"byte_end":82560,"line_start":204,"line_end":204,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":814},{"krate":0,"index":815},{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":820},{"krate":0,"index":821},{"krate":0,"index":824},{"krate":0,"index":827},{"krate":0,"index":830},{"krate":0,"index":833},{"krate":0,"index":835},{"krate":0,"index":838},{"krate":0,"index":841},{"krate":0,"index":843},{"krate":0,"index":845},{"krate":0,"index":847},{"krate":0,"index":849},{"krate":0,"index":851},{"krate":0,"index":853},{"krate":0,"index":856},{"krate":0,"index":859},{"krate":0,"index":862},{"krate":0,"index":865},{"krate":0,"index":867},{"krate":0,"index":870},{"krate":0,"index":871},{"krate":0,"index":874},{"krate":0,"index":877},{"krate":0,"index":878}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":94135,"byte_end":94143,"line_start":572,"line_end":572,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":882},{"krate":0,"index":884},{"krate":0,"index":886}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":95801,"byte_end":95809,"line_start":620,"line_end":620,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":893},{"krate":0,"index":1230},{"krate":0,"index":1231},{"krate":0,"index":1232},{"krate":0,"index":1233},{"krate":0,"index":1234},{"krate":0,"index":1235}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":95906,"byte_end":95914,"line_start":626,"line_end":626,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":896}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":96058,"byte_end":96066,"line_start":632,"line_end":632,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":899}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":96169,"byte_end":96177,"line_start":638,"line_end":638,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":902}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":96708,"byte_end":96712,"line_start":656,"line_end":656,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":910},{"krate":0,"index":1237},{"krate":0,"index":1238},{"krate":0,"index":1239},{"krate":0,"index":1240},{"krate":0,"index":1241},{"krate":0,"index":1242}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":96825,"byte_end":96829,"line_start":662,"line_end":662,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":914}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":96985,"byte_end":96989,"line_start":668,"line_end":668,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":918}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":97083,"byte_end":97087,"line_start":674,"line_end":674,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":922}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":97237,"byte_end":97241,"line_start":682,"line_end":682,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":926}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":97726,"byte_end":97731,"line_start":699,"line_end":699,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":934},{"krate":0,"index":1244},{"krate":0,"index":1245},{"krate":0,"index":1246},{"krate":0,"index":1247},{"krate":0,"index":1248},{"krate":0,"index":1249}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":97836,"byte_end":97841,"line_start":705,"line_end":705,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1251}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":98157,"byte_end":98165,"line_start":722,"line_end":722,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":950}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":98428,"byte_end":98436,"line_start":737,"line_end":737,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":954}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":98731,"byte_end":98739,"line_start":750,"line_end":750,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":960}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":98990,"byte_end":98998,"line_start":761,"line_end":761,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":967}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":99279,"byte_end":99287,"line_start":772,"line_end":772,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":972}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":99517,"byte_end":99525,"line_start":784,"line_end":784,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":977}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":99739,"byte_end":99747,"line_start":795,"line_end":795,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":99814,"byte_end":99822,"line_start":802,"line_end":802,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":984},{"krate":0,"index":988},{"krate":0,"index":991}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":101175,"byte_end":101185,"line_start":848,"line_end":848,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1003},{"krate":0,"index":1004},{"krate":0,"index":1005}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":101623,"byte_end":101633,"line_start":869,"line_end":869,"column_start":40,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1010}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":101947,"byte_end":101957,"line_start":884,"line_end":884,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1015}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":102127,"byte_end":102137,"line_start":893,"line_end":893,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1020}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":102756,"byte_end":102768,"line_start":915,"line_end":915,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1031},{"krate":0,"index":1032},{"krate":0,"index":1033}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":103205,"byte_end":103217,"line_start":936,"line_end":936,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1038}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":103530,"byte_end":103542,"line_start":951,"line_end":951,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1043}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":103714,"byte_end":103726,"line_start":960,"line_end":960,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1048}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":104407,"byte_end":104426,"line_start":981,"line_end":981,"column_start":34,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1062},{"krate":0,"index":1063}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":104885,"byte_end":104904,"line_start":1005,"line_end":1005,"column_start":45,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1071}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":105109,"byte_end":105128,"line_start":1016,"line_end":1016,"column_start":31,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1077}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":105297,"byte_end":105316,"line_start":1024,"line_end":1024,"column_start":36,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1083}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":105925,"byte_end":105930,"line_start":1046,"line_end":1046,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1095},{"krate":0,"index":1096}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":106357,"byte_end":106362,"line_start":1069,"line_end":1069,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1103}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":106535,"byte_end":106540,"line_start":1079,"line_end":1079,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1108}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":106685,"byte_end":106690,"line_start":1087,"line_end":1087,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1113}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":4138,"byte_end":4147,"line_start":129,"line_end":129,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1156}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":4345,"byte_end":4351,"line_start":143,"line_end":143,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1160},{"krate":0,"index":1161}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":4744,"byte_end":4750,"line_start":163,"line_end":163,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1165},{"krate":0,"index":1166},{"krate":0,"index":1167},{"krate":0,"index":1168},{"krate":0,"index":1169},{"krate":0,"index":1170},{"krate":0,"index":1171},{"krate":0,"index":1172}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":3676,"byte_end":3679,"line_start":110,"line_end":110,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":64}},{"kind":"Mod","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":3689,"byte_end":3692,"line_start":111,"line_end":111,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":718}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/equivalent.rs","byte_start":9535,"byte_end":9536,"line_start":18,"line_end":18,"column_start":46,"column_end":47},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":17},"to":{"krate":0,"index":13}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/mutable_keys.rs","byte_start":11376,"byte_end":11384,"line_start":52,"line_end":52,"column_start":31,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":343},"to":{"krate":0,"index":35}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":68119,"byte_end":68131,"line_start":13,"line_end":13,"column_start":21,"column_end":33},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":93},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":68350,"byte_end":68362,"line_start":20,"line_end":20,"column_start":12,"column_end":24},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":177},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":75133,"byte_end":75146,"line_start":204,"line_end":204,"column_start":40,"column_end":53},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":121},"to":{"krate":2,"index":3001}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core/raw.rs","byte_start":75261,"byte_end":75274,"line_start":207,"line_end":207,"column_start":16,"column_end":29},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":121},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":56636,"byte_end":56648,"line_start":40,"line_end":40,"column_start":22,"column_end":34},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":177},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":57334,"byte_end":57346,"line_start":63,"line_end":63,"column_start":27,"column_end":39},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":177},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":57661,"byte_end":57673,"line_start":76,"line_end":76,"column_start":24,"column_end":36},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":177},"to":{"krate":0,"index":1173}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":58176,"byte_end":58188,"line_start":103,"line_end":103,"column_start":12,"column_end":24},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":177},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":62468,"byte_end":62473,"line_start":238,"line_end":238,"column_start":16,"column_end":21},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":223},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":64364,"byte_end":64369,"line_start":302,"line_end":302,"column_start":65,"column_end":70},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":223},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":64773,"byte_end":64786,"line_start":314,"line_end":314,"column_start":16,"column_end":29},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":121},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":66360,"byte_end":66373,"line_start":357,"line_end":357,"column_start":65,"column_end":78},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":121},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":66856,"byte_end":66867,"line_start":376,"line_end":376,"column_start":16,"column_end":27},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":267},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map/core.rs","byte_start":67332,"byte_end":67343,"line_start":396,"line_end":396,"column_start":52,"column_end":63},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":267},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":14423,"byte_end":14431,"line_start":85,"line_end":85,"column_start":25,"column_end":33},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":343},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":14829,"byte_end":14837,"line_start":104,"line_end":104,"column_start":27,"column_end":35},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":343},"to":{"krate":0,"index":1173}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":15361,"byte_end":15369,"line_start":130,"line_end":130,"column_start":30,"column_end":38},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":343},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":15859,"byte_end":15867,"line_start":149,"line_end":149,"column_start":12,"column_end":20},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":343},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":16293,"byte_end":16301,"line_start":166,"line_end":166,"column_start":15,"column_end":23},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":343},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":17712,"byte_end":17720,"line_start":227,"line_end":227,"column_start":15,"column_end":23},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":343},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":31862,"byte_end":31870,"line_start":677,"line_end":677,"column_start":15,"column_end":23},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":343},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":33902,"byte_end":33906,"line_start":738,"line_end":738,"column_start":29,"column_end":33},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":469},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":34025,"byte_end":34029,"line_start":744,"line_end":744,"column_start":40,"column_end":44},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":469},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":34186,"byte_end":34190,"line_start":750,"line_end":750,"column_start":38,"column_end":42},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":469},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":34345,"byte_end":34349,"line_start":757,"line_end":757,"column_start":26,"column_end":30},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":469},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":34515,"byte_end":34519,"line_start":765,"line_end":765,"column_start":43,"column_end":47},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":469},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":35016,"byte_end":35022,"line_start":782,"line_end":782,"column_start":29,"column_end":35},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":499},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":35143,"byte_end":35149,"line_start":788,"line_end":788,"column_start":40,"column_end":46},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":499},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":35313,"byte_end":35319,"line_start":794,"line_end":794,"column_start":38,"column_end":44},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":499},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":35474,"byte_end":35480,"line_start":801,"line_end":801,"column_start":26,"column_end":32},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":499},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":35650,"byte_end":35656,"line_start":809,"line_end":809,"column_start":43,"column_end":49},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":499},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":36178,"byte_end":36187,"line_start":826,"line_end":826,"column_start":29,"column_end":38},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":529},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":36312,"byte_end":36321,"line_start":832,"line_end":832,"column_start":40,"column_end":49},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":529},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":36485,"byte_end":36494,"line_start":838,"line_end":838,"column_start":38,"column_end":47},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":529},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":36924,"byte_end":36928,"line_start":855,"line_end":855,"column_start":29,"column_end":33},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":549},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":37053,"byte_end":37057,"line_start":861,"line_end":861,"column_start":40,"column_end":44},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":549},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":37216,"byte_end":37220,"line_start":867,"line_end":867,"column_start":38,"column_end":42},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":549},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":37375,"byte_end":37379,"line_start":874,"line_end":874,"column_start":26,"column_end":30},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":549},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":37557,"byte_end":37561,"line_start":882,"line_end":882,"column_start":55,"column_end":59},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":549},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":38076,"byte_end":38083,"line_start":899,"line_end":899,"column_start":29,"column_end":36},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":579},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":38215,"byte_end":38222,"line_start":905,"line_end":905,"column_start":40,"column_end":47},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":579},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":38384,"byte_end":38391,"line_start":911,"line_end":911,"column_start":38,"column_end":45},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":579},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":38879,"byte_end":38887,"line_start":928,"line_end":928,"column_start":25,"column_end":33},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":599},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":39005,"byte_end":39013,"line_start":934,"line_end":934,"column_start":40,"column_end":48},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":599},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":39169,"byte_end":39177,"line_start":940,"line_end":940,"column_start":34,"column_end":42},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":599},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":39298,"byte_end":39306,"line_start":946,"line_end":946,"column_start":51,"column_end":59},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":599},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":39901,"byte_end":39906,"line_start":968,"line_end":968,"column_start":29,"column_end":34},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":620},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":40028,"byte_end":40033,"line_start":974,"line_end":974,"column_start":40,"column_end":45},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":620},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":40636,"byte_end":40644,"line_start":1002,"line_end":1002,"column_start":32,"column_end":40},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":343},"to":{"krate":2,"index":7379}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":40972,"byte_end":40980,"line_start":1018,"line_end":1018,"column_start":47,"column_end":55},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":343},"to":{"krate":2,"index":3285}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":41479,"byte_end":41487,"line_start":1036,"line_end":1036,"column_start":50,"column_end":58},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":343},"to":{"krate":2,"index":3289}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":41789,"byte_end":41797,"line_start":1048,"line_end":1048,"column_start":40,"column_end":48},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":343},"to":{"krate":2,"index":7375}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":42381,"byte_end":42389,"line_start":1067,"line_end":1067,"column_start":34,"column_end":42},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":343},"to":{"krate":2,"index":7388}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":43688,"byte_end":43696,"line_start":1100,"line_end":1100,"column_start":46,"column_end":54},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":343},"to":{"krate":2,"index":7388}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":44092,"byte_end":44100,"line_start":1114,"line_end":1114,"column_start":27,"column_end":35},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":343},"to":{"krate":2,"index":2967}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":44334,"byte_end":44342,"line_start":1124,"line_end":1124,"column_start":60,"column_end":68},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":343},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/map.rs","byte_start":44707,"byte_end":44715,"line_start":1141,"line_end":1141,"column_start":22,"column_end":30},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":343},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":79683,"byte_end":79691,"line_start":75,"line_end":75,"column_start":22,"column_end":30},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":776},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":79953,"byte_end":79961,"line_start":91,"line_end":91,"column_start":24,"column_end":32},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":776},"to":{"krate":0,"index":1173}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":80472,"byte_end":80480,"line_start":117,"line_end":117,"column_start":27,"column_end":35},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":776},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":80905,"byte_end":80913,"line_start":133,"line_end":133,"column_start":9,"column_end":17},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":81346,"byte_end":81354,"line_start":152,"line_end":152,"column_start":12,"column_end":20},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":82552,"byte_end":82560,"line_start":204,"line_end":204,"column_start":12,"column_end":20},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":94135,"byte_end":94143,"line_start":572,"line_end":572,"column_start":12,"column_end":20},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":95801,"byte_end":95809,"line_start":620,"line_end":620,"column_start":22,"column_end":30},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":888},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":95906,"byte_end":95914,"line_start":626,"line_end":626,"column_start":33,"column_end":41},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":888},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":96058,"byte_end":96066,"line_start":632,"line_end":632,"column_start":31,"column_end":39},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":888},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":96169,"byte_end":96177,"line_start":638,"line_end":638,"column_start":36,"column_end":44},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":888},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":96708,"byte_end":96712,"line_start":656,"line_end":656,"column_start":26,"column_end":30},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":903},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":96825,"byte_end":96829,"line_start":662,"line_end":662,"column_start":37,"column_end":41},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":903},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":96985,"byte_end":96989,"line_start":668,"line_end":668,"column_start":35,"column_end":39},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":903},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":97083,"byte_end":97087,"line_start":674,"line_end":674,"column_start":23,"column_end":27},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":903},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":97237,"byte_end":97241,"line_start":682,"line_end":682,"column_start":40,"column_end":44},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":903},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":97726,"byte_end":97731,"line_start":699,"line_end":699,"column_start":26,"column_end":31},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":927},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":97836,"byte_end":97841,"line_start":705,"line_end":705,"column_start":37,"column_end":42},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":927},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":98157,"byte_end":98165,"line_start":722,"line_end":722,"column_start":29,"column_end":37},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":776},"to":{"krate":2,"index":7379}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":98428,"byte_end":98436,"line_start":737,"line_end":737,"column_start":32,"column_end":40},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":776},"to":{"krate":2,"index":7375}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":98731,"byte_end":98739,"line_start":750,"line_end":750,"column_start":26,"column_end":34},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":776},"to":{"krate":2,"index":7388}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":98990,"byte_end":98998,"line_start":761,"line_end":761,"column_start":34,"column_end":42},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":776},"to":{"krate":2,"index":7388}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":99279,"byte_end":99287,"line_start":772,"line_end":772,"column_start":24,"column_end":32},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":776},"to":{"krate":2,"index":2967}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":99517,"byte_end":99525,"line_start":784,"line_end":784,"column_start":48,"column_end":56},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":776},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":99739,"byte_end":99747,"line_start":795,"line_end":795,"column_start":19,"column_end":27},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":776},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":99814,"byte_end":99822,"line_start":802,"line_end":802,"column_start":12,"column_end":20},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":101175,"byte_end":101185,"line_start":848,"line_end":848,"column_start":29,"column_end":39},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":993},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":101623,"byte_end":101633,"line_start":869,"line_end":869,"column_start":40,"column_end":50},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":993},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":101947,"byte_end":101957,"line_start":884,"line_end":884,"column_start":26,"column_end":36},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":993},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":102127,"byte_end":102137,"line_start":893,"line_end":893,"column_start":31,"column_end":41},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":993},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":102756,"byte_end":102768,"line_start":915,"line_end":915,"column_start":29,"column_end":41},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1021},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":103205,"byte_end":103217,"line_start":936,"line_end":936,"column_start":40,"column_end":52},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1021},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":103530,"byte_end":103542,"line_start":951,"line_end":951,"column_start":26,"column_end":38},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1021},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":103714,"byte_end":103726,"line_start":960,"line_end":960,"column_start":31,"column_end":43},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1021},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":104407,"byte_end":104426,"line_start":981,"line_end":981,"column_start":34,"column_end":53},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1049},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":104885,"byte_end":104904,"line_start":1005,"line_end":1005,"column_start":45,"column_end":64},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1049},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":105109,"byte_end":105128,"line_start":1016,"line_end":1016,"column_start":31,"column_end":50},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1049},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":105297,"byte_end":105316,"line_start":1024,"line_end":1024,"column_start":36,"column_end":55},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1049},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":105925,"byte_end":105930,"line_start":1046,"line_end":1046,"column_start":29,"column_end":34},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1084},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":106357,"byte_end":106362,"line_start":1069,"line_end":1069,"column_start":40,"column_end":45},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1084},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":106535,"byte_end":106540,"line_start":1079,"line_end":1079,"column_start":26,"column_end":31},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1084},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/set.rs","byte_start":106685,"byte_end":106690,"line_start":1087,"line_end":1087,"column_start":31,"column_end":36},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1084},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":4138,"byte_end":4147,"line_start":129,"line_end":129,"column_start":6,"column_end":15},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1252},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":4345,"byte_end":4351,"line_start":143,"line_end":143,"column_start":22,"column_end":28},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1264},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.0/src/lib.rs","byte_start":4744,"byte_end":4750,"line_start":163,"line_end":163,"column_start":12,"column_end":18},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1264},"to":{"krate":4294967295,"index":4294967295}}]}