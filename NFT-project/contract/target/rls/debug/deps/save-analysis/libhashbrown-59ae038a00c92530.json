{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1","program":"/home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","hashbrown","--edition=2018","/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"raw\"","-C","metadata=59ae038a00c92530","-C","extra-filename=-59ae038a00c92530","--out-dir","/home/pavel/Near/create-near-NFTapp/NFT-project/contract/target/rls/debug/deps","-L","dependency=/home/pavel/Near/create-near-NFTapp/NFT-project/contract/target/rls/debug/deps","--cap-lints","allow","--cfg","has_extern_crate_alloc","--error-format=json","--sysroot","/home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/pavel/Near/create-near-NFTapp/NFT-project/contract/target/rls/debug/deps/libhashbrown-59ae038a00c92530.rmeta"},"prelude":{"crate_id":{"name":"hashbrown","disambiguator":[18158723866691077868,0]},"crate_root":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src","external_crates":[{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[2034785968469428135,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[12655493918929861395,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[13424910470399079611,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[8213023121058624814,0]}}],"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":0,"byte_end":3411,"line_start":1,"line_end":124,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":1619,"byte_end":1620,"line_start":60,"line_end":60,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"RawDrain, RawIter, RawTable, RawIntoIter, Bucket","parent":{"krate":0,"index":8}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":2011,"byte_end":2012,"line_start":79,"line_end":79,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1456}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":2566,"byte_end":2567,"line_start":96,"line_end":96,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1458}},{"kind":"Use","ref_id":{"krate":0,"index":383},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":2949,"byte_end":2956,"line_start":109,"line_end":109,"column_start":21,"column_end":28},"alias_span":null,"name":"HashMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1132},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":2978,"byte_end":2985,"line_start":110,"line_end":110,"column_start":21,"column_end":28},"alias_span":null,"name":"HashSet","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":0,"byte_end":3411,"line_start":1,"line_end":124,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":1038},{"krate":0,"index":1067},{"krate":0,"index":1456},{"krate":0,"index":1458},{"krate":0,"index":1460},{"krate":0,"index":1463},{"krate":0,"index":1524},{"krate":0,"index":1529},{"krate":0,"index":1531},{"krate":0,"index":1532},{"krate":0,"index":1535},{"krate":0,"index":1536},{"krate":0,"index":1538}],"decl_id":null,"docs":" This crate is a Rust port of Google's high-performance [SwissTable] hash\n map, adapted to make it a drop-in replacement for Rust's standard `HashMap`\n and `HashSet` types.","sig":null,"attributes":[{"value":"/ This crate is a Rust port of Google's high-performance [SwissTable] hash","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":0,"byte_end":76,"line_start":1,"line_end":1,"column_start":1,"column_end":77}},{"value":"/ map, adapted to make it a drop-in replacement for Rust's standard `HashMap`","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":77,"byte_end":156,"line_start":2,"line_end":2,"column_start":1,"column_end":80}},{"value":"/ and `HashSet` types.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":157,"byte_end":181,"line_start":3,"line_end":3,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":182,"byte_end":185,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The original C++ version of [SwissTable] can be found [here], and this","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":186,"byte_end":260,"line_start":5,"line_end":5,"column_start":1,"column_end":75}},{"value":"/ [CppCon talk] gives an overview of how the algorithm works.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":261,"byte_end":324,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":325,"byte_end":328,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [SwissTable]: https://abseil.io/blog/20180927-swisstables","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":329,"byte_end":390,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"/ [here]: https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":391,"byte_end":490,"line_start":9,"line_end":9,"column_start":1,"column_end":100}},{"value":"/ [CppCon talk]: https://www.youtube.com/watch?v=ncHmEUmJZf4","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":491,"byte_end":553,"line_start":10,"line_end":10,"column_start":1,"column_end":63}},{"value":"no_std","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":555,"byte_end":565,"line_start":12,"line_end":12,"column_start":1,"column_end":11}},{"value":"allow(clippy :: doc_markdown, clippy :: module_name_repetitions, clippy ::\n        must_use_candidate, clippy :: option_if_let_else,)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":814,"byte_end":953,"line_start":26,"line_end":31,"column_start":1,"column_end":3}},{"value":"warn(missing_docs)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":954,"byte_end":976,"line_start":32,"line_end":32,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":977,"byte_end":1003,"line_start":33,"line_end":33,"column_start":1,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":8},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":1447,"byte_end":1450,"line_start":55,"line_end":55,"column_start":9,"column_end":12},"name":"raw","qualname":"::raw","value":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":9},{"krate":0,"index":324}],"decl_id":null,"docs":" Experimental and unsafe `RawTable` API. This module is only available if the\n `raw` feature is enabled.\n","sig":null,"attributes":[{"value":"cfg(feature = \"raw\")","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":1304,"byte_end":1327,"line_start":52,"line_end":52,"column_start":1,"column_end":24}},{"value":"/ Experimental and unsafe `RawTable` API. This module is only available if the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":1328,"byte_end":1408,"line_start":53,"line_end":53,"column_start":1,"column_end":81}},{"value":"/ `raw` feature is enabled.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":1409,"byte_end":1438,"line_start":54,"line_end":54,"column_start":1,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":108},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":14876,"byte_end":14882,"line_start":272,"line_end":272,"column_start":12,"column_end":18},"name":"Bucket","qualname":"::raw::inner::Bucket","value":"Bucket {  }","parent":null,"children":[{"krate":0,"index":110}],"decl_id":null,"docs":" A reference to a hash table bucket containing a `T`.","sig":null,"attributes":[{"value":"/ A reference to a hash table bucket containing a `T`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":14613,"byte_end":14669,"line_start":267,"line_end":267,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":14670,"byte_end":14673,"line_start":268,"line_end":268,"column_start":1,"column_end":4}},{"value":"/ This is usually just a pointer to the element itself. However if the element","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":14674,"byte_end":14754,"line_start":269,"line_end":269,"column_start":1,"column_end":81}},{"value":"/ is a ZST, then we instead track the index of the element in the table so","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":14755,"byte_end":14831,"line_start":270,"line_end":270,"column_start":1,"column_end":77}},{"value":"/ that `erase` works properly.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":14832,"byte_end":14864,"line_start":271,"line_end":271,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":16242,"byte_end":16248,"line_start":313,"line_end":313,"column_start":19,"column_end":25},"name":"as_ptr","qualname":"<Bucket<T>>::as_ptr","value":"pub unsafe fn as_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":16921,"byte_end":16925,"line_start":333,"line_end":333,"column_start":19,"column_end":23},"name":"drop","qualname":"<Bucket<T>>::drop","value":"pub unsafe fn drop(&Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":17047,"byte_end":17051,"line_start":337,"line_end":337,"column_start":19,"column_end":23},"name":"read","qualname":"<Bucket<T>>::read","value":"pub unsafe fn read(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":17168,"byte_end":17173,"line_start":341,"line_end":341,"column_start":19,"column_end":24},"name":"write","qualname":"<Bucket<T>>::write","value":"pub unsafe fn write(&Self, T)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":17298,"byte_end":17304,"line_start":345,"line_end":345,"column_start":19,"column_end":25},"name":"as_ref","qualname":"<Bucket<T>>::as_ref","value":"pub unsafe fn as_ref<'a>(&Self) -> &'a T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":17424,"byte_end":17430,"line_start":349,"line_end":349,"column_start":19,"column_end":25},"name":"as_mut","qualname":"<Bucket<T>>::as_mut","value":"pub unsafe fn as_mut<'a>(&Self) -> &'a mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":17558,"byte_end":17582,"line_start":353,"line_end":353,"column_start":19,"column_end":43},"name":"copy_from_nonoverlapping","qualname":"<Bucket<T>>::copy_from_nonoverlapping","value":"pub unsafe fn copy_from_nonoverlapping(&Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":130},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":17734,"byte_end":17742,"line_start":359,"line_end":359,"column_start":12,"column_end":20},"name":"RawTable","qualname":"::raw::inner::RawTable","value":"RawTable {  }","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136}],"decl_id":null,"docs":" A raw hash table with an unsafe API.\n","sig":null,"attributes":[{"value":"/ A raw hash table with an unsafe API.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":17682,"byte_end":17722,"line_start":358,"line_end":358,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":18680,"byte_end":18683,"line_start":385,"line_end":385,"column_start":12,"column_end":15},"name":"new","qualname":"<RawTable<T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty hash table without allocating any memory.","sig":null,"attributes":[{"value":"/ Creates a new empty hash table without allocating any memory.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":18310,"byte_end":18375,"line_start":379,"line_end":379,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":18380,"byte_end":18383,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ In effect this returns a table with exactly 1 bucket. However we can","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":18388,"byte_end":18460,"line_start":381,"line_end":381,"column_start":5,"column_end":77}},{"value":"/ leave the data pointer dangling since that bucket is never written to","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":18465,"byte_end":18538,"line_start":382,"line_end":382,"column_start":5,"column_end":78}},{"value":"/ due to our load factor forcing us to always have at least 1 free bucket.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":18543,"byte_end":18619,"line_start":383,"line_end":383,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":20769,"byte_end":20786,"line_start":441,"line_end":441,"column_start":12,"column_end":29},"name":"try_with_capacity","qualname":"<RawTable<T>>::try_with_capacity","value":"pub fn try_with_capacity(usize) -> Result<Self, TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to allocate a new hash table with at least enough capacity\n for inserting the given number of elements without reallocating.\n","sig":null,"attributes":[{"value":"/ Attempts to allocate a new hash table with at least enough capacity","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":20585,"byte_end":20656,"line_start":438,"line_end":438,"column_start":5,"column_end":76}},{"value":"/ for inserting the given number of elements without reallocating.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":20661,"byte_end":20729,"line_start":439,"line_end":439,"column_start":5,"column_end":73}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":20734,"byte_end":20757,"line_start":440,"line_end":440,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":21065,"byte_end":21078,"line_start":447,"line_end":447,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<RawTable<T>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new hash table with at least enough capacity for inserting\n the given number of elements without reallocating.\n","sig":null,"attributes":[{"value":"/ Allocates a new hash table with at least enough capacity for inserting","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":20920,"byte_end":20994,"line_start":445,"line_end":445,"column_start":5,"column_end":79}},{"value":"/ the given number of elements without reallocating.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":20999,"byte_end":21053,"line_start":446,"line_end":446,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":21744,"byte_end":21752,"line_start":462,"line_end":462,"column_start":19,"column_end":27},"name":"data_end","qualname":"<RawTable<T>>::data_end","value":"pub unsafe fn data_end(&Self) -> NonNull<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns pointer to one past last element of data table.\n","sig":null,"attributes":[{"value":"/ Returns pointer to one past last element of data table.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":21617,"byte_end":21676,"line_start":460,"line_end":460,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":22212,"byte_end":22224,"line_start":475,"line_end":475,"column_start":19,"column_end":31},"name":"bucket_index","qualname":"<RawTable<T>>::bucket_index","value":"pub unsafe fn bucket_index(&Self, &Bucket<T>) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of a bucket from a `Bucket`.\n","sig":null,"attributes":[{"value":"/ Returns the index of a bucket from a `Bucket`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":22094,"byte_end":22144,"line_start":473,"line_end":473,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":22683,"byte_end":22689,"line_start":488,"line_end":488,"column_start":19,"column_end":25},"name":"bucket","qualname":"<RawTable<T>>::bucket","value":"pub unsafe fn bucket(&Self, usize) -> Bucket<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a pointer to an element in the table.\n","sig":null,"attributes":[{"value":"/ Returns a pointer to an element in the table.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":22566,"byte_end":22615,"line_start":486,"line_end":486,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":23085,"byte_end":23098,"line_start":497,"line_end":497,"column_start":19,"column_end":32},"name":"erase_no_drop","qualname":"<RawTable<T>>::erase_no_drop","value":"pub unsafe fn erase_no_drop(&mut Self, &Bucket<T>)","parent":null,"children":[],"decl_id":null,"docs":" Erases an element from the table without dropping it.\n","sig":null,"attributes":[{"value":"/ Erases an element from the table without dropping it.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":22887,"byte_end":22944,"line_start":494,"line_end":494,"column_start":5,"column_end":62}},{"value":"deprecated(since = \"0.8.1\", note = \"use erase or remove instead\")","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":22998,"byte_end":23066,"line_start":496,"line_end":496,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":24428,"byte_end":24433,"line_start":526,"line_end":526,"column_start":19,"column_end":24},"name":"erase","qualname":"<RawTable<T>>::erase","value":"pub unsafe fn erase(&mut Self, Bucket<T>)","parent":null,"children":[],"decl_id":null,"docs":" Erases an element from the table, dropping it in place.\n","sig":null,"attributes":[{"value":"/ Erases an element from the table, dropping it in place.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":24231,"byte_end":24290,"line_start":522,"line_end":522,"column_start":5,"column_end":64}},{"value":"allow(clippy :: needless_pass_by_value)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":24344,"byte_end":24384,"line_start":524,"line_end":524,"column_start":5,"column_end":45}},{"value":"allow(deprecated)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":24389,"byte_end":24409,"line_start":525,"line_end":525,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":24795,"byte_end":24801,"line_start":536,"line_end":536,"column_start":19,"column_end":25},"name":"remove","qualname":"<RawTable<T>>::remove","value":"pub unsafe fn remove(&mut Self, Bucket<T>) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes an element from the table, returning it.\n","sig":null,"attributes":[{"value":"/ Removes an element from the table, returning it.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":24605,"byte_end":24657,"line_start":532,"line_end":532,"column_start":5,"column_end":57}},{"value":"allow(clippy :: needless_pass_by_value)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":24711,"byte_end":24751,"line_start":534,"line_end":534,"column_start":5,"column_end":45}},{"value":"allow(deprecated)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":24756,"byte_end":24776,"line_start":535,"line_end":535,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":28694,"byte_end":28707,"line_start":623,"line_end":623,"column_start":12,"column_end":25},"name":"clear_no_drop","qualname":"<RawTable<T>>::clear_no_drop","value":"pub fn clear_no_drop(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Marks all table buckets as empty without dropping their contents.\n","sig":null,"attributes":[{"value":"/ Marks all table buckets as empty without dropping their contents.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":28564,"byte_end":28633,"line_start":621,"line_end":621,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":29119,"byte_end":29124,"line_start":635,"line_end":635,"column_start":12,"column_end":17},"name":"clear","qualname":"<RawTable<T>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Removes all elements from the table without freeing the backing memory.\n","sig":null,"attributes":[{"value":"/ Removes all elements from the table without freeing the backing memory.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":28983,"byte_end":29058,"line_start":633,"line_end":633,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":29589,"byte_end":29598,"line_start":650,"line_end":650,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<RawTable<T>>::shrink_to","value":"pub fn shrink_to<impl Fn(&T) -> u64: Fn(&T) ->\n                 u64>(&mut Self, usize, impl Fn(&T) -> u64)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the table to fit `max(self.len(), min_size)` elements.\n","sig":null,"attributes":[{"value":"/ Shrinks the table to fit `max(self.len(), min_size)` elements.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":29462,"byte_end":29528,"line_start":648,"line_end":648,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":30912,"byte_end":30919,"line_start":683,"line_end":683,"column_start":12,"column_end":19},"name":"reserve","qualname":"<RawTable<T>>::reserve","value":"pub fn reserve<impl Fn(&T) -> u64: Fn(&T) ->\n               u64>(&mut Self, usize, impl Fn(&T) -> u64)","parent":null,"children":[],"decl_id":null,"docs":" Ensures that at least `additional` items can be inserted into the table\n without reallocation.\n","sig":null,"attributes":[{"value":"/ Ensures that at least `additional` items can be inserted into the table","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":30746,"byte_end":30821,"line_start":680,"line_end":680,"column_start":5,"column_end":80}},{"value":"/ without reallocation.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":30826,"byte_end":30851,"line_start":681,"line_end":681,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":31374,"byte_end":31385,"line_start":693,"line_end":693,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<RawTable<T>>::try_reserve","value":"pub fn try_reserve<impl Fn(&T) -> u64: Fn(&T) ->\n                   u64>(&mut Self, usize, impl Fn(&T) -> u64)\n-> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to ensure that at least `additional` items can be inserted into\n the table without reallocation.\n","sig":null,"attributes":[{"value":"/ Tries to ensure that at least `additional` items can be inserted into","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":31200,"byte_end":31273,"line_start":690,"line_end":690,"column_start":5,"column_end":78}},{"value":"/ the table without reallocation.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":31278,"byte_end":31313,"line_start":691,"line_end":691,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":39709,"byte_end":39715,"line_start":891,"line_end":891,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawTable<T>>::insert","value":"pub fn insert<impl Fn(&T) -> u64: Fn(&T) ->\n              u64>(&mut Self, u64, T, impl Fn(&T) -> u64) -> Bucket<T>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new element into the table.","sig":null,"attributes":[{"value":"/ Inserts a new element into the table.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":39521,"byte_end":39562,"line_start":887,"line_end":887,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":39567,"byte_end":39570,"line_start":888,"line_end":888,"column_start":5,"column_end":8}},{"value":"/ This does not check if the given element already exists in the table.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":39575,"byte_end":39648,"line_start":889,"line_end":889,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":40942,"byte_end":40956,"line_start":920,"line_end":920,"column_start":12,"column_end":26},"name":"insert_no_grow","qualname":"<RawTable<T>>::insert_no_grow","value":"pub fn insert_no_grow(&mut Self, u64, T) -> Bucket<T>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new element into the table, without growing the table.","sig":null,"attributes":[{"value":"/ Inserts a new element into the table, without growing the table.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":40579,"byte_end":40647,"line_start":913,"line_end":913,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":40652,"byte_end":40655,"line_start":914,"line_end":914,"column_start":5,"column_end":8}},{"value":"/ There must be enough space in the table to insert the new element.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":40660,"byte_end":40730,"line_start":915,"line_end":915,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":40735,"byte_end":40738,"line_start":916,"line_end":916,"column_start":5,"column_end":8}},{"value":"/ This does not check if the given element already exists in the table.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":40743,"byte_end":40816,"line_start":917,"line_end":917,"column_start":5,"column_end":78}},{"value":"cfg(any(feature = \"raw\", feature = \"rustc-internal-api\"))","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":40870,"byte_end":40930,"line_start":919,"line_end":919,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":41562,"byte_end":41566,"line_start":939,"line_end":939,"column_start":12,"column_end":16},"name":"find","qualname":"<RawTable<T>>::find","value":"pub fn find<impl FnMut(&T) -> bool: FnMut(&T) ->\n            bool>(&Self, u64, impl FnMut(&T) -> bool) -> Option<Bucket<T>>","parent":null,"children":[],"decl_id":null,"docs":" Searches for an element in the table.\n","sig":null,"attributes":[{"value":"/ Searches for an element in the table.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":41495,"byte_end":41536,"line_start":937,"line_end":937,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":41541,"byte_end":41550,"line_start":938,"line_end":938,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":42564,"byte_end":42572,"line_start":965,"line_end":965,"column_start":12,"column_end":20},"name":"capacity","qualname":"<RawTable<T>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the map can hold without reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the map can hold without reallocating.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":42281,"byte_end":42354,"line_start":960,"line_end":960,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":42359,"byte_end":42362,"line_start":961,"line_end":961,"column_start":5,"column_end":8}},{"value":"/ This number is a lower bound; the table might be able to hold","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":42367,"byte_end":42432,"line_start":962,"line_end":962,"column_start":5,"column_end":70}},{"value":"/ more, but is guaranteed to be able to hold at least this many.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":42437,"byte_end":42503,"line_start":963,"line_end":963,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":42749,"byte_end":42752,"line_start":971,"line_end":971,"column_start":12,"column_end":15},"name":"len","qualname":"<RawTable<T>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the table.\n","sig":null,"attributes":[{"value":"/ Returns the number of elements in the table.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":42640,"byte_end":42688,"line_start":969,"line_end":969,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":42909,"byte_end":42916,"line_start":977,"line_end":977,"column_start":12,"column_end":19},"name":"buckets","qualname":"<RawTable<T>>::buckets","value":"pub fn buckets(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of buckets in the table.\n","sig":null,"attributes":[{"value":"/ Returns the number of buckets in the table.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":42801,"byte_end":42848,"line_start":975,"line_end":975,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":43737,"byte_end":43741,"line_start":999,"line_end":999,"column_start":19,"column_end":23},"name":"iter","qualname":"<RawTable<T>>::iter","value":"pub unsafe fn iter(&Self) -> RawIter<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over every element in the table. It is up to\n the caller to ensure that the `RawTable` outlives the `RawIter`.\n Because we cannot make the `next` method unsafe on the `RawIter`\n struct, we have to make the `iter` method unsafe.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over every element in the table. It is up to","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":43397,"byte_end":43465,"line_start":994,"line_end":994,"column_start":5,"column_end":73}},{"value":"/ the caller to ensure that the `RawTable` outlives the `RawIter`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":43470,"byte_end":43538,"line_start":995,"line_end":995,"column_start":5,"column_end":73}},{"value":"/ Because we cannot make the `next` method unsafe on the `RawIter`","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":43543,"byte_end":43611,"line_start":996,"line_end":996,"column_start":5,"column_end":73}},{"value":"/ struct, we have to make the `iter` method unsafe.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":43616,"byte_end":43669,"line_start":997,"line_end":997,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":44367,"byte_end":44372,"line_start":1014,"line_end":1014,"column_start":19,"column_end":24},"name":"drain","qualname":"<RawTable<T>>::drain","value":"pub unsafe fn drain(&mut Self) -> RawDrain<, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator which removes all elements from the table without\n freeing the memory.","sig":null,"attributes":[{"value":"/ Returns an iterator which removes all elements from the table without","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":43978,"byte_end":44051,"line_start":1007,"line_end":1007,"column_start":5,"column_end":78}},{"value":"/ freeing the memory.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":44056,"byte_end":44079,"line_start":1008,"line_end":1008,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":44084,"byte_end":44087,"line_start":1009,"line_end":1009,"column_start":5,"column_end":8}},{"value":"/ It is up to the caller to ensure that the `RawTable` outlives the `RawDrain`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":44092,"byte_end":44173,"line_start":1010,"line_end":1010,"column_start":5,"column_end":86}},{"value":"/ Because we cannot make the `next` method unsafe on the `RawDrain`,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":44178,"byte_end":44248,"line_start":1011,"line_end":1011,"column_start":5,"column_end":75}},{"value":"/ we have to make the `drain` method unsafe.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":44253,"byte_end":44299,"line_start":1012,"line_end":1012,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":45035,"byte_end":45050,"line_start":1029,"line_end":1029,"column_start":19,"column_end":34},"name":"drain_iter_from","qualname":"<RawTable<T>>::drain_iter_from","value":"pub unsafe fn drain_iter_from(&mut Self, RawIter<T>) -> RawDrain<, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator which removes all elements from the table without\n freeing the memory.","sig":null,"attributes":[{"value":"/ Returns an iterator which removes all elements from the table without","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":44483,"byte_end":44556,"line_start":1019,"line_end":1019,"column_start":5,"column_end":78}},{"value":"/ freeing the memory.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":44561,"byte_end":44584,"line_start":1020,"line_end":1020,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":44589,"byte_end":44592,"line_start":1021,"line_end":1021,"column_start":5,"column_end":8}},{"value":"/ It is up to the caller to ensure that the `RawTable` outlives the `RawDrain`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":44597,"byte_end":44678,"line_start":1022,"line_end":1022,"column_start":5,"column_end":86}},{"value":"/ Because we cannot make the `next` method unsafe on the `RawDrain`,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":44683,"byte_end":44753,"line_start":1023,"line_end":1023,"column_start":5,"column_end":75}},{"value":"/ we have to make the `drain` method unsafe.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":44758,"byte_end":44804,"line_start":1024,"line_end":1024,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":44809,"byte_end":44812,"line_start":1025,"line_end":1025,"column_start":5,"column_end":8}},{"value":"/ Iteration starts at the provided iterator's current location.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":44817,"byte_end":44882,"line_start":1026,"line_end":1026,"column_start":5,"column_end":70}},{"value":"/ You must ensure that the iterator covers all items that remain in the table.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":44887,"byte_end":44967,"line_start":1027,"line_end":1027,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":45842,"byte_end":45856,"line_start":1047,"line_end":1047,"column_start":19,"column_end":33},"name":"into_iter_from","qualname":"<RawTable<T>>::into_iter_from","value":"pub unsafe fn into_iter_from(Self, RawIter<T>) -> RawIntoIter<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator which consumes all elements from the table.","sig":null,"attributes":[{"value":"/ Returns an iterator which consumes all elements from the table.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":45358,"byte_end":45425,"line_start":1039,"line_end":1039,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":45430,"byte_end":45433,"line_start":1040,"line_end":1040,"column_start":5,"column_end":8}},{"value":"/ It is up to the caller to ensure that the `RawTable` outlives the `RawIntoIter`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":45438,"byte_end":45522,"line_start":1041,"line_end":1041,"column_start":5,"column_end":89}},{"value":"/ Because we cannot make the `next` method unsafe on the `RawIntoIter`,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":45527,"byte_end":45600,"line_start":1042,"line_end":1042,"column_start":5,"column_end":78}},{"value":"/ we have to make the `into_iter_from` method unsafe.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":45605,"byte_end":45660,"line_start":1043,"line_end":1043,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":45665,"byte_end":45668,"line_start":1044,"line_end":1044,"column_start":5,"column_end":8}},{"value":"/ Iteration starts at the provided iterator's current location.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":45673,"byte_end":45738,"line_start":1045,"line_end":1045,"column_start":5,"column_end":70}},{"value":"/ You must ensure that the iterator covers all items that remain in the table.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":45743,"byte_end":45823,"line_start":1046,"line_end":1046,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":51551,"byte_end":51573,"line_start":1208,"line_end":1208,"column_start":12,"column_end":34},"name":"clone_from_with_hasher","qualname":"<RawTable<T>>::clone_from_with_hasher","value":"pub fn clone_from_with_hasher<impl Fn(&T) -> u64: Fn(&T) ->\n                              u64>(&mut Self, &Self, impl Fn(&T) -> u64)","parent":null,"children":[],"decl_id":null,"docs":" Variant of `clone_from` to use when a hasher is available.\n","sig":null,"attributes":[{"value":"/ Variant of `clone_from` to use when a hasher is available.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":51449,"byte_end":51511,"line_start":1206,"line_end":1206,"column_start":5,"column_end":67}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":51516,"byte_end":51539,"line_start":1207,"line_end":1207,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":253},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":59843,"byte_end":59850,"line_start":1441,"line_end":1441,"column_start":12,"column_end":19},"name":"RawIter","qualname":"::raw::inner::RawIter","value":"RawIter {  }","parent":null,"children":[{"krate":0,"index":255},{"krate":0,"index":256}],"decl_id":null,"docs":" Iterator which returns a raw pointer to every full bucket in the table.\n","sig":null,"attributes":[{"value":"/ Iterator which returns a raw pointer to every full bucket in the table.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":59756,"byte_end":59831,"line_start":1440,"line_end":1440,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":60393,"byte_end":60407,"line_start":1455,"line_end":1455,"column_start":12,"column_end":26},"name":"reflect_remove","qualname":"<RawIter<T>>::reflect_remove","value":"pub fn reflect_remove(&mut Self, &Bucket<T>)","parent":null,"children":[],"decl_id":null,"docs":" Refresh the iterator so that it reflects a removal from the given bucket.","sig":null,"attributes":[{"value":"/ Refresh the iterator so that it reflects a removal from the given bucket.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":59940,"byte_end":60017,"line_start":1447,"line_end":1447,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":60022,"byte_end":60025,"line_start":1448,"line_end":1448,"column_start":5,"column_end":8}},{"value":"/ For the iterator to remain valid, this method must be called once","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":60030,"byte_end":60099,"line_start":1449,"line_end":1449,"column_start":5,"column_end":74}},{"value":"/ for each removed bucket before `next` is called again.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":60104,"byte_end":60162,"line_start":1450,"line_end":1450,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":60167,"byte_end":60170,"line_start":1451,"line_end":1451,"column_start":5,"column_end":8}},{"value":"/ This method should be called _before_ the removal is made. It is not necessary to call this","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":60175,"byte_end":60270,"line_start":1452,"line_end":1452,"column_start":5,"column_end":100}},{"value":"/ method if you are removing an item that this iterator yielded in the past.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":60275,"byte_end":60353,"line_start":1453,"line_end":1453,"column_start":5,"column_end":83}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":60358,"byte_end":60381,"line_start":1454,"line_end":1454,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":60993,"byte_end":61007,"line_start":1469,"line_end":1469,"column_start":12,"column_end":26},"name":"reflect_insert","qualname":"<RawIter<T>>::reflect_insert","value":"pub fn reflect_insert(&mut Self, &Bucket<T>)","parent":null,"children":[],"decl_id":null,"docs":" Refresh the iterator so that it reflects an insertion into the given bucket.","sig":null,"attributes":[{"value":"/ Refresh the iterator so that it reflects an insertion into the given bucket.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":60491,"byte_end":60571,"line_start":1459,"line_end":1459,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":60576,"byte_end":60579,"line_start":1460,"line_end":1460,"column_start":5,"column_end":8}},{"value":"/ For the iterator to remain valid, this method must be called once","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":60584,"byte_end":60653,"line_start":1461,"line_end":1461,"column_start":5,"column_end":74}},{"value":"/ for each insert before `next` is called again.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":60658,"byte_end":60708,"line_start":1462,"line_end":1462,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":60713,"byte_end":60716,"line_start":1463,"line_end":1463,"column_start":5,"column_end":8}},{"value":"/ This method does not guarantee that an insertion of a bucket witha greater","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":60721,"byte_end":60799,"line_start":1464,"line_end":1464,"column_start":5,"column_end":83}},{"value":"/ index than the last one yielded will be reflected in the iterator.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":60804,"byte_end":60874,"line_start":1465,"line_end":1465,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":60879,"byte_end":60882,"line_start":1466,"line_end":1466,"column_start":5,"column_end":8}},{"value":"/ This method should be called _after_ the given insert is made.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":60887,"byte_end":60953,"line_start":1467,"line_end":1467,"column_start":5,"column_end":71}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":60958,"byte_end":60981,"line_start":1468,"line_end":1468,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":274},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":66900,"byte_end":66911,"line_start":1601,"line_end":1601,"column_start":12,"column_end":23},"name":"RawIntoIter","qualname":"::raw::inner::RawIntoIter","value":"RawIntoIter {  }","parent":null,"children":[{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278}],"decl_id":null,"docs":" Iterator which consumes a table and returns elements.\n","sig":null,"attributes":[{"value":"/ Iterator which consumes a table and returns elements.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":66831,"byte_end":66888,"line_start":1600,"line_end":1600,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":67097,"byte_end":67101,"line_start":1609,"line_end":1609,"column_start":12,"column_end":16},"name":"iter","qualname":"<RawIntoIter<T>>::iter","value":"pub fn iter(&Self) -> RawIter<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":298},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":68864,"byte_end":68872,"line_start":1674,"line_end":1674,"column_start":12,"column_end":20},"name":"RawDrain","qualname":"::raw::inner::RawDrain","value":"RawDrain {  }","parent":null,"children":[{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304}],"decl_id":null,"docs":" Iterator which consumes elements without freeing the table storage.\n","sig":null,"attributes":[{"value":"/ Iterator which consumes elements without freeing the table storage.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":68781,"byte_end":68852,"line_start":1673,"line_end":1673,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":69391,"byte_end":69395,"line_start":1690,"line_end":1690,"column_start":12,"column_end":16},"name":"iter","qualname":"<RawDrain>::iter","value":"pub fn iter(&Self) -> RawIter<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":382},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":75286,"byte_end":75304,"line_start":17,"line_end":17,"column_start":10,"column_end":28},"name":"DefaultHashBuilder","qualname":"::map::DefaultHashBuilder","value":"pub enum DefaultHashBuilder { }","parent":null,"children":[],"decl_id":null,"docs":" Dummy default hasher for `HashMap`.\n","sig":null,"attributes":[{"value":"/ Dummy default hasher for `HashMap`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":75206,"byte_end":75245,"line_start":15,"line_end":15,"column_start":1,"column_end":40}},{"value":"cfg(not(feature = \"ahash\"))","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":75246,"byte_end":75276,"line_start":16,"line_end":16,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":383},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":81575,"byte_end":81582,"line_start":188,"line_end":188,"column_start":12,"column_end":19},"name":"HashMap","qualname":"::map::HashMap","value":"HashMap {  }","parent":null,"children":[{"krate":0,"index":387},{"krate":0,"index":388}],"decl_id":null,"docs":" A hash map implemented with quadratic probing and SIMD lookup.","sig":null,"attributes":[{"value":"/ A hash map implemented with quadratic probing and SIMD lookup.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":75309,"byte_end":75375,"line_start":19,"line_end":19,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":75376,"byte_end":75379,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ The default hashing algorithm is currently [`AHash`], though this is","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":75380,"byte_end":75452,"line_start":21,"line_end":21,"column_start":1,"column_end":73}},{"value":"/ subject to change at any point in the future. This hash function is very","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":75453,"byte_end":75529,"line_start":22,"line_end":22,"column_start":1,"column_end":77}},{"value":"/ fast for all types of keys, but this algorithm will typically *not* protect","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":75530,"byte_end":75609,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ against attacks such as HashDoS.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":75610,"byte_end":75646,"line_start":24,"line_end":24,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":75647,"byte_end":75650,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The hashing algorithm can be replaced on a per-`HashMap` basis using the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":75651,"byte_end":75727,"line_start":26,"line_end":26,"column_start":1,"column_end":77}},{"value":"/ [`default`], [`with_hasher`], and [`with_capacity_and_hasher`] methods. Many","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":75728,"byte_end":75808,"line_start":27,"line_end":27,"column_start":1,"column_end":81}},{"value":"/ alternative algorithms are available on crates.io, such as the [`fnv`] crate.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":75809,"byte_end":75890,"line_start":28,"line_end":28,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":75891,"byte_end":75894,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ It is required that the keys implement the [`Eq`] and [`Hash`] traits, although","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":75895,"byte_end":75978,"line_start":30,"line_end":30,"column_start":1,"column_end":84}},{"value":"/ this can frequently be achieved by using `#[derive(PartialEq, Eq, Hash)]`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":75979,"byte_end":76057,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/ If you implement these yourself, it is important that the following","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":76058,"byte_end":76129,"line_start":32,"line_end":32,"column_start":1,"column_end":72}},{"value":"/ property holds:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":76130,"byte_end":76149,"line_start":33,"line_end":33,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":76150,"byte_end":76153,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":76154,"byte_end":76165,"line_start":35,"line_end":35,"column_start":1,"column_end":12}},{"value":"/ k1 == k2 -> hash(k1) == hash(k2)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":76166,"byte_end":76202,"line_start":36,"line_end":36,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":76203,"byte_end":76210,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":76211,"byte_end":76214,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ In other words, if two keys are equal, their hashes must be equal.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":76215,"byte_end":76285,"line_start":39,"line_end":39,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":76286,"byte_end":76289,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for a key to be modified in such a way that the key's","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":76290,"byte_end":76367,"line_start":41,"line_end":41,"column_start":1,"column_end":78}},{"value":"/ hash, as determined by the [`Hash`] trait, or its equality, as determined by","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":76368,"byte_end":76448,"line_start":42,"line_end":42,"column_start":1,"column_end":81}},{"value":"/ the [`Eq`] trait, changes while it is in the map. This is normally only","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":76449,"byte_end":76524,"line_start":43,"line_end":43,"column_start":1,"column_end":76}},{"value":"/ possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":76525,"byte_end":76603,"line_start":44,"line_end":44,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":76604,"byte_end":76607,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ It is also a logic error for the [`Hash`] implementation of a key to panic.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":76608,"byte_end":76687,"line_start":46,"line_end":46,"column_start":1,"column_end":80}},{"value":"/ This is generally only possible if the trait is implemented manually. If a","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":76688,"byte_end":76766,"line_start":47,"line_end":47,"column_start":1,"column_end":79}},{"value":"/ panic does occur then the contents of the `HashMap` may become corrupted and","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":76767,"byte_end":76847,"line_start":48,"line_end":48,"column_start":1,"column_end":81}},{"value":"/ some items may be dropped from the table.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":76848,"byte_end":76893,"line_start":49,"line_end":49,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":76894,"byte_end":76897,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":76898,"byte_end":76912,"line_start":51,"line_end":51,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":76913,"byte_end":76916,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":76917,"byte_end":76924,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":76925,"byte_end":76952,"line_start":54,"line_end":54,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":76953,"byte_end":76956,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ // Type inference lets us omit an explicit type signature (which","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":76957,"byte_end":77025,"line_start":56,"line_end":56,"column_start":1,"column_end":69}},{"value":"/ // would be `HashMap<String, String>` in this example).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77026,"byte_end":77085,"line_start":57,"line_end":57,"column_start":1,"column_end":60}},{"value":"/ let mut book_reviews = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77086,"byte_end":77128,"line_start":58,"line_end":58,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77129,"byte_end":77132,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // Review some books.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77133,"byte_end":77158,"line_start":60,"line_end":60,"column_start":1,"column_end":26}},{"value":"/ book_reviews.insert(","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77159,"byte_end":77183,"line_start":61,"line_end":61,"column_start":1,"column_end":25}},{"value":"/     \"Adventures of Huckleberry Finn\".to_string(),","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77184,"byte_end":77237,"line_start":62,"line_end":62,"column_start":1,"column_end":54}},{"value":"/     \"My favorite book.\".to_string(),","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77238,"byte_end":77278,"line_start":63,"line_end":63,"column_start":1,"column_end":41}},{"value":"/ );","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77279,"byte_end":77285,"line_start":64,"line_end":64,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77286,"byte_end":77310,"line_start":65,"line_end":65,"column_start":1,"column_end":25}},{"value":"/     \"Grimms' Fairy Tales\".to_string(),","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77311,"byte_end":77353,"line_start":66,"line_end":66,"column_start":1,"column_end":43}},{"value":"/     \"Masterpiece.\".to_string(),","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77354,"byte_end":77389,"line_start":67,"line_end":67,"column_start":1,"column_end":36}},{"value":"/ );","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77390,"byte_end":77396,"line_start":68,"line_end":68,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77397,"byte_end":77421,"line_start":69,"line_end":69,"column_start":1,"column_end":25}},{"value":"/     \"Pride and Prejudice\".to_string(),","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77422,"byte_end":77464,"line_start":70,"line_end":70,"column_start":1,"column_end":43}},{"value":"/     \"Very enjoyable.\".to_string(),","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77465,"byte_end":77503,"line_start":71,"line_end":71,"column_start":1,"column_end":39}},{"value":"/ );","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77504,"byte_end":77510,"line_start":72,"line_end":72,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77511,"byte_end":77535,"line_start":73,"line_end":73,"column_start":1,"column_end":25}},{"value":"/     \"The Adventures of Sherlock Holmes\".to_string(),","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77536,"byte_end":77592,"line_start":74,"line_end":74,"column_start":1,"column_end":57}},{"value":"/     \"Eye lyked it alot.\".to_string(),","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77593,"byte_end":77634,"line_start":75,"line_end":75,"column_start":1,"column_end":42}},{"value":"/ );","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77635,"byte_end":77641,"line_start":76,"line_end":76,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77642,"byte_end":77645,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ // Check for a specific one.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77646,"byte_end":77678,"line_start":78,"line_end":78,"column_start":1,"column_end":33}},{"value":"/ // When collections store owned values (String), they can still be","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77679,"byte_end":77749,"line_start":79,"line_end":79,"column_start":1,"column_end":71}},{"value":"/ // queried using references (&str).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77750,"byte_end":77789,"line_start":80,"line_end":80,"column_start":1,"column_end":40}},{"value":"/ if !book_reviews.contains_key(\"Les Misérables\") {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77790,"byte_end":77844,"line_start":81,"line_end":81,"column_start":1,"column_end":54}},{"value":"/     println!(\"We've got {} reviews, but Les Misérables ain't one.\",","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77845,"byte_end":77917,"line_start":82,"line_end":82,"column_start":1,"column_end":72}},{"value":"/              book_reviews.len());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77918,"byte_end":77955,"line_start":83,"line_end":83,"column_start":1,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77956,"byte_end":77961,"line_start":84,"line_end":84,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77962,"byte_end":77965,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ // oops, this review has a lot of spelling mistakes, let's delete it.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":77966,"byte_end":78039,"line_start":86,"line_end":86,"column_start":1,"column_end":74}},{"value":"/ book_reviews.remove(\"The Adventures of Sherlock Holmes\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":78040,"byte_end":78101,"line_start":87,"line_end":87,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":78102,"byte_end":78105,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ // Look up the values associated with some keys.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":78106,"byte_end":78158,"line_start":89,"line_end":89,"column_start":1,"column_end":53}},{"value":"/ let to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":78159,"byte_end":78236,"line_start":90,"line_end":90,"column_start":1,"column_end":78}},{"value":"/ for &book in &to_find {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":78237,"byte_end":78264,"line_start":91,"line_end":91,"column_start":1,"column_end":28}},{"value":"/     match book_reviews.get(book) {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":78265,"byte_end":78303,"line_start":92,"line_end":92,"column_start":1,"column_end":39}},{"value":"/         Some(review) => println!(\"{}: {}\", book, review),","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":78304,"byte_end":78365,"line_start":93,"line_end":93,"column_start":1,"column_end":62}},{"value":"/         None => println!(\"{} is unreviewed.\", book)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":78366,"byte_end":78421,"line_start":94,"line_end":94,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":78422,"byte_end":78431,"line_start":95,"line_end":95,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":78432,"byte_end":78437,"line_start":96,"line_end":96,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":78438,"byte_end":78441,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ // Look up the value for a key (will panic if the key is not found).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":78442,"byte_end":78514,"line_start":98,"line_end":98,"column_start":1,"column_end":73}},{"value":"/ println!(\"Review for Jane: {}\", book_reviews[\"Pride and Prejudice\"]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":78515,"byte_end":78588,"line_start":99,"line_end":99,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":78589,"byte_end":78592,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ // Iterate over everything.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":78593,"byte_end":78624,"line_start":101,"line_end":101,"column_start":1,"column_end":32}},{"value":"/ for (book, review) in &book_reviews {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":78625,"byte_end":78666,"line_start":102,"line_end":102,"column_start":1,"column_end":42}},{"value":"/     println!(\"{}: \\\"{}\\\"\", book, review);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":78667,"byte_end":78712,"line_start":103,"line_end":103,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":78713,"byte_end":78718,"line_start":104,"line_end":104,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":78719,"byte_end":78726,"line_start":105,"line_end":105,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":78727,"byte_end":78730,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ `HashMap` also implements an [`Entry API`](#method.entry), which allows","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":78731,"byte_end":78806,"line_start":107,"line_end":107,"column_start":1,"column_end":76}},{"value":"/ for more complex methods of getting, setting, updating and removing keys and","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":78807,"byte_end":78887,"line_start":108,"line_end":108,"column_start":1,"column_end":81}},{"value":"/ their values:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":78888,"byte_end":78905,"line_start":109,"line_end":109,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":78906,"byte_end":78909,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":78910,"byte_end":78917,"line_start":111,"line_end":111,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":78918,"byte_end":78945,"line_start":112,"line_end":112,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":78946,"byte_end":78949,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ // type inference lets us omit an explicit type signature (which","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":78950,"byte_end":79018,"line_start":114,"line_end":114,"column_start":1,"column_end":69}},{"value":"/ // would be `HashMap<&str, u8>` in this example).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":79019,"byte_end":79072,"line_start":115,"line_end":115,"column_start":1,"column_end":54}},{"value":"/ let mut player_stats = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":79073,"byte_end":79115,"line_start":116,"line_end":116,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":79116,"byte_end":79119,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ fn random_stat_buff() -> u8 {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":79120,"byte_end":79153,"line_start":118,"line_end":118,"column_start":1,"column_end":34}},{"value":"/     // could actually return some random value here - let's just return","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":79154,"byte_end":79229,"line_start":119,"line_end":119,"column_start":1,"column_end":76}},{"value":"/     // some fixed value for now","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":79230,"byte_end":79265,"line_start":120,"line_end":120,"column_start":1,"column_end":36}},{"value":"/     42","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":79266,"byte_end":79276,"line_start":121,"line_end":121,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":79277,"byte_end":79282,"line_start":122,"line_end":122,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":79283,"byte_end":79286,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ // insert a key only if it doesn't already exist","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":79287,"byte_end":79339,"line_start":124,"line_end":124,"column_start":1,"column_end":53}},{"value":"/ player_stats.entry(\"health\").or_insert(100);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":79340,"byte_end":79388,"line_start":125,"line_end":125,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":79389,"byte_end":79392,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ // insert a key using a function that provides a new value only if it","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":79393,"byte_end":79466,"line_start":127,"line_end":127,"column_start":1,"column_end":74}},{"value":"/ // doesn't already exist","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":79467,"byte_end":79495,"line_start":128,"line_end":128,"column_start":1,"column_end":29}},{"value":"/ player_stats.entry(\"defence\").or_insert_with(random_stat_buff);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":79496,"byte_end":79563,"line_start":129,"line_end":129,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":79564,"byte_end":79567,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ // update a key, guarding against the key possibly not being set","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":79568,"byte_end":79636,"line_start":131,"line_end":131,"column_start":1,"column_end":69}},{"value":"/ let stat = player_stats.entry(\"attack\").or_insert(100);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":79637,"byte_end":79696,"line_start":132,"line_end":132,"column_start":1,"column_end":60}},{"value":"/ *stat += random_stat_buff();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":79697,"byte_end":79729,"line_start":133,"line_end":133,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":79730,"byte_end":79737,"line_start":134,"line_end":134,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":79738,"byte_end":79741,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ The easiest way to use `HashMap` with a custom key type is to derive [`Eq`] and [`Hash`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":79742,"byte_end":79835,"line_start":136,"line_end":136,"column_start":1,"column_end":94}},{"value":"/ We must also derive [`PartialEq`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":79836,"byte_end":79874,"line_start":137,"line_end":137,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":79875,"byte_end":79878,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":79879,"byte_end":79938,"line_start":139,"line_end":139,"column_start":1,"column_end":60}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":79939,"byte_end":80003,"line_start":140,"line_end":140,"column_start":1,"column_end":65}},{"value":"/ [`PartialEq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80004,"byte_end":80077,"line_start":141,"line_end":141,"column_start":1,"column_end":74}},{"value":"/ [`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80078,"byte_end":80149,"line_start":142,"line_end":142,"column_start":1,"column_end":72}},{"value":"/ [`Cell`]: https://doc.rust-lang.org/std/cell/struct.Cell.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80150,"byte_end":80215,"line_start":143,"line_end":143,"column_start":1,"column_end":66}},{"value":"/ [`default`]: #method.default","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80216,"byte_end":80248,"line_start":144,"line_end":144,"column_start":1,"column_end":33}},{"value":"/ [`with_hasher`]: #method.with_hasher","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80249,"byte_end":80289,"line_start":145,"line_end":145,"column_start":1,"column_end":41}},{"value":"/ [`with_capacity_and_hasher`]: #method.with_capacity_and_hasher","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80290,"byte_end":80356,"line_start":146,"line_end":146,"column_start":1,"column_end":67}},{"value":"/ [`fnv`]: https://crates.io/crates/fnv","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80357,"byte_end":80398,"line_start":147,"line_end":147,"column_start":1,"column_end":42}},{"value":"/ [`AHash`]: https://crates.io/crates/ahash","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80399,"byte_end":80444,"line_start":148,"line_end":148,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80445,"byte_end":80448,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80449,"byte_end":80456,"line_start":150,"line_end":150,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80457,"byte_end":80484,"line_start":151,"line_end":151,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80485,"byte_end":80488,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ #[derive(Hash, Eq, PartialEq, Debug)]","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80489,"byte_end":80530,"line_start":153,"line_end":153,"column_start":1,"column_end":42}},{"value":"/ struct Viking {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80531,"byte_end":80550,"line_start":154,"line_end":154,"column_start":1,"column_end":20}},{"value":"/     name: String,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80551,"byte_end":80572,"line_start":155,"line_end":155,"column_start":1,"column_end":22}},{"value":"/     country: String,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80573,"byte_end":80597,"line_start":156,"line_end":156,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80598,"byte_end":80603,"line_start":157,"line_end":157,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80604,"byte_end":80607,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ impl Viking {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80608,"byte_end":80625,"line_start":159,"line_end":159,"column_start":1,"column_end":18}},{"value":"/     /// Creates a new Viking.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80626,"byte_end":80659,"line_start":160,"line_end":160,"column_start":1,"column_end":34}},{"value":"/     fn new(name: &str, country: &str) -> Viking {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80660,"byte_end":80713,"line_start":161,"line_end":161,"column_start":1,"column_end":54}},{"value":"/         Viking { name: name.to_string(), country: country.to_string() }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80714,"byte_end":80789,"line_start":162,"line_end":162,"column_start":1,"column_end":76}},{"value":"/     }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80790,"byte_end":80799,"line_start":163,"line_end":163,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80800,"byte_end":80805,"line_start":164,"line_end":164,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80806,"byte_end":80809,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ // Use a HashMap to store the vikings' health points.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80810,"byte_end":80867,"line_start":166,"line_end":166,"column_start":1,"column_end":58}},{"value":"/ let mut vikings = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80868,"byte_end":80905,"line_start":167,"line_end":167,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80906,"byte_end":80909,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ vikings.insert(Viking::new(\"Einar\", \"Norway\"), 25);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80910,"byte_end":80965,"line_start":169,"line_end":169,"column_start":1,"column_end":56}},{"value":"/ vikings.insert(Viking::new(\"Olaf\", \"Denmark\"), 24);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":80966,"byte_end":81021,"line_start":170,"line_end":170,"column_start":1,"column_end":56}},{"value":"/ vikings.insert(Viking::new(\"Harald\", \"Iceland\"), 12);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":81022,"byte_end":81079,"line_start":171,"line_end":171,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":81080,"byte_end":81083,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ // Use derived implementation to print the status of the vikings.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":81084,"byte_end":81153,"line_start":173,"line_end":173,"column_start":1,"column_end":70}},{"value":"/ for (viking, health) in &vikings {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":81154,"byte_end":81192,"line_start":174,"line_end":174,"column_start":1,"column_end":39}},{"value":"/     println!(\"{:?} has {} hp\", viking, health);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":81193,"byte_end":81244,"line_start":175,"line_end":175,"column_start":1,"column_end":52}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":81245,"byte_end":81250,"line_start":176,"line_end":176,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":81251,"byte_end":81258,"line_start":177,"line_end":177,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":81259,"byte_end":81262,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ A `HashMap` with fixed list of elements can be initialized from an array:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":81263,"byte_end":81340,"line_start":179,"line_end":179,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":81341,"byte_end":81344,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":81345,"byte_end":81352,"line_start":181,"line_end":181,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":81353,"byte_end":81380,"line_start":182,"line_end":182,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":81381,"byte_end":81384,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ let timber_resources: HashMap<&str, i32> = [(\"Norway\", 100), (\"Denmark\", 50), (\"Iceland\", 10)]","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":81385,"byte_end":81483,"line_start":184,"line_end":184,"column_start":1,"column_end":99}},{"value":"/     .iter().cloned().collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":81484,"byte_end":81519,"line_start":185,"line_end":185,"column_start":1,"column_end":36}},{"value":"/ // use the values stored in map","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":81520,"byte_end":81555,"line_start":186,"line_end":186,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":81556,"byte_end":81563,"line_start":187,"line_end":187,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":84500,"byte_end":84511,"line_start":278,"line_end":278,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<HashMap<K, V, S>>::with_hasher","value":"pub fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` which will use the given hash builder to hash\n keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` which will use the given hash builder to hash","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":83499,"byte_end":83575,"line_start":252,"line_end":252,"column_start":5,"column_end":81}},{"value":"/ keys.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":83580,"byte_end":83589,"line_start":253,"line_end":253,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":83594,"byte_end":83597,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ The created map has the default initial capacity.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":83602,"byte_end":83655,"line_start":255,"line_end":255,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":83660,"byte_end":83663,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ Warning: `hash_builder` is normally randomly generated, and","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":83668,"byte_end":83731,"line_start":257,"line_end":257,"column_start":5,"column_end":68}},{"value":"/ is designed to allow HashMaps to be resistant to attacks that","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":83736,"byte_end":83801,"line_start":258,"line_end":258,"column_start":5,"column_end":70}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":83806,"byte_end":83869,"line_start":259,"line_end":259,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":83874,"byte_end":83938,"line_start":260,"line_end":260,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":83943,"byte_end":83946,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ The `hash_builder` passed should implement the [`BuildHasher`] trait for","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":83951,"byte_end":84027,"line_start":262,"line_end":262,"column_start":5,"column_end":81}},{"value":"/ the HashMap to be useful, see its documentation for details.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":84032,"byte_end":84096,"line_start":263,"line_end":263,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":84101,"byte_end":84104,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":84109,"byte_end":84123,"line_start":265,"line_end":265,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":84128,"byte_end":84131,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":84136,"byte_end":84143,"line_start":267,"line_end":267,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":84148,"byte_end":84175,"line_start":268,"line_end":268,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":84180,"byte_end":84228,"line_start":269,"line_end":269,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":84233,"byte_end":84236,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":84241,"byte_end":84283,"line_start":271,"line_end":271,"column_start":5,"column_end":47}},{"value":"/ let mut map = HashMap::with_hasher(s);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":84288,"byte_end":84330,"line_start":272,"line_end":272,"column_start":5,"column_end":47}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":84335,"byte_end":84356,"line_start":273,"line_end":273,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":84361,"byte_end":84368,"line_start":274,"line_end":274,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":84373,"byte_end":84376,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":84381,"byte_end":84439,"line_start":276,"line_end":276,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":85766,"byte_end":85790,"line_start":312,"line_end":312,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<HashMap<K, V, S>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` with the specified capacity, using `hash_builder`\n to hash the keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` with the specified capacity, using `hash_builder`","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":84637,"byte_end":84717,"line_start":285,"line_end":285,"column_start":5,"column_end":85}},{"value":"/ to hash the keys.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":84722,"byte_end":84743,"line_start":286,"line_end":286,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":84748,"byte_end":84751,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ The hash map will be able to hold at least `capacity` elements without","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":84756,"byte_end":84830,"line_start":288,"line_end":288,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash map will not allocate.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":84835,"byte_end":84904,"line_start":289,"line_end":289,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":84909,"byte_end":84912,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ Warning: `hash_builder` is normally randomly generated, and","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":84917,"byte_end":84980,"line_start":291,"line_end":291,"column_start":5,"column_end":68}},{"value":"/ is designed to allow HashMaps to be resistant to attacks that","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":84985,"byte_end":85050,"line_start":292,"line_end":292,"column_start":5,"column_end":70}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":85055,"byte_end":85118,"line_start":293,"line_end":293,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":85123,"byte_end":85187,"line_start":294,"line_end":294,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":85192,"byte_end":85195,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ The `hash_builder` passed should implement the [`BuildHasher`] trait for","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":85200,"byte_end":85276,"line_start":296,"line_end":296,"column_start":5,"column_end":81}},{"value":"/ the HashMap to be useful, see its documentation for details.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":85281,"byte_end":85345,"line_start":297,"line_end":297,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":85350,"byte_end":85353,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":85358,"byte_end":85372,"line_start":299,"line_end":299,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":85377,"byte_end":85380,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":85385,"byte_end":85392,"line_start":301,"line_end":301,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":85397,"byte_end":85424,"line_start":302,"line_end":302,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":85429,"byte_end":85477,"line_start":303,"line_end":303,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":85482,"byte_end":85485,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":85490,"byte_end":85532,"line_start":305,"line_end":305,"column_start":5,"column_end":47}},{"value":"/ let mut map = HashMap::with_capacity_and_hasher(10, s);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":85537,"byte_end":85596,"line_start":306,"line_end":306,"column_start":5,"column_end":64}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":85601,"byte_end":85622,"line_start":307,"line_end":307,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":85627,"byte_end":85634,"line_start":308,"line_end":308,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":85639,"byte_end":85642,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":85647,"byte_end":85705,"line_start":310,"line_end":310,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":86483,"byte_end":86489,"line_start":334,"line_end":334,"column_start":12,"column_end":18},"name":"hasher","qualname":"<HashMap<K, V, S>>::hasher","value":"pub fn hasher(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the map's [`BuildHasher`].","sig":null,"attributes":[{"value":"/ Returns a reference to the map's [`BuildHasher`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":85951,"byte_end":86004,"line_start":319,"line_end":319,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":86009,"byte_end":86012,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":86017,"byte_end":86095,"line_start":321,"line_end":321,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":86100,"byte_end":86103,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":86108,"byte_end":86122,"line_start":323,"line_end":323,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":86127,"byte_end":86130,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":86135,"byte_end":86142,"line_start":325,"line_end":325,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":86147,"byte_end":86174,"line_start":326,"line_end":326,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":86179,"byte_end":86227,"line_start":327,"line_end":327,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":86232,"byte_end":86235,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ let hasher = DefaultHashBuilder::default();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":86240,"byte_end":86287,"line_start":329,"line_end":329,"column_start":5,"column_end":52}},{"value":"/ let map: HashMap<i32, i32> = HashMap::with_hasher(hasher);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":86292,"byte_end":86354,"line_start":330,"line_end":330,"column_start":5,"column_end":67}},{"value":"/ let hasher: &DefaultHashBuilder = map.hasher();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":86359,"byte_end":86410,"line_start":331,"line_end":331,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":86415,"byte_end":86422,"line_start":332,"line_end":332,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87033,"byte_end":87041,"line_start":351,"line_end":351,"column_start":12,"column_end":20},"name":"capacity","qualname":"<HashMap<K, V, S>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the map can hold without reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the map can hold without reallocating.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":86543,"byte_end":86616,"line_start":338,"line_end":338,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":86621,"byte_end":86624,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ This number is a lower bound; the `HashMap<K, V>` might be able to hold","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":86629,"byte_end":86704,"line_start":340,"line_end":340,"column_start":5,"column_end":80}},{"value":"/ more, but is guaranteed to be able to hold at least this many.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":86709,"byte_end":86775,"line_start":341,"line_end":341,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":86780,"byte_end":86783,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":86788,"byte_end":86802,"line_start":343,"line_end":343,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":86807,"byte_end":86810,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":86815,"byte_end":86822,"line_start":345,"line_end":345,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":86827,"byte_end":86854,"line_start":346,"line_end":346,"column_start":5,"column_end":32}},{"value":"/ let map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":86859,"byte_end":86920,"line_start":347,"line_end":347,"column_start":5,"column_end":66}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":86925,"byte_end":86960,"line_start":348,"line_end":348,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":86965,"byte_end":86972,"line_start":349,"line_end":349,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87565,"byte_end":87569,"line_start":373,"line_end":373,"column_start":12,"column_end":16},"name":"keys","qualname":"<HashMap<K, V, S>>::keys","value":"pub fn keys(&Self) -> Keys<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all keys in arbitrary order.\n The iterator element type is `&'a K`.","sig":null,"attributes":[{"value":"/ An iterator visiting all keys in arbitrary order.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87101,"byte_end":87154,"line_start":355,"line_end":355,"column_start":5,"column_end":58}},{"value":"/ The iterator element type is `&'a K`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87159,"byte_end":87200,"line_start":356,"line_end":356,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87205,"byte_end":87208,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87213,"byte_end":87227,"line_start":358,"line_end":358,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87232,"byte_end":87235,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87240,"byte_end":87247,"line_start":360,"line_end":360,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87252,"byte_end":87279,"line_start":361,"line_end":361,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87284,"byte_end":87287,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87292,"byte_end":87325,"line_start":363,"line_end":363,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87330,"byte_end":87353,"line_start":364,"line_end":364,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87358,"byte_end":87381,"line_start":365,"line_end":365,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87386,"byte_end":87409,"line_start":366,"line_end":366,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87414,"byte_end":87417,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ for key in map.keys() {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87422,"byte_end":87449,"line_start":368,"line_end":368,"column_start":5,"column_end":32}},{"value":"/     println!(\"{}\", key);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87454,"byte_end":87482,"line_start":369,"line_end":369,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87487,"byte_end":87492,"line_start":370,"line_end":370,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87497,"byte_end":87504,"line_start":371,"line_end":371,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":88112,"byte_end":88118,"line_start":395,"line_end":395,"column_start":12,"column_end":18},"name":"values","qualname":"<HashMap<K, V, S>>::values","value":"pub fn values(&Self) -> Values<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values in arbitrary order.\n The iterator element type is `&'a V`.","sig":null,"attributes":[{"value":"/ An iterator visiting all values in arbitrary order.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87644,"byte_end":87699,"line_start":377,"line_end":377,"column_start":5,"column_end":60}},{"value":"/ The iterator element type is `&'a V`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87704,"byte_end":87745,"line_start":378,"line_end":378,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87750,"byte_end":87753,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87758,"byte_end":87772,"line_start":380,"line_end":380,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87777,"byte_end":87780,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87785,"byte_end":87792,"line_start":382,"line_end":382,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87797,"byte_end":87824,"line_start":383,"line_end":383,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87829,"byte_end":87832,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87837,"byte_end":87870,"line_start":385,"line_end":385,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87875,"byte_end":87898,"line_start":386,"line_end":386,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87903,"byte_end":87926,"line_start":387,"line_end":387,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87931,"byte_end":87954,"line_start":388,"line_end":388,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87959,"byte_end":87962,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":87967,"byte_end":87996,"line_start":390,"line_end":390,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":88001,"byte_end":88029,"line_start":391,"line_end":391,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":88034,"byte_end":88039,"line_start":392,"line_end":392,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":88044,"byte_end":88051,"line_start":393,"line_end":393,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":88771,"byte_end":88781,"line_start":422,"line_end":422,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<HashMap<K, V, S>>::values_mut","value":"pub fn values_mut(&mut Self) -> ValuesMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values mutably in arbitrary order.\n The iterator element type is `&'a mut V`.","sig":null,"attributes":[{"value":"/ An iterator visiting all values mutably in arbitrary order.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":88197,"byte_end":88260,"line_start":399,"line_end":399,"column_start":5,"column_end":68}},{"value":"/ The iterator element type is `&'a mut V`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":88265,"byte_end":88310,"line_start":400,"line_end":400,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":88315,"byte_end":88318,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":88323,"byte_end":88337,"line_start":402,"line_end":402,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":88342,"byte_end":88345,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":88350,"byte_end":88357,"line_start":404,"line_end":404,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":88362,"byte_end":88389,"line_start":405,"line_end":405,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":88394,"byte_end":88397,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":88402,"byte_end":88435,"line_start":407,"line_end":407,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":88440,"byte_end":88443,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":88448,"byte_end":88471,"line_start":409,"line_end":409,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":88476,"byte_end":88499,"line_start":410,"line_end":410,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":88504,"byte_end":88527,"line_start":411,"line_end":411,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":88532,"byte_end":88535,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ for val in map.values_mut() {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":88540,"byte_end":88573,"line_start":413,"line_end":413,"column_start":5,"column_end":38}},{"value":"/     *val = *val + 10;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":88578,"byte_end":88603,"line_start":414,"line_end":414,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":88608,"byte_end":88613,"line_start":415,"line_end":415,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":88618,"byte_end":88621,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":88626,"byte_end":88655,"line_start":417,"line_end":417,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":88660,"byte_end":88688,"line_start":418,"line_end":418,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":88693,"byte_end":88698,"line_start":419,"line_end":419,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":88703,"byte_end":88710,"line_start":420,"line_end":420,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":89404,"byte_end":89408,"line_start":446,"line_end":446,"column_start":12,"column_end":16},"name":"iter","qualname":"<HashMap<K, V, S>>::iter","value":"pub fn iter(&Self) -> Iter<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order.\n The iterator element type is `(&'a K, &'a V)`.","sig":null,"attributes":[{"value":"/ An iterator visiting all key-value pairs in arbitrary order.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":88895,"byte_end":88959,"line_start":428,"line_end":428,"column_start":5,"column_end":69}},{"value":"/ The iterator element type is `(&'a K, &'a V)`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":88964,"byte_end":89014,"line_start":429,"line_end":429,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":89019,"byte_end":89022,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":89027,"byte_end":89041,"line_start":431,"line_end":431,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":89046,"byte_end":89049,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":89054,"byte_end":89061,"line_start":433,"line_end":433,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":89066,"byte_end":89093,"line_start":434,"line_end":434,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":89098,"byte_end":89101,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":89106,"byte_end":89139,"line_start":436,"line_end":436,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":89144,"byte_end":89167,"line_start":437,"line_end":437,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":89172,"byte_end":89195,"line_start":438,"line_end":438,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":89200,"byte_end":89223,"line_start":439,"line_end":439,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":89228,"byte_end":89231,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in map.iter() {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":89236,"byte_end":89270,"line_start":441,"line_end":441,"column_start":5,"column_end":39}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":89275,"byte_end":89321,"line_start":442,"line_end":442,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":89326,"byte_end":89331,"line_start":443,"line_end":443,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":89336,"byte_end":89343,"line_start":444,"line_end":444,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":90308,"byte_end":90316,"line_start":480,"line_end":480,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<HashMap<K, V, S>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order,\n with mutable references to the values.\n The iterator element type is `(&'a K, &'a mut V)`.","sig":null,"attributes":[{"value":"/ An iterator visiting all key-value pairs in arbitrary order,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":89643,"byte_end":89707,"line_start":456,"line_end":456,"column_start":5,"column_end":69}},{"value":"/ with mutable references to the values.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":89712,"byte_end":89754,"line_start":457,"line_end":457,"column_start":5,"column_end":47}},{"value":"/ The iterator element type is `(&'a K, &'a mut V)`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":89759,"byte_end":89813,"line_start":458,"line_end":458,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":89818,"byte_end":89821,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":89826,"byte_end":89840,"line_start":460,"line_end":460,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":89845,"byte_end":89848,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":89853,"byte_end":89860,"line_start":462,"line_end":462,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":89865,"byte_end":89892,"line_start":463,"line_end":463,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":89897,"byte_end":89900,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":89905,"byte_end":89938,"line_start":465,"line_end":465,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":89943,"byte_end":89966,"line_start":466,"line_end":466,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":89971,"byte_end":89994,"line_start":467,"line_end":467,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":89999,"byte_end":90022,"line_start":468,"line_end":468,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":90027,"byte_end":90030,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ // Update all values","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":90035,"byte_end":90059,"line_start":470,"line_end":470,"column_start":5,"column_end":29}},{"value":"/ for (_, val) in map.iter_mut() {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":90064,"byte_end":90100,"line_start":471,"line_end":471,"column_start":5,"column_end":41}},{"value":"/     *val *= 2;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":90105,"byte_end":90123,"line_start":472,"line_end":472,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":90128,"byte_end":90133,"line_start":473,"line_end":473,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":90138,"byte_end":90141,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in &map {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":90146,"byte_end":90174,"line_start":475,"line_end":475,"column_start":5,"column_end":33}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":90179,"byte_end":90225,"line_start":476,"line_end":476,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":90230,"byte_end":90235,"line_start":477,"line_end":477,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":90240,"byte_end":90247,"line_start":478,"line_end":478,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91033,"byte_end":91036,"line_start":509,"line_end":509,"column_start":12,"column_end":15},"name":"len","qualname":"<HashMap<K, V, S>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the map.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the map.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":90701,"byte_end":90747,"line_start":496,"line_end":496,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":90752,"byte_end":90755,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":90760,"byte_end":90774,"line_start":498,"line_end":498,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":90779,"byte_end":90782,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":90787,"byte_end":90794,"line_start":500,"line_end":500,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":90799,"byte_end":90826,"line_start":501,"line_end":501,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":90831,"byte_end":90834,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":90839,"byte_end":90870,"line_start":503,"line_end":503,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.len(), 0);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":90875,"byte_end":90902,"line_start":504,"line_end":504,"column_start":5,"column_end":32}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":90907,"byte_end":90928,"line_start":505,"line_end":505,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(a.len(), 1);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":90933,"byte_end":90960,"line_start":506,"line_end":506,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":90965,"byte_end":90972,"line_start":507,"line_end":507,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91427,"byte_end":91435,"line_start":526,"line_end":526,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<HashMap<K, V, S>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map contains no elements.","sig":null,"attributes":[{"value":"/ Returns `true` if the map contains no elements.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91091,"byte_end":91142,"line_start":513,"line_end":513,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91147,"byte_end":91150,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91155,"byte_end":91169,"line_start":515,"line_end":515,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91174,"byte_end":91177,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91182,"byte_end":91189,"line_start":517,"line_end":517,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91194,"byte_end":91221,"line_start":518,"line_end":518,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91226,"byte_end":91229,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91234,"byte_end":91265,"line_start":520,"line_end":520,"column_start":5,"column_end":36}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91270,"byte_end":91296,"line_start":521,"line_end":521,"column_start":5,"column_end":31}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91301,"byte_end":91322,"line_start":522,"line_end":522,"column_start":5,"column_end":26}},{"value":"/ assert!(!a.is_empty());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91327,"byte_end":91354,"line_start":523,"line_end":523,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91359,"byte_end":91366,"line_start":524,"line_end":524,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":92028,"byte_end":92033,"line_start":550,"line_end":550,"column_start":12,"column_end":17},"name":"drain","qualname":"<HashMap<K, V, S>>::drain","value":"pub fn drain(&mut Self) -> Drain<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, returning all key-value pairs as an iterator. Keeps the\n allocated memory for reuse.","sig":null,"attributes":[{"value":"/ Clears the map, returning all key-value pairs as an iterator. Keeps the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91488,"byte_end":91563,"line_start":530,"line_end":530,"column_start":5,"column_end":80}},{"value":"/ allocated memory for reuse.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91568,"byte_end":91599,"line_start":531,"line_end":531,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91604,"byte_end":91607,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91612,"byte_end":91626,"line_start":533,"line_end":533,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91631,"byte_end":91634,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91639,"byte_end":91646,"line_start":535,"line_end":535,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91651,"byte_end":91678,"line_start":536,"line_end":536,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91683,"byte_end":91686,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91691,"byte_end":91722,"line_start":538,"line_end":538,"column_start":5,"column_end":36}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91727,"byte_end":91748,"line_start":539,"line_end":539,"column_start":5,"column_end":26}},{"value":"/ a.insert(2, \"b\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91753,"byte_end":91774,"line_start":540,"line_end":540,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91779,"byte_end":91782,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ for (k, v) in a.drain().take(1) {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91787,"byte_end":91824,"line_start":542,"line_end":542,"column_start":5,"column_end":42}},{"value":"/     assert!(k == 1 || k == 2);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91829,"byte_end":91863,"line_start":543,"line_end":543,"column_start":5,"column_end":39}},{"value":"/     assert!(v == \"a\" || v == \"b\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91868,"byte_end":91906,"line_start":544,"line_end":544,"column_start":5,"column_end":43}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91911,"byte_end":91916,"line_start":545,"line_end":545,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91921,"byte_end":91924,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91929,"byte_end":91955,"line_start":547,"line_end":547,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":91960,"byte_end":91967,"line_start":548,"line_end":548,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":92657,"byte_end":92663,"line_start":572,"line_end":572,"column_start":12,"column_end":18},"name":"retain","qualname":"<HashMap<K, V, S>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&K, &mut V) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the elements specified by the predicate.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":92238,"byte_end":92295,"line_start":559,"line_end":559,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":92300,"byte_end":92303,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ In other words, remove all pairs `(k, v)` such that `f(&k,&mut v)` returns `false`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":92308,"byte_end":92395,"line_start":561,"line_end":561,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":92400,"byte_end":92403,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":92408,"byte_end":92422,"line_start":563,"line_end":563,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":92427,"byte_end":92430,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":92435,"byte_end":92442,"line_start":565,"line_end":565,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":92447,"byte_end":92474,"line_start":566,"line_end":566,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":92479,"byte_end":92482,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = (0..8).map(|x|(x, x*10)).collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":92487,"byte_end":92559,"line_start":568,"line_end":568,"column_start":5,"column_end":77}},{"value":"/ map.retain(|&k, _| k % 2 == 0);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":92564,"byte_end":92599,"line_start":569,"line_end":569,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(map.len(), 4);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":92604,"byte_end":92633,"line_start":570,"line_end":570,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":92638,"byte_end":92645,"line_start":571,"line_end":571,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":93843,"byte_end":93855,"line_start":607,"line_end":607,"column_start":12,"column_end":24},"name":"drain_filter","qualname":"<HashMap<K, V, S>>::drain_filter","value":"pub fn drain_filter<F>(&mut Self, F) -> DrainFilter<, K, V, F> where\nF: FnMut(&K, &mut V) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Drains elements which are false under the given predicate,\n and returns an iterator over the removed items.","sig":null,"attributes":[{"value":"/ Drains elements which are false under the given predicate,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":93080,"byte_end":93142,"line_start":587,"line_end":587,"column_start":5,"column_end":67}},{"value":"/ and returns an iterator over the removed items.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":93147,"byte_end":93198,"line_start":588,"line_end":588,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":93203,"byte_end":93206,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ In other words, move all pairs `(k, v)` such that `f(&k,&mut v)` returns `false` out","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":93211,"byte_end":93299,"line_start":590,"line_end":590,"column_start":5,"column_end":93}},{"value":"/ into another iterator.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":93304,"byte_end":93330,"line_start":591,"line_end":591,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":93335,"byte_end":93338,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ When the returned DrainedFilter is dropped, the elements that don't satisfy","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":93343,"byte_end":93422,"line_start":593,"line_end":593,"column_start":5,"column_end":84}},{"value":"/ the predicate are dropped from the table.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":93427,"byte_end":93472,"line_start":594,"line_end":594,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":93477,"byte_end":93480,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":93485,"byte_end":93499,"line_start":596,"line_end":596,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":93504,"byte_end":93507,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":93512,"byte_end":93519,"line_start":598,"line_end":598,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":93524,"byte_end":93551,"line_start":599,"line_end":599,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":93556,"byte_end":93559,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = (0..8).map(|x|(x, x*10)).collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":93564,"byte_end":93636,"line_start":601,"line_end":601,"column_start":5,"column_end":77}},{"value":"/ let drained = map.drain_filter(|&k, _| k % 2 == 0);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":93641,"byte_end":93696,"line_start":602,"line_end":602,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(drained.count(), 4);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":93701,"byte_end":93736,"line_start":603,"line_end":603,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(map.len(), 4);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":93741,"byte_end":93770,"line_start":604,"line_end":604,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":93775,"byte_end":93782,"line_start":605,"line_end":605,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":94528,"byte_end":94533,"line_start":634,"line_end":634,"column_start":12,"column_end":17},"name":"clear","qualname":"<HashMap<K, V, S>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, removing all key-value pairs. Keeps the allocated memory\n for reuse.","sig":null,"attributes":[{"value":"/ Clears the map, removing all key-value pairs. Keeps the allocated memory","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":94161,"byte_end":94237,"line_start":620,"line_end":620,"column_start":5,"column_end":81}},{"value":"/ for reuse.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":94242,"byte_end":94256,"line_start":621,"line_end":621,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":94261,"byte_end":94264,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":94269,"byte_end":94283,"line_start":623,"line_end":623,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":94288,"byte_end":94291,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":94296,"byte_end":94303,"line_start":625,"line_end":625,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":94308,"byte_end":94335,"line_start":626,"line_end":626,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":94340,"byte_end":94343,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":94348,"byte_end":94379,"line_start":628,"line_end":628,"column_start":5,"column_end":36}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":94384,"byte_end":94405,"line_start":629,"line_end":629,"column_start":5,"column_end":26}},{"value":"/ a.clear();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":94410,"byte_end":94424,"line_start":630,"line_end":630,"column_start":5,"column_end":19}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":94429,"byte_end":94455,"line_start":631,"line_end":631,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":94460,"byte_end":94467,"line_start":632,"line_end":632,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":95255,"byte_end":95262,"line_start":662,"line_end":662,"column_start":12,"column_end":19},"name":"reserve","qualname":"<HashMap<K, V, S>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted\n in the `HashMap`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more elements to be inserted","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":94665,"byte_end":94741,"line_start":644,"line_end":644,"column_start":5,"column_end":81}},{"value":"/ in the `HashMap`. The collection may reserve more space to avoid","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":94746,"byte_end":94814,"line_start":645,"line_end":645,"column_start":5,"column_end":73}},{"value":"/ frequent reallocations.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":94819,"byte_end":94846,"line_start":646,"line_end":646,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":94851,"byte_end":94854,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":94859,"byte_end":94871,"line_start":648,"line_end":648,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":94876,"byte_end":94879,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ Panics if the new allocation size overflows [`usize`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":94884,"byte_end":94942,"line_start":650,"line_end":650,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":94947,"byte_end":94950,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ [`usize`]: https://doc.rust-lang.org/std/primitive.usize.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":94955,"byte_end":95020,"line_start":652,"line_end":652,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":95025,"byte_end":95028,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":95033,"byte_end":95047,"line_start":654,"line_end":654,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":95052,"byte_end":95055,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":95060,"byte_end":95067,"line_start":656,"line_end":656,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":95072,"byte_end":95099,"line_start":657,"line_end":657,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, i32> = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":95104,"byte_end":95157,"line_start":658,"line_end":658,"column_start":5,"column_end":58}},{"value":"/ map.reserve(10);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":95162,"byte_end":95182,"line_start":659,"line_end":659,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":95187,"byte_end":95194,"line_start":660,"line_end":660,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":96075,"byte_end":96086,"line_start":685,"line_end":685,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<HashMap<K, V, S>>::try_reserve","value":"pub fn try_reserve(&mut Self, usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserve capacity for at least `additional` more elements to be inserted\n in the given `HashMap<K,V>`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Tries to reserve capacity for at least `additional` more elements to be inserted","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":95441,"byte_end":95525,"line_start":668,"line_end":668,"column_start":5,"column_end":89}},{"value":"/ in the given `HashMap<K,V>`. The collection may reserve more space to avoid","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":95530,"byte_end":95609,"line_start":669,"line_end":669,"column_start":5,"column_end":84}},{"value":"/ frequent reallocations.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":95614,"byte_end":95641,"line_start":670,"line_end":670,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":95646,"byte_end":95649,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":95654,"byte_end":95666,"line_start":672,"line_end":672,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":95671,"byte_end":95674,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":95679,"byte_end":95759,"line_start":674,"line_end":674,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":95764,"byte_end":95780,"line_start":675,"line_end":675,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":95785,"byte_end":95788,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":95793,"byte_end":95807,"line_start":677,"line_end":677,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":95812,"byte_end":95815,"line_start":678,"line_end":678,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":95820,"byte_end":95827,"line_start":679,"line_end":679,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":95832,"byte_end":95859,"line_start":680,"line_end":680,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, isize> = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":95864,"byte_end":95919,"line_start":681,"line_end":681,"column_start":5,"column_end":60}},{"value":"/ map.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":95924,"byte_end":96002,"line_start":682,"line_end":682,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":96007,"byte_end":96014,"line_start":683,"line_end":683,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":96905,"byte_end":96918,"line_start":708,"line_end":708,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<HashMap<K, V, S>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the map as much as possible. It will drop\n down as much as possible while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the map as much as possible. It will drop","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":96299,"byte_end":96368,"line_start":691,"line_end":691,"column_start":5,"column_end":74}},{"value":"/ down as much as possible while maintaining the internal rules","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":96373,"byte_end":96438,"line_start":692,"line_end":692,"column_start":5,"column_end":70}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":96443,"byte_end":96516,"line_start":693,"line_end":693,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":96521,"byte_end":96524,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":96529,"byte_end":96543,"line_start":695,"line_end":695,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":96548,"byte_end":96551,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":96556,"byte_end":96563,"line_start":697,"line_end":697,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":96568,"byte_end":96595,"line_start":698,"line_end":698,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":96600,"byte_end":96603,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":96608,"byte_end":96673,"line_start":700,"line_end":700,"column_start":5,"column_end":70}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":96678,"byte_end":96699,"line_start":701,"line_end":701,"column_start":5,"column_end":26}},{"value":"/ map.insert(3, 4);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":96704,"byte_end":96725,"line_start":702,"line_end":702,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":96730,"byte_end":96765,"line_start":703,"line_end":703,"column_start":5,"column_end":40}},{"value":"/ map.shrink_to_fit();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":96770,"byte_end":96794,"line_start":704,"line_end":704,"column_start":5,"column_end":29}},{"value":"/ assert!(map.capacity() >= 2);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":96799,"byte_end":96832,"line_start":705,"line_end":705,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":96837,"byte_end":96844,"line_start":706,"line_end":706,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":97926,"byte_end":97935,"line_start":737,"line_end":737,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<HashMap<K, V, S>>::shrink_to","value":"pub fn shrink_to(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the map with a lower limit. It will drop\n down no lower than the supplied limit while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the map with a lower limit. It will drop","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":97058,"byte_end":97126,"line_start":713,"line_end":713,"column_start":5,"column_end":73}},{"value":"/ down no lower than the supplied limit while maintaining the internal rules","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":97131,"byte_end":97209,"line_start":714,"line_end":714,"column_start":5,"column_end":83}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":97214,"byte_end":97287,"line_start":715,"line_end":715,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":97292,"byte_end":97295,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/ This function does nothing if the current capacity is smaller than the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":97300,"byte_end":97374,"line_start":717,"line_end":717,"column_start":5,"column_end":79}},{"value":"/ supplied minimum capacity.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":97379,"byte_end":97409,"line_start":718,"line_end":718,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":97414,"byte_end":97417,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":97422,"byte_end":97436,"line_start":720,"line_end":720,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":97441,"byte_end":97444,"line_start":721,"line_end":721,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":97449,"byte_end":97456,"line_start":722,"line_end":722,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":97461,"byte_end":97488,"line_start":723,"line_end":723,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":97493,"byte_end":97496,"line_start":724,"line_end":724,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":97501,"byte_end":97566,"line_start":725,"line_end":725,"column_start":5,"column_end":70}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":97571,"byte_end":97592,"line_start":726,"line_end":726,"column_start":5,"column_end":26}},{"value":"/ map.insert(3, 4);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":97597,"byte_end":97618,"line_start":727,"line_end":727,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":97623,"byte_end":97658,"line_start":728,"line_end":728,"column_start":5,"column_end":40}},{"value":"/ map.shrink_to(10);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":97663,"byte_end":97685,"line_start":729,"line_end":729,"column_start":5,"column_end":27}},{"value":"/ assert!(map.capacity() >= 10);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":97690,"byte_end":97724,"line_start":730,"line_end":730,"column_start":5,"column_end":39}},{"value":"/ map.shrink_to(0);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":97729,"byte_end":97750,"line_start":731,"line_end":731,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 2);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":97755,"byte_end":97788,"line_start":732,"line_end":732,"column_start":5,"column_end":38}},{"value":"/ map.shrink_to(10);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":97793,"byte_end":97815,"line_start":733,"line_end":733,"column_start":5,"column_end":27}},{"value":"/ assert!(map.capacity() >= 2);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":97820,"byte_end":97853,"line_start":734,"line_end":734,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":97858,"byte_end":97865,"line_start":735,"line_end":735,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":98730,"byte_end":98735,"line_start":763,"line_end":763,"column_start":12,"column_end":17},"name":"entry","qualname":"<HashMap<K, V, S>>::entry","value":"pub fn entry(&mut Self, K) -> Entry<, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Gets the given key's corresponding entry in the map for in-place manipulation.","sig":null,"attributes":[{"value":"/ Gets the given key's corresponding entry in the map for in-place manipulation.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":98120,"byte_end":98202,"line_start":743,"line_end":743,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":98207,"byte_end":98210,"line_start":744,"line_end":744,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":98215,"byte_end":98229,"line_start":745,"line_end":745,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":98234,"byte_end":98237,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":98242,"byte_end":98249,"line_start":747,"line_end":747,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":98254,"byte_end":98281,"line_start":748,"line_end":748,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":98286,"byte_end":98289,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ let mut letters = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":98294,"byte_end":98331,"line_start":750,"line_end":750,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":98336,"byte_end":98339,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ for ch in \"a short treatise on fungi\".chars() {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":98344,"byte_end":98395,"line_start":752,"line_end":752,"column_start":5,"column_end":56}},{"value":"/     let counter = letters.entry(ch).or_insert(0);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":98400,"byte_end":98453,"line_start":753,"line_end":753,"column_start":5,"column_end":58}},{"value":"/     *counter += 1;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":98458,"byte_end":98480,"line_start":754,"line_end":754,"column_start":5,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":98485,"byte_end":98490,"line_start":755,"line_end":755,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":98495,"byte_end":98498,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(letters[&'s'], 2);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":98503,"byte_end":98536,"line_start":757,"line_end":757,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters[&'t'], 3);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":98541,"byte_end":98574,"line_start":758,"line_end":758,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters[&'u'], 1);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":98579,"byte_end":98612,"line_start":759,"line_end":759,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters.get(&'y'), None);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":98617,"byte_end":98657,"line_start":760,"line_end":760,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":98662,"byte_end":98669,"line_start":761,"line_end":761,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":433},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":99860,"byte_end":99863,"line_start":800,"line_end":800,"column_start":12,"column_end":15},"name":"get","qualname":"<HashMap<K, V, S>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&V> where K: Borrow<Q>, Q: Hash +\nEq","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a reference to the value corresponding to the key.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":99212,"byte_end":99274,"line_start":780,"line_end":780,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":99279,"byte_end":99282,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":99287,"byte_end":99350,"line_start":782,"line_end":782,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":99355,"byte_end":99422,"line_start":783,"line_end":783,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":99427,"byte_end":99444,"line_start":784,"line_end":784,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":99449,"byte_end":99452,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":99457,"byte_end":99516,"line_start":786,"line_end":786,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":99521,"byte_end":99585,"line_start":787,"line_end":787,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":99590,"byte_end":99593,"line_start":788,"line_end":788,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":99598,"byte_end":99612,"line_start":789,"line_end":789,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":99617,"byte_end":99620,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":99625,"byte_end":99632,"line_start":791,"line_end":791,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":99637,"byte_end":99664,"line_start":792,"line_end":792,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":99669,"byte_end":99672,"line_start":793,"line_end":793,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":99677,"byte_end":99710,"line_start":794,"line_end":794,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":99715,"byte_end":99738,"line_start":795,"line_end":795,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get(&1), Some(&\"a\"));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":99743,"byte_end":99783,"line_start":796,"line_end":796,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map.get(&2), None);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":99788,"byte_end":99822,"line_start":797,"line_end":797,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":99827,"byte_end":99834,"line_start":798,"line_end":798,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":99839,"byte_end":99848,"line_start":799,"line_end":799,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":100706,"byte_end":100719,"line_start":828,"line_end":828,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<HashMap<K, V, S>>::get_key_value","value":"pub fn get_key_value<Q: ?Sized>(&Self, &Q) -> Option<(&K, &V)> where\nK: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns the key-value pair corresponding to the supplied key.","sig":null,"attributes":[{"value":"/ Returns the key-value pair corresponding to the supplied key.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":100020,"byte_end":100085,"line_start":808,"line_end":808,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":100090,"byte_end":100093,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ The supplied key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":100098,"byte_end":100170,"line_start":810,"line_end":810,"column_start":5,"column_end":77}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":100175,"byte_end":100242,"line_start":811,"line_end":811,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":100247,"byte_end":100264,"line_start":812,"line_end":812,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":100269,"byte_end":100272,"line_start":813,"line_end":813,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":100277,"byte_end":100336,"line_start":814,"line_end":814,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":100341,"byte_end":100405,"line_start":815,"line_end":815,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":100410,"byte_end":100413,"line_start":816,"line_end":816,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":100418,"byte_end":100432,"line_start":817,"line_end":817,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":100437,"byte_end":100440,"line_start":818,"line_end":818,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":100445,"byte_end":100452,"line_start":819,"line_end":819,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":100457,"byte_end":100484,"line_start":820,"line_end":820,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":100489,"byte_end":100492,"line_start":821,"line_end":821,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":100497,"byte_end":100530,"line_start":822,"line_end":822,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":100535,"byte_end":100558,"line_start":823,"line_end":823,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":100563,"byte_end":100619,"line_start":824,"line_end":824,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(map.get_key_value(&2), None);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":100624,"byte_end":100668,"line_start":825,"line_end":825,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":100673,"byte_end":100680,"line_start":826,"line_end":826,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":100685,"byte_end":100694,"line_start":827,"line_end":827,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":101960,"byte_end":101977,"line_start":866,"line_end":866,"column_start":12,"column_end":29},"name":"get_key_value_mut","qualname":"<HashMap<K, V, S>>::get_key_value_mut","value":"pub fn get_key_value_mut<Q: ?Sized>(&mut Self, &Q) -> Option<(&K, &mut V)>\nwhere K: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.","sig":null,"attributes":[{"value":"/ Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":101092,"byte_end":101192,"line_start":842,"line_end":842,"column_start":5,"column_end":105}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":101197,"byte_end":101200,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ The supplied key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":101205,"byte_end":101277,"line_start":844,"line_end":844,"column_start":5,"column_end":77}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":101282,"byte_end":101349,"line_start":845,"line_end":845,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":101354,"byte_end":101371,"line_start":846,"line_end":846,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":101376,"byte_end":101379,"line_start":847,"line_end":847,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":101384,"byte_end":101443,"line_start":848,"line_end":848,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":101448,"byte_end":101512,"line_start":849,"line_end":849,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":101517,"byte_end":101520,"line_start":850,"line_end":850,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":101525,"byte_end":101539,"line_start":851,"line_end":851,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":101544,"byte_end":101547,"line_start":852,"line_end":852,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":101552,"byte_end":101559,"line_start":853,"line_end":853,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":101564,"byte_end":101591,"line_start":854,"line_end":854,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":101596,"byte_end":101599,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":101604,"byte_end":101637,"line_start":856,"line_end":856,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":101642,"byte_end":101665,"line_start":857,"line_end":857,"column_start":5,"column_end":28}},{"value":"/ let (k, v) = map.get_key_value_mut(&1).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":101670,"byte_end":101722,"line_start":858,"line_end":858,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(k, &1);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":101727,"byte_end":101749,"line_start":859,"line_end":859,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(v, &mut \"a\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":101754,"byte_end":101782,"line_start":860,"line_end":860,"column_start":5,"column_end":33}},{"value":"/ *v = \"b\";","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":101787,"byte_end":101800,"line_start":861,"line_end":861,"column_start":5,"column_end":18}},{"value":"/ assert_eq!(map.get_key_value_mut(&1), Some((&1, &mut \"b\")));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":101805,"byte_end":101869,"line_start":862,"line_end":862,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(map.get_key_value_mut(&2), None);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":101874,"byte_end":101922,"line_start":863,"line_end":863,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":101927,"byte_end":101934,"line_start":864,"line_end":864,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":101939,"byte_end":101948,"line_start":865,"line_end":865,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":103069,"byte_end":103081,"line_start":900,"line_end":900,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<HashMap<K, V, S>>::contains_key","value":"pub fn contains_key<Q: ?Sized>(&Self, &Q) -> bool where K: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map contains a value for the specified key.","sig":null,"attributes":[{"value":"/ Returns `true` if the map contains a value for the specified key.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":102366,"byte_end":102435,"line_start":880,"line_end":880,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":102440,"byte_end":102443,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":102448,"byte_end":102511,"line_start":882,"line_end":882,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":102516,"byte_end":102583,"line_start":883,"line_end":883,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":102588,"byte_end":102605,"line_start":884,"line_end":884,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":102610,"byte_end":102613,"line_start":885,"line_end":885,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":102618,"byte_end":102677,"line_start":886,"line_end":886,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":102682,"byte_end":102746,"line_start":887,"line_end":887,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":102751,"byte_end":102754,"line_start":888,"line_end":888,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":102759,"byte_end":102773,"line_start":889,"line_end":889,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":102778,"byte_end":102781,"line_start":890,"line_end":890,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":102786,"byte_end":102793,"line_start":891,"line_end":891,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":102798,"byte_end":102825,"line_start":892,"line_end":892,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":102830,"byte_end":102833,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":102838,"byte_end":102871,"line_start":894,"line_end":894,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":102876,"byte_end":102899,"line_start":895,"line_end":895,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.contains_key(&1), true);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":102904,"byte_end":102947,"line_start":896,"line_end":896,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(map.contains_key(&2), false);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":102952,"byte_end":102996,"line_start":897,"line_end":897,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":103001,"byte_end":103008,"line_start":898,"line_end":898,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":103932,"byte_end":103939,"line_start":930,"line_end":930,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<HashMap<K, V, S>>::get_mut","value":"pub fn get_mut<Q: ?Sized>(&mut Self, &Q) -> Option<&mut V> where K: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value corresponding to the key.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":103216,"byte_end":103286,"line_start":908,"line_end":908,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":103291,"byte_end":103294,"line_start":909,"line_end":909,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":103299,"byte_end":103362,"line_start":910,"line_end":910,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":103367,"byte_end":103434,"line_start":911,"line_end":911,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":103439,"byte_end":103456,"line_start":912,"line_end":912,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":103461,"byte_end":103464,"line_start":913,"line_end":913,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":103469,"byte_end":103528,"line_start":914,"line_end":914,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":103533,"byte_end":103597,"line_start":915,"line_end":915,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":103602,"byte_end":103605,"line_start":916,"line_end":916,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":103610,"byte_end":103624,"line_start":917,"line_end":917,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":103629,"byte_end":103632,"line_start":918,"line_end":918,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":103637,"byte_end":103644,"line_start":919,"line_end":919,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":103649,"byte_end":103676,"line_start":920,"line_end":920,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":103681,"byte_end":103684,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":103689,"byte_end":103722,"line_start":922,"line_end":922,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":103727,"byte_end":103750,"line_start":923,"line_end":923,"column_start":5,"column_end":28}},{"value":"/ if let Some(x) = map.get_mut(&1) {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":103755,"byte_end":103793,"line_start":924,"line_end":924,"column_start":5,"column_end":43}},{"value":"/     *x = \"b\";","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":103798,"byte_end":103815,"line_start":925,"line_end":925,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":103820,"byte_end":103825,"line_start":926,"line_end":926,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[&1], \"b\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":103830,"byte_end":103859,"line_start":927,"line_end":927,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":103864,"byte_end":103871,"line_start":928,"line_end":928,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":105210,"byte_end":105216,"line_start":967,"line_end":967,"column_start":12,"column_end":18},"name":"insert","qualname":"<HashMap<K, V, S>>::insert","value":"pub fn insert(&mut Self, K, V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.","sig":null,"attributes":[{"value":"/ Inserts a key-value pair into the map.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":104235,"byte_end":104277,"line_start":941,"line_end":941,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":104282,"byte_end":104285,"line_start":942,"line_end":942,"column_start":5,"column_end":8}},{"value":"/ If the map did not have this key present, [`None`] is returned.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":104290,"byte_end":104357,"line_start":943,"line_end":943,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":104362,"byte_end":104365,"line_start":944,"line_end":944,"column_start":5,"column_end":8}},{"value":"/ If the map did have this key present, the value is updated, and the old","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":104370,"byte_end":104445,"line_start":945,"line_end":945,"column_start":5,"column_end":80}},{"value":"/ value is returned. The key is not updated, though; this matters for","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":104450,"byte_end":104521,"line_start":946,"line_end":946,"column_start":5,"column_end":76}},{"value":"/ types that can be `==` without being identical. See the [module-level","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":104526,"byte_end":104599,"line_start":947,"line_end":947,"column_start":5,"column_end":78}},{"value":"/ documentation] for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":104604,"byte_end":104632,"line_start":948,"line_end":948,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":104637,"byte_end":104640,"line_start":949,"line_end":949,"column_start":5,"column_end":8}},{"value":"/ [`None`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.None","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":104645,"byte_end":104725,"line_start":950,"line_end":950,"column_start":5,"column_end":85}},{"value":"/ [module-level documentation]: index.html#insert-and-complex-keys","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":104730,"byte_end":104798,"line_start":951,"line_end":951,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":104803,"byte_end":104806,"line_start":952,"line_end":952,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":104811,"byte_end":104825,"line_start":953,"line_end":953,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":104830,"byte_end":104833,"line_start":954,"line_end":954,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":104838,"byte_end":104845,"line_start":955,"line_end":955,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":104850,"byte_end":104877,"line_start":956,"line_end":956,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":104882,"byte_end":104885,"line_start":957,"line_end":957,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":104890,"byte_end":104923,"line_start":958,"line_end":958,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(map.insert(37, \"a\"), None);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":104928,"byte_end":104970,"line_start":959,"line_end":959,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.is_empty(), false);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":104975,"byte_end":105013,"line_start":960,"line_end":960,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":105018,"byte_end":105021,"line_start":961,"line_end":961,"column_start":5,"column_end":8}},{"value":"/ map.insert(37, \"b\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":105026,"byte_end":105050,"line_start":962,"line_end":962,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(map.insert(37, \"c\"), Some(\"b\"));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":105055,"byte_end":105102,"line_start":963,"line_end":963,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(map[&37], \"c\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":105107,"byte_end":105137,"line_start":964,"line_end":964,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":105142,"byte_end":105149,"line_start":965,"line_end":965,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":106433,"byte_end":106439,"line_start":1002,"line_end":1002,"column_start":12,"column_end":18},"name":"remove","qualname":"<HashMap<K, V, S>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where K: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the value at the key if the key\n was previously in the map.","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the value at the key if the key","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":105699,"byte_end":105772,"line_start":981,"line_end":981,"column_start":5,"column_end":78}},{"value":"/ was previously in the map.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":105777,"byte_end":105807,"line_start":982,"line_end":982,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":105812,"byte_end":105815,"line_start":983,"line_end":983,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":105820,"byte_end":105883,"line_start":984,"line_end":984,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":105888,"byte_end":105955,"line_start":985,"line_end":985,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":105960,"byte_end":105977,"line_start":986,"line_end":986,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":105982,"byte_end":105985,"line_start":987,"line_end":987,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":105990,"byte_end":106049,"line_start":988,"line_end":988,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":106054,"byte_end":106118,"line_start":989,"line_end":989,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":106123,"byte_end":106126,"line_start":990,"line_end":990,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":106131,"byte_end":106145,"line_start":991,"line_end":991,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":106150,"byte_end":106153,"line_start":992,"line_end":992,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":106158,"byte_end":106165,"line_start":993,"line_end":993,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":106170,"byte_end":106197,"line_start":994,"line_end":994,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":106202,"byte_end":106205,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":106210,"byte_end":106243,"line_start":996,"line_end":996,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":106248,"byte_end":106271,"line_start":997,"line_end":997,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.remove(&1), Some(\"a\"));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":106276,"byte_end":106318,"line_start":998,"line_end":998,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":106323,"byte_end":106360,"line_start":999,"line_end":999,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":106365,"byte_end":106372,"line_start":1000,"line_end":1000,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":107347,"byte_end":107359,"line_start":1031,"line_end":1031,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<HashMap<K, V, S>>::remove_entry","value":"pub fn remove_entry<Q: ?Sized>(&mut Self, &Q) -> Option<(K, V)> where\nK: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the stored key and value if the\n key was previously in the map.","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the stored key and value if the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":106598,"byte_end":106671,"line_start":1010,"line_end":1010,"column_start":5,"column_end":78}},{"value":"/ key was previously in the map.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":106676,"byte_end":106710,"line_start":1011,"line_end":1011,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":106715,"byte_end":106718,"line_start":1012,"line_end":1012,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":106723,"byte_end":106786,"line_start":1013,"line_end":1013,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":106791,"byte_end":106858,"line_start":1014,"line_end":1014,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":106863,"byte_end":106880,"line_start":1015,"line_end":1015,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":106885,"byte_end":106888,"line_start":1016,"line_end":1016,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":106893,"byte_end":106952,"line_start":1017,"line_end":1017,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":106957,"byte_end":107021,"line_start":1018,"line_end":1018,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":107026,"byte_end":107029,"line_start":1019,"line_end":1019,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":107034,"byte_end":107048,"line_start":1020,"line_end":1020,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":107053,"byte_end":107056,"line_start":1021,"line_end":1021,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":107061,"byte_end":107068,"line_start":1022,"line_end":1022,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":107073,"byte_end":107100,"line_start":1023,"line_end":1023,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":107105,"byte_end":107108,"line_start":1024,"line_end":1024,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":107113,"byte_end":107146,"line_start":1025,"line_end":1025,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":107151,"byte_end":107174,"line_start":1026,"line_end":1026,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.remove_entry(&1), Some((1, \"a\")));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":107179,"byte_end":107232,"line_start":1027,"line_end":1027,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":107237,"byte_end":107274,"line_start":1028,"line_end":1028,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":107279,"byte_end":107286,"line_start":1029,"line_end":1029,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":109720,"byte_end":109733,"line_start":1080,"line_end":1080,"column_start":12,"column_end":25},"name":"raw_entry_mut","qualname":"<HashMap<K, V, S>>::raw_entry_mut","value":"pub fn raw_entry_mut(&mut Self) -> RawEntryBuilderMut<, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a raw entry builder for the HashMap.","sig":null,"attributes":[{"value":"/ Creates a raw entry builder for the HashMap.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":107780,"byte_end":107828,"line_start":1048,"line_end":1048,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":107833,"byte_end":107836,"line_start":1049,"line_end":1049,"column_start":5,"column_end":8}},{"value":"/ Raw entries provide the lowest level of control for searching and","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":107841,"byte_end":107910,"line_start":1050,"line_end":1050,"column_start":5,"column_end":74}},{"value":"/ manipulating a map. They must be manually initialized with a hash and","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":107915,"byte_end":107988,"line_start":1051,"line_end":1051,"column_start":5,"column_end":78}},{"value":"/ then manually searched. After this, insertions into a vacant entry","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":107993,"byte_end":108063,"line_start":1052,"line_end":1052,"column_start":5,"column_end":75}},{"value":"/ still require an owned key to be provided.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":108068,"byte_end":108114,"line_start":1053,"line_end":1053,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":108119,"byte_end":108122,"line_start":1054,"line_end":1054,"column_start":5,"column_end":8}},{"value":"/ Raw entries are useful for such exotic situations as:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":108127,"byte_end":108184,"line_start":1055,"line_end":1055,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":108189,"byte_end":108192,"line_start":1056,"line_end":1056,"column_start":5,"column_end":8}},{"value":"/ * Hash memoization","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":108197,"byte_end":108219,"line_start":1057,"line_end":1057,"column_start":5,"column_end":27}},{"value":"/ * Deferring the creation of an owned key until it is known to be required","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":108224,"byte_end":108301,"line_start":1058,"line_end":1058,"column_start":5,"column_end":82}},{"value":"/ * Using a search key that doesn't work with the Borrow trait","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":108306,"byte_end":108370,"line_start":1059,"line_end":1059,"column_start":5,"column_end":69}},{"value":"/ * Using custom comparison logic without newtype wrappers","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":108375,"byte_end":108435,"line_start":1060,"line_end":1060,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":108440,"byte_end":108443,"line_start":1061,"line_end":1061,"column_start":5,"column_end":8}},{"value":"/ Because raw entries provide much more low-level control, it's much easier","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":108448,"byte_end":108525,"line_start":1062,"line_end":1062,"column_start":5,"column_end":82}},{"value":"/ to put the HashMap into an inconsistent state which, while memory-safe,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":108530,"byte_end":108605,"line_start":1063,"line_end":1063,"column_start":5,"column_end":80}},{"value":"/ will cause the map to produce seemingly random results. Higher-level and","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":108610,"byte_end":108686,"line_start":1064,"line_end":1064,"column_start":5,"column_end":81}},{"value":"/ more foolproof APIs like `entry` should be preferred when possible.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":108691,"byte_end":108762,"line_start":1065,"line_end":1065,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":108767,"byte_end":108770,"line_start":1066,"line_end":1066,"column_start":5,"column_end":8}},{"value":"/ In particular, the hash used to initialized the raw entry must still be","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":108775,"byte_end":108850,"line_start":1067,"line_end":1067,"column_start":5,"column_end":80}},{"value":"/ consistent with the hash of the key that is ultimately stored in the entry.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":108855,"byte_end":108934,"line_start":1068,"line_end":1068,"column_start":5,"column_end":84}},{"value":"/ This is because implementations of HashMap may need to recompute hashes","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":108939,"byte_end":109014,"line_start":1069,"line_end":1069,"column_start":5,"column_end":80}},{"value":"/ when resizing, at which point only the keys are available.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":109019,"byte_end":109081,"line_start":1070,"line_end":1070,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":109086,"byte_end":109089,"line_start":1071,"line_end":1071,"column_start":5,"column_end":8}},{"value":"/ Raw entries give mutable access to the keys. This must not be used","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":109094,"byte_end":109164,"line_start":1072,"line_end":1072,"column_start":5,"column_end":75}},{"value":"/ to modify how the key would compare or hash, as the map will not re-evaluate","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":109169,"byte_end":109249,"line_start":1073,"line_end":1073,"column_start":5,"column_end":85}},{"value":"/ where the key should go, meaning the keys may become \"lost\" if their","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":109254,"byte_end":109326,"line_start":1074,"line_end":1074,"column_start":5,"column_end":77}},{"value":"/ location does not reflect their state. For instance, if you change a key","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":109331,"byte_end":109407,"line_start":1075,"line_end":1075,"column_start":5,"column_end":81}},{"value":"/ so that the map now contains keys which compare equal, search may start","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":109412,"byte_end":109487,"line_start":1076,"line_end":1076,"column_start":5,"column_end":80}},{"value":"/ acting erratically, with two keys randomly masking each other. Implementations","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":109492,"byte_end":109574,"line_start":1077,"line_end":1077,"column_start":5,"column_end":87}},{"value":"/ are free to assume this doesn't happen (within the limits of memory-safety).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":109579,"byte_end":109659,"line_start":1078,"line_end":1078,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":110571,"byte_end":110580,"line_start":1100,"line_end":1100,"column_start":12,"column_end":21},"name":"raw_entry","qualname":"<HashMap<K, V, S>>::raw_entry","value":"pub fn raw_entry(&Self) -> RawEntryBuilder<, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a raw immutable entry builder for the HashMap.","sig":null,"attributes":[{"value":"/ Creates a raw immutable entry builder for the HashMap.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":109834,"byte_end":109892,"line_start":1084,"line_end":1084,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":109897,"byte_end":109900,"line_start":1085,"line_end":1085,"column_start":5,"column_end":8}},{"value":"/ Raw entries provide the lowest level of control for searching and","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":109905,"byte_end":109974,"line_start":1086,"line_end":1086,"column_start":5,"column_end":74}},{"value":"/ manipulating a map. They must be manually initialized with a hash and","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":109979,"byte_end":110052,"line_start":1087,"line_end":1087,"column_start":5,"column_end":78}},{"value":"/ then manually searched.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":110057,"byte_end":110084,"line_start":1088,"line_end":1088,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":110089,"byte_end":110092,"line_start":1089,"line_end":1089,"column_start":5,"column_end":8}},{"value":"/ This is useful for","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":110097,"byte_end":110119,"line_start":1090,"line_end":1090,"column_start":5,"column_end":27}},{"value":"/ * Hash memoization","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":110124,"byte_end":110146,"line_start":1091,"line_end":1091,"column_start":5,"column_end":27}},{"value":"/ * Using a search key that doesn't work with the Borrow trait","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":110151,"byte_end":110215,"line_start":1092,"line_end":1092,"column_start":5,"column_end":69}},{"value":"/ * Using custom comparison logic without newtype wrappers","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":110220,"byte_end":110280,"line_start":1093,"line_end":1093,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":110285,"byte_end":110288,"line_start":1094,"line_end":1094,"column_start":5,"column_end":8}},{"value":"/ Unless you are in such a situation, higher-level and more foolproof APIs like","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":110293,"byte_end":110374,"line_start":1095,"line_end":1095,"column_start":5,"column_end":86}},{"value":"/ `get` should be preferred.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":110379,"byte_end":110409,"line_start":1096,"line_end":1096,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":110414,"byte_end":110417,"line_start":1097,"line_end":1097,"column_start":5,"column_end":8}},{"value":"/ Immutable raw entries have very limited use; you might instead want `raw_entry_mut`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":110422,"byte_end":110510,"line_start":1098,"line_end":1098,"column_start":5,"column_end":93}}]},{"kind":"Struct","id":{"krate":0,"index":493},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":112314,"byte_end":112318,"line_start":1176,"line_end":1176,"column_start":12,"column_end":16},"name":"Iter","qualname":"::map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":497},{"krate":0,"index":498}],"decl_id":null,"docs":" An iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the entries of a `HashMap`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":112059,"byte_end":112107,"line_start":1169,"line_end":1169,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":112108,"byte_end":112111,"line_start":1170,"line_end":1170,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`HashMap`]. See its","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":112112,"byte_end":112187,"line_start":1171,"line_end":1171,"column_start":1,"column_end":76}},{"value":"/ documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":112188,"byte_end":112215,"line_start":1172,"line_end":1172,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":112216,"byte_end":112219,"line_start":1173,"line_end":1173,"column_start":1,"column_end":4}},{"value":"/ [`iter`]: struct.HashMap.html#method.iter","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":112220,"byte_end":112265,"line_start":1174,"line_end":1174,"column_start":1,"column_end":46}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":112266,"byte_end":112302,"line_start":1175,"line_end":1175,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":507},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":113138,"byte_end":113145,"line_start":1205,"line_end":1205,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":511},{"krate":0,"index":512}],"decl_id":null,"docs":" A mutable iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the entries of a `HashMap`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":112864,"byte_end":112919,"line_start":1198,"line_end":1198,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":112920,"byte_end":112923,"line_start":1199,"line_end":1199,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter_mut`] method on [`HashMap`]. See its","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":112924,"byte_end":113003,"line_start":1200,"line_end":1200,"column_start":1,"column_end":80}},{"value":"/ documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":113004,"byte_end":113031,"line_start":1201,"line_end":1201,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":113032,"byte_end":113035,"line_start":1202,"line_end":1202,"column_start":1,"column_end":4}},{"value":"/ [`iter_mut`]: struct.HashMap.html#method.iter_mut","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":113036,"byte_end":113089,"line_start":1203,"line_end":1203,"column_start":1,"column_end":54}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":113090,"byte_end":113126,"line_start":1204,"line_end":1204,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":520},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":114144,"byte_end":114152,"line_start":1234,"line_end":1234,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":523}],"decl_id":null,"docs":" An owning iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the entries of a `HashMap`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":113828,"byte_end":113883,"line_start":1227,"line_end":1227,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":113884,"byte_end":113887,"line_start":1228,"line_end":1228,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`HashMap`]","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":113888,"byte_end":113959,"line_start":1229,"line_end":1229,"column_start":1,"column_end":72}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":113960,"byte_end":114035,"line_start":1230,"line_end":1230,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":114036,"byte_end":114039,"line_start":1231,"line_end":1231,"column_start":1,"column_end":4}},{"value":"/ [`into_iter`]: struct.HashMap.html#method.into_iter","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":114040,"byte_end":114095,"line_start":1232,"line_end":1232,"column_start":1,"column_end":56}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":114096,"byte_end":114132,"line_start":1233,"line_end":1233,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":528},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":114747,"byte_end":114751,"line_start":1256,"line_end":1256,"column_start":12,"column_end":16},"name":"Keys","qualname":"::map::Keys","value":"Keys {  }","parent":null,"children":[{"krate":0,"index":532}],"decl_id":null,"docs":" An iterator over the keys of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the keys of a `HashMap`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":114495,"byte_end":114540,"line_start":1249,"line_end":1249,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":114541,"byte_end":114544,"line_start":1250,"line_end":1250,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`keys`] method on [`HashMap`]. See its","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":114545,"byte_end":114620,"line_start":1251,"line_end":1251,"column_start":1,"column_end":76}},{"value":"/ documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":114621,"byte_end":114648,"line_start":1252,"line_end":1252,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":114649,"byte_end":114652,"line_start":1253,"line_end":1253,"column_start":1,"column_end":4}},{"value":"/ [`keys`]: struct.HashMap.html#method.keys","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":114653,"byte_end":114698,"line_start":1254,"line_end":1254,"column_start":1,"column_end":46}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":114699,"byte_end":114735,"line_start":1255,"line_end":1255,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":541},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":115475,"byte_end":115481,"line_start":1283,"line_end":1283,"column_start":12,"column_end":18},"name":"Values","qualname":"::map::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":545}],"decl_id":null,"docs":" An iterator over the values of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the values of a `HashMap`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":115215,"byte_end":115262,"line_start":1276,"line_end":1276,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":115263,"byte_end":115266,"line_start":1277,"line_end":1277,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values`] method on [`HashMap`]. See its","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":115267,"byte_end":115344,"line_start":1278,"line_end":1278,"column_start":1,"column_end":78}},{"value":"/ documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":115345,"byte_end":115372,"line_start":1279,"line_end":1279,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":115373,"byte_end":115376,"line_start":1280,"line_end":1280,"column_start":1,"column_end":4}},{"value":"/ [`values`]: struct.HashMap.html#method.values","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":115377,"byte_end":115426,"line_start":1281,"line_end":1281,"column_start":1,"column_end":50}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":115427,"byte_end":115463,"line_start":1282,"line_end":1282,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":554},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":116217,"byte_end":116222,"line_start":1310,"line_end":1310,"column_start":12,"column_end":17},"name":"Drain","qualname":"::map::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":558}],"decl_id":null,"docs":" A draining iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ A draining iterator over the entries of a `HashMap`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":115951,"byte_end":116007,"line_start":1303,"line_end":1303,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":116008,"byte_end":116011,"line_start":1304,"line_end":1304,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`HashMap`]. See its","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":116012,"byte_end":116088,"line_start":1305,"line_end":1305,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":116089,"byte_end":116116,"line_start":1306,"line_end":1306,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":116117,"byte_end":116120,"line_start":1307,"line_end":1307,"column_start":1,"column_end":4}},{"value":"/ [`drain`]: struct.HashMap.html#method.drain","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":116121,"byte_end":116168,"line_start":1308,"line_end":1308,"column_start":1,"column_end":48}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":116169,"byte_end":116205,"line_start":1309,"line_end":1309,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":563},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":116892,"byte_end":116903,"line_start":1332,"line_end":1332,"column_start":12,"column_end":23},"name":"DrainFilter","qualname":"::map::DrainFilter","value":"DrainFilter {  }","parent":null,"children":[{"krate":0,"index":568},{"krate":0,"index":569}],"decl_id":null,"docs":" A draining iterator over entries of a `HashMap` which don't satisfy the predicate `f`.","sig":null,"attributes":[{"value":"/ A draining iterator over entries of a `HashMap` which don't satisfy the predicate `f`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":116571,"byte_end":116661,"line_start":1325,"line_end":1325,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":116662,"byte_end":116665,"line_start":1326,"line_end":1326,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain_filter`] method on [`HashMap`]. See its","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":116666,"byte_end":116749,"line_start":1327,"line_end":1327,"column_start":1,"column_end":84}},{"value":"/ documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":116750,"byte_end":116777,"line_start":1328,"line_end":1328,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":116778,"byte_end":116781,"line_start":1329,"line_end":1329,"column_start":1,"column_end":4}},{"value":"/ [`drain_filter`]: struct.HashMap.html#method.drain_filter","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":116782,"byte_end":116843,"line_start":1330,"line_end":1330,"column_start":1,"column_end":62}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":116844,"byte_end":116880,"line_start":1331,"line_end":1331,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":601},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":118810,"byte_end":118819,"line_start":1406,"line_end":1406,"column_start":12,"column_end":21},"name":"ValuesMut","qualname":"::map::ValuesMut","value":"ValuesMut {  }","parent":null,"children":[{"krate":0,"index":605}],"decl_id":null,"docs":" A mutable iterator over the values of a `HashMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the values of a `HashMap`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":118531,"byte_end":118585,"line_start":1399,"line_end":1399,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":118586,"byte_end":118589,"line_start":1400,"line_end":1400,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values_mut`] method on [`HashMap`]. See its","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":118590,"byte_end":118671,"line_start":1401,"line_end":1401,"column_start":1,"column_end":82}},{"value":"/ documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":118672,"byte_end":118699,"line_start":1402,"line_end":1402,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":118700,"byte_end":118703,"line_start":1403,"line_end":1403,"column_start":1,"column_end":4}},{"value":"/ [`values_mut`]: struct.HashMap.html#method.values_mut","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":118704,"byte_end":118761,"line_start":1404,"line_end":1404,"column_start":1,"column_end":58}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":118762,"byte_end":118798,"line_start":1405,"line_end":1405,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":606},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":119106,"byte_end":119124,"line_start":1415,"line_end":1415,"column_start":12,"column_end":30},"name":"RawEntryBuilderMut","qualname":"::map::RawEntryBuilderMut","value":"RawEntryBuilderMut {  }","parent":null,"children":[{"krate":0,"index":611}],"decl_id":null,"docs":" A builder for computing where in a [`HashMap`] a key-value pair would be stored.","sig":null,"attributes":[{"value":"/ A builder for computing where in a [`HashMap`] a key-value pair would be stored.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":118865,"byte_end":118949,"line_start":1410,"line_end":1410,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":118950,"byte_end":118953,"line_start":1411,"line_end":1411,"column_start":1,"column_end":4}},{"value":"/ See the [`HashMap::raw_entry_mut`] docs for usage examples.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":118954,"byte_end":119017,"line_start":1412,"line_end":1412,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":119018,"byte_end":119021,"line_start":1413,"line_end":1413,"column_start":1,"column_end":4}},{"value":"/ [`HashMap::raw_entry_mut`]: struct.HashMap.html#method.raw_entry_mut","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":119022,"byte_end":119094,"line_start":1414,"line_end":1414,"column_start":1,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":617},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":119729,"byte_end":119737,"line_start":1432,"line_end":1432,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::RawEntryMut::Occupied","value":"RawEntryMut::Occupied(RawOccupiedEntryMut)","parent":{"krate":0,"index":612},"children":[],"decl_id":null,"docs":" An occupied entry.\n","sig":null,"attributes":[{"value":"/ An occupied entry.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":119702,"byte_end":119724,"line_start":1431,"line_end":1431,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":620},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":119798,"byte_end":119804,"line_start":1434,"line_end":1434,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::RawEntryMut::Vacant","value":"RawEntryMut::Vacant(RawVacantEntryMut)","parent":{"krate":0,"index":612},"children":[],"decl_id":null,"docs":" A vacant entry.\n","sig":null,"attributes":[{"value":"/ A vacant entry.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":119774,"byte_end":119793,"line_start":1433,"line_end":1433,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":612},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":119671,"byte_end":119682,"line_start":1430,"line_end":1430,"column_start":10,"column_end":21},"name":"RawEntryMut","qualname":"::map::RawEntryMut","value":"pub enum RawEntryMut<'a, K, V, S> {\n    Occupied(RawOccupiedEntryMut),\n    Vacant(RawVacantEntryMut),\n}","parent":null,"children":[{"krate":0,"index":617},{"krate":0,"index":620}],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.","sig":null,"attributes":[{"value":"/ A view into a single entry in a map, which may either be vacant or occupied.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":119178,"byte_end":119258,"line_start":1419,"line_end":1419,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":119259,"byte_end":119262,"line_start":1420,"line_end":1420,"column_start":1,"column_end":4}},{"value":"/ This is a lower-level version of [`Entry`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":119263,"byte_end":119310,"line_start":1421,"line_end":1421,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":119311,"byte_end":119314,"line_start":1422,"line_end":1422,"column_start":1,"column_end":4}},{"value":"/ This `enum` is constructed through the [`raw_entry_mut`] method on [`HashMap`],","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":119315,"byte_end":119398,"line_start":1423,"line_end":1423,"column_start":1,"column_end":84}},{"value":"/ then calling one of the methods of that [`RawEntryBuilderMut`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":119399,"byte_end":119466,"line_start":1424,"line_end":1424,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":119467,"byte_end":119470,"line_start":1425,"line_end":1425,"column_start":1,"column_end":4}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":119471,"byte_end":119507,"line_start":1426,"line_end":1426,"column_start":1,"column_end":37}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":119508,"byte_end":119538,"line_start":1427,"line_end":1427,"column_start":1,"column_end":31}},{"value":"/ [`raw_entry_mut`]: struct.HashMap.html#method.raw_entry_mut","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":119539,"byte_end":119602,"line_start":1428,"line_end":1428,"column_start":1,"column_end":64}},{"value":"/ [`RawEntryBuilderMut`]: struct.RawEntryBuilderMut.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":119603,"byte_end":119661,"line_start":1429,"line_end":1429,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":623},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":119993,"byte_end":120012,"line_start":1441,"line_end":1441,"column_start":12,"column_end":31},"name":"RawOccupiedEntryMut","qualname":"::map::RawOccupiedEntryMut","value":"RawOccupiedEntryMut {  }","parent":null,"children":[{"krate":0,"index":627},{"krate":0,"index":628}],"decl_id":null,"docs":" A view into an occupied entry in a `HashMap`.\n It is part of the [`RawEntryMut`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `HashMap`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":119841,"byte_end":119890,"line_start":1437,"line_end":1437,"column_start":1,"column_end":50}},{"value":"/ It is part of the [`RawEntryMut`] enum.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":119891,"byte_end":119934,"line_start":1438,"line_end":1438,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":119935,"byte_end":119938,"line_start":1439,"line_end":1439,"column_start":1,"column_end":4}},{"value":"/ [`RawEntryMut`]: enum.RawEntryMut.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":119939,"byte_end":119981,"line_start":1440,"line_end":1440,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":635},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":120427,"byte_end":120444,"line_start":1463,"line_end":1463,"column_start":12,"column_end":29},"name":"RawVacantEntryMut","qualname":"::map::RawVacantEntryMut","value":"RawVacantEntryMut {  }","parent":null,"children":[{"krate":0,"index":640},{"krate":0,"index":641}],"decl_id":null,"docs":" A view into a vacant entry in a `HashMap`.\n It is part of the [`RawEntryMut`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `HashMap`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":120278,"byte_end":120324,"line_start":1459,"line_end":1459,"column_start":1,"column_end":47}},{"value":"/ It is part of the [`RawEntryMut`] enum.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":120325,"byte_end":120368,"line_start":1460,"line_end":1460,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":120369,"byte_end":120372,"line_start":1461,"line_end":1461,"column_start":1,"column_end":4}},{"value":"/ [`RawEntryMut`]: enum.RawEntryMut.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":120373,"byte_end":120415,"line_start":1462,"line_end":1462,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":642},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":120754,"byte_end":120769,"line_start":1473,"line_end":1473,"column_start":12,"column_end":27},"name":"RawEntryBuilder","qualname":"::map::RawEntryBuilder","value":"RawEntryBuilder {  }","parent":null,"children":[{"krate":0,"index":647}],"decl_id":null,"docs":" A builder for computing where in a [`HashMap`] a key-value pair would be stored.","sig":null,"attributes":[{"value":"/ A builder for computing where in a [`HashMap`] a key-value pair would be stored.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":120525,"byte_end":120609,"line_start":1468,"line_end":1468,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":120610,"byte_end":120613,"line_start":1469,"line_end":1469,"column_start":1,"column_end":4}},{"value":"/ See the [`HashMap::raw_entry`] docs for usage examples.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":120614,"byte_end":120673,"line_start":1470,"line_end":1470,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":120674,"byte_end":120677,"line_start":1471,"line_end":1471,"column_start":1,"column_end":4}},{"value":"/ [`HashMap::raw_entry`]: struct.HashMap.html#method.raw_entry","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":120678,"byte_end":120742,"line_start":1472,"line_end":1472,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":121027,"byte_end":121035,"line_start":1481,"line_end":1481,"column_start":12,"column_end":20},"name":"from_key","qualname":"<RawEntryBuilderMut>::from_key","value":"pub fn from_key<Q: ?Sized>(Self, &Q) -> RawEntryMut where S: BuildHasher,\nK: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given key.\n","sig":null,"attributes":[{"value":"/ Creates a `RawEntryMut` from the given key.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":120875,"byte_end":120922,"line_start":1478,"line_end":1478,"column_start":5,"column_end":52}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":120976,"byte_end":121015,"line_start":1480,"line_end":1480,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":121462,"byte_end":121485,"line_start":1495,"line_end":1495,"column_start":12,"column_end":35},"name":"from_key_hashed_nocheck","qualname":"<RawEntryBuilderMut>::from_key_hashed_nocheck","value":"pub fn from_key_hashed_nocheck<Q: ?Sized>(Self, u64, &Q) -> RawEntryMut where\nK: Borrow<Q>, Q: Eq","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given key and its hash.\n","sig":null,"attributes":[{"value":"/ Creates a `RawEntryMut` from the given key and its hash.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":121332,"byte_end":121392,"line_start":1492,"line_end":1492,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":121397,"byte_end":121406,"line_start":1493,"line_end":1493,"column_start":5,"column_end":14}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":121411,"byte_end":121450,"line_start":1494,"line_end":1494,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":121871,"byte_end":121880,"line_start":1508,"line_end":1508,"column_start":12,"column_end":21},"name":"from_hash","qualname":"<RawEntryBuilderMut>::from_hash","value":"pub fn from_hash<F>(Self, u64, F) -> RawEntryMut where for<'b> F: FnMut(&'b K)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given hash.\n","sig":null,"attributes":[{"value":"/ Creates a `RawEntryMut` from the given hash.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":121718,"byte_end":121766,"line_start":1505,"line_end":1505,"column_start":5,"column_end":53}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":121820,"byte_end":121859,"line_start":1507,"line_end":1507,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":675},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":122821,"byte_end":122829,"line_start":1537,"line_end":1537,"column_start":12,"column_end":20},"name":"from_key","qualname":"<RawEntryBuilder>::from_key","value":"pub fn from_key<Q: ?Sized>(Self, &Q) -> Option<(&'a K, &'a V)> where\nS: BuildHasher, K: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by key.\n","sig":null,"attributes":[{"value":"/ Access an entry by key.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":122689,"byte_end":122716,"line_start":1534,"line_end":1534,"column_start":5,"column_end":32}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":122770,"byte_end":122809,"line_start":1536,"line_end":1536,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":123271,"byte_end":123294,"line_start":1551,"line_end":1551,"column_start":12,"column_end":35},"name":"from_key_hashed_nocheck","qualname":"<RawEntryBuilder>::from_key_hashed_nocheck","value":"pub fn from_key_hashed_nocheck<Q: ?Sized>(Self, u64, &Q)\n-> Option<(&'a K, &'a V)> where K: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by a key and its hash.\n","sig":null,"attributes":[{"value":"/ Access an entry by a key and its hash.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":123124,"byte_end":123166,"line_start":1548,"line_end":1548,"column_start":5,"column_end":47}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":123220,"byte_end":123259,"line_start":1550,"line_end":1550,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":124008,"byte_end":124017,"line_start":1576,"line_end":1576,"column_start":12,"column_end":21},"name":"from_hash","qualname":"<RawEntryBuilder>::from_hash","value":"pub fn from_hash<F>(Self, u64, F) -> Option<(&'a K, &'a V)> where F: FnMut(&K)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by hash.\n","sig":null,"attributes":[{"value":"/ Access an entry by hash.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":123875,"byte_end":123903,"line_start":1573,"line_end":1573,"column_start":5,"column_end":33}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":123957,"byte_end":123996,"line_start":1575,"line_end":1575,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":691},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":124661,"byte_end":124667,"line_start":1598,"line_end":1598,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawEntryMut>::insert","value":"pub fn insert(Self, K, V) -> RawOccupiedEntryMut where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns a RawOccupiedEntryMut.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns a RawOccupiedEntryMut.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":124217,"byte_end":124284,"line_start":1585,"line_end":1585,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":124289,"byte_end":124292,"line_start":1586,"line_end":1586,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":124297,"byte_end":124311,"line_start":1587,"line_end":1587,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":124316,"byte_end":124319,"line_start":1588,"line_end":1588,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":124324,"byte_end":124331,"line_start":1589,"line_end":1589,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":124336,"byte_end":124363,"line_start":1590,"line_end":1590,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":124368,"byte_end":124371,"line_start":1591,"line_end":1591,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":124376,"byte_end":124429,"line_start":1592,"line_end":1592,"column_start":5,"column_end":58}},{"value":"/ let entry = map.raw_entry_mut().from_key(\"horseyland\").insert(\"horseyland\", 37);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":124434,"byte_end":124518,"line_start":1593,"line_end":1593,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":124523,"byte_end":124526,"line_start":1594,"line_end":1594,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(entry.remove_entry(), (\"horseyland\", 37));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":124531,"byte_end":124588,"line_start":1595,"line_end":1595,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":124593,"byte_end":124600,"line_start":1596,"line_end":1596,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":125644,"byte_end":125653,"line_start":1629,"line_end":1629,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<RawEntryMut>::or_insert","value":"pub fn or_insert(Self, K, V) -> (&'a mut K, &'a mut V) where K: Hash,\nS: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n mutable references to the key and value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default if empty, and returns","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":125021,"byte_end":125103,"line_start":1612,"line_end":1612,"column_start":5,"column_end":87}},{"value":"/ mutable references to the key and value in the entry.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":125108,"byte_end":125165,"line_start":1613,"line_end":1613,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":125170,"byte_end":125173,"line_start":1614,"line_end":1614,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":125178,"byte_end":125192,"line_start":1615,"line_end":1615,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":125197,"byte_end":125200,"line_start":1616,"line_end":1616,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":125205,"byte_end":125212,"line_start":1617,"line_end":1617,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":125217,"byte_end":125244,"line_start":1618,"line_end":1618,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":125249,"byte_end":125252,"line_start":1619,"line_end":1619,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":125257,"byte_end":125310,"line_start":1620,"line_end":1620,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":125315,"byte_end":125318,"line_start":1621,"line_end":1621,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut().from_key(\"poneyland\").or_insert(\"poneyland\", 3);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":125323,"byte_end":125395,"line_start":1622,"line_end":1622,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(map[\"poneyland\"], 3);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":125400,"byte_end":125436,"line_start":1623,"line_end":1623,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":125441,"byte_end":125444,"line_start":1624,"line_end":1624,"column_start":5,"column_end":8}},{"value":"/ *map.raw_entry_mut().from_key(\"poneyland\").or_insert(\"poneyland\", 10).1 *= 2;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":125449,"byte_end":125530,"line_start":1625,"line_end":1625,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(map[\"poneyland\"], 6);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":125535,"byte_end":125571,"line_start":1626,"line_end":1626,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":125576,"byte_end":125583,"line_start":1627,"line_end":1627,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":126557,"byte_end":126571,"line_start":1657,"line_end":1657,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<RawEntryMut>::or_insert_with","value":"pub fn or_insert_with<F>(Self, F) -> (&'a mut K, &'a mut V) where F: FnOnce()\n-> (K, V), K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns mutable references to the key and value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the result of the default function if empty,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":125967,"byte_end":126060,"line_start":1640,"line_end":1640,"column_start":5,"column_end":98}},{"value":"/ and returns mutable references to the key and value in the entry.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":126065,"byte_end":126134,"line_start":1641,"line_end":1641,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":126139,"byte_end":126142,"line_start":1642,"line_end":1642,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":126147,"byte_end":126161,"line_start":1643,"line_end":1643,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":126166,"byte_end":126169,"line_start":1644,"line_end":1644,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":126174,"byte_end":126181,"line_start":1645,"line_end":1645,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":126186,"byte_end":126213,"line_start":1646,"line_end":1646,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":126218,"byte_end":126221,"line_start":1647,"line_end":1647,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, String> = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":126226,"byte_end":126282,"line_start":1648,"line_end":1648,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":126287,"byte_end":126290,"line_start":1649,"line_end":1649,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut().from_key(\"poneyland\").or_insert_with(|| {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":126295,"byte_end":126360,"line_start":1650,"line_end":1650,"column_start":5,"column_end":70}},{"value":"/     (\"poneyland\", \"hoho\".to_string())","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":126365,"byte_end":126406,"line_start":1651,"line_end":1651,"column_start":5,"column_end":46}},{"value":"/ });","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":126411,"byte_end":126418,"line_start":1652,"line_end":1652,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":126423,"byte_end":126426,"line_start":1653,"line_end":1653,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], \"hoho\".to_string());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":126431,"byte_end":126484,"line_start":1654,"line_end":1654,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":126489,"byte_end":126496,"line_start":1655,"line_end":1655,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":695},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":127667,"byte_end":127677,"line_start":1695,"line_end":1695,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<RawEntryMut>::and_modify","value":"pub fn and_modify<F>(Self, F) -> Self where F: FnOnce(&mut K, &mut V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Provides in-place mutable access to an occupied entry before any\n potential inserts into the map.","sig":null,"attributes":[{"value":"/ Provides in-place mutable access to an occupied entry before any","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":126950,"byte_end":127018,"line_start":1672,"line_end":1672,"column_start":5,"column_end":73}},{"value":"/ potential inserts into the map.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":127023,"byte_end":127058,"line_start":1673,"line_end":1673,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":127063,"byte_end":127066,"line_start":1674,"line_end":1674,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":127071,"byte_end":127085,"line_start":1675,"line_end":1675,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":127090,"byte_end":127093,"line_start":1676,"line_end":1676,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":127098,"byte_end":127105,"line_start":1677,"line_end":1677,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":127110,"byte_end":127137,"line_start":1678,"line_end":1678,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":127142,"byte_end":127145,"line_start":1679,"line_end":1679,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":127150,"byte_end":127203,"line_start":1680,"line_end":1680,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":127208,"byte_end":127211,"line_start":1681,"line_end":1681,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut()","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":127216,"byte_end":127239,"line_start":1682,"line_end":1682,"column_start":5,"column_end":28}},{"value":"/    .from_key(\"poneyland\")","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":127244,"byte_end":127273,"line_start":1683,"line_end":1683,"column_start":5,"column_end":34}},{"value":"/    .and_modify(|_k, v| { *v += 1 })","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":127278,"byte_end":127317,"line_start":1684,"line_end":1684,"column_start":5,"column_end":44}},{"value":"/    .or_insert(\"poneyland\", 42);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":127322,"byte_end":127357,"line_start":1685,"line_end":1685,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(map[\"poneyland\"], 42);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":127362,"byte_end":127399,"line_start":1686,"line_end":1686,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":127404,"byte_end":127407,"line_start":1687,"line_end":1687,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut()","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":127412,"byte_end":127435,"line_start":1688,"line_end":1688,"column_start":5,"column_end":28}},{"value":"/    .from_key(\"poneyland\")","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":127440,"byte_end":127469,"line_start":1689,"line_end":1689,"column_start":5,"column_end":34}},{"value":"/    .and_modify(|_k, v| { *v += 1 })","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":127474,"byte_end":127513,"line_start":1690,"line_end":1690,"column_start":5,"column_end":44}},{"value":"/    .or_insert(\"poneyland\", 0);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":127518,"byte_end":127552,"line_start":1691,"line_end":1691,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":127557,"byte_end":127594,"line_start":1692,"line_end":1692,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":127599,"byte_end":127606,"line_start":1693,"line_end":1693,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":128253,"byte_end":128256,"line_start":1715,"line_end":1715,"column_start":12,"column_end":15},"name":"key","qualname":"<RawOccupiedEntryMut>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the key in the entry.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":128147,"byte_end":128192,"line_start":1713,"line_end":1713,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":128438,"byte_end":128445,"line_start":1721,"line_end":1721,"column_start":12,"column_end":19},"name":"key_mut","qualname":"<RawOccupiedEntryMut>::key_mut","value":"pub fn key_mut(&mut Self) -> &mut K","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the key in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the key in the entry.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":128324,"byte_end":128377,"line_start":1719,"line_end":1719,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":128706,"byte_end":128714,"line_start":1728,"line_end":1728,"column_start":12,"column_end":20},"name":"into_key","qualname":"<RawOccupiedEntryMut>::into_key","value":"pub fn into_key(Self) -> &'a mut K","parent":null,"children":[],"decl_id":null,"docs":" Converts the entry into a mutable reference to the key in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the entry into a mutable reference to the key in the entry","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":128525,"byte_end":128596,"line_start":1725,"line_end":1725,"column_start":5,"column_end":76}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":128601,"byte_end":128645,"line_start":1726,"line_end":1726,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":128900,"byte_end":128903,"line_start":1734,"line_end":1734,"column_start":12,"column_end":15},"name":"get","qualname":"<RawOccupiedEntryMut>::get","value":"pub fn get(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the value in the entry.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":128792,"byte_end":128839,"line_start":1732,"line_end":1732,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":129162,"byte_end":129170,"line_start":1741,"line_end":1741,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<RawOccupiedEntryMut>::into_mut","value":"pub fn into_mut(Self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the value in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the value in the entry","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":128971,"byte_end":129052,"line_start":1738,"line_end":1738,"column_start":5,"column_end":86}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":129057,"byte_end":129101,"line_start":1739,"line_end":1739,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":129364,"byte_end":129371,"line_start":1747,"line_end":1747,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RawOccupiedEntryMut>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the value in the entry.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":129248,"byte_end":129303,"line_start":1745,"line_end":1745,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":129567,"byte_end":129580,"line_start":1753,"line_end":1753,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<RawOccupiedEntryMut>::get_key_value","value":"pub fn get_key_value(&mut Self) -> (&K, &V)","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key and value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the key and value in the entry.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":129451,"byte_end":129506,"line_start":1751,"line_end":1751,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":129853,"byte_end":129870,"line_start":1762,"line_end":1762,"column_start":12,"column_end":29},"name":"get_key_value_mut","qualname":"<RawOccupiedEntryMut>::get_key_value_mut","value":"pub fn get_key_value_mut(&mut Self) -> (&mut K, &mut V)","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the key and value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the key and value in the entry.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":129729,"byte_end":129792,"line_start":1760,"line_end":1760,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":130238,"byte_end":130252,"line_start":1772,"line_end":1772,"column_start":12,"column_end":26},"name":"into_key_value","qualname":"<RawOccupiedEntryMut>::into_key_value","value":"pub fn into_key_value(Self) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the key and value in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the key and value in the entry","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":130039,"byte_end":130128,"line_start":1769,"line_end":1769,"column_start":5,"column_end":94}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":130133,"byte_end":130177,"line_start":1770,"line_end":1770,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":130550,"byte_end":130556,"line_start":1781,"line_end":1781,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawOccupiedEntryMut>::insert","value":"pub fn insert(&mut Self, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":130422,"byte_end":130489,"line_start":1779,"line_end":1779,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":130768,"byte_end":130778,"line_start":1787,"line_end":1787,"column_start":12,"column_end":22},"name":"insert_key","qualname":"<RawOccupiedEntryMut>::insert_key","value":"pub fn insert_key(&mut Self, K) -> K","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":130640,"byte_end":130707,"line_start":1785,"line_end":1785,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":130972,"byte_end":130978,"line_start":1793,"line_end":1793,"column_start":12,"column_end":18},"name":"remove","qualname":"<RawOccupiedEntryMut>::remove","value":"pub fn remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of the entry, and returns it.\n","sig":null,"attributes":[{"value":"/ Takes the value out of the entry, and returns it.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":130858,"byte_end":130911,"line_start":1791,"line_end":1791,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":131151,"byte_end":131163,"line_start":1799,"line_end":1799,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<RawOccupiedEntryMut>::remove_entry","value":"pub fn remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Take the ownership of the key and value from the map.\n","sig":null,"attributes":[{"value":"/ Take the ownership of the key and value from the map.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":131033,"byte_end":131090,"line_start":1797,"line_end":1797,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":131461,"byte_end":131467,"line_start":1808,"line_end":1808,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawVacantEntryMut>::insert","value":"pub fn insert(Self, K, V) -> (&'a mut K, &'a mut V) where K: Hash,\nS: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":131294,"byte_end":131353,"line_start":1805,"line_end":1805,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":131358,"byte_end":131400,"line_start":1806,"line_end":1806,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":131946,"byte_end":131967,"line_start":1822,"line_end":1822,"column_start":12,"column_end":33},"name":"insert_hashed_nocheck","qualname":"<RawVacantEntryMut>::insert_hashed_nocheck","value":"pub fn insert_hashed_nocheck(Self, u64, K, V) -> (&'a mut K, &'a mut V) where\nK: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":131740,"byte_end":131799,"line_start":1818,"line_end":1818,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":131804,"byte_end":131846,"line_start":1819,"line_end":1819,"column_start":5,"column_end":47}},{"value":"allow(clippy :: shadow_unrelated)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":131900,"byte_end":131934,"line_start":1821,"line_end":1821,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":132346,"byte_end":132364,"line_start":1833,"line_end":1833,"column_start":12,"column_end":30},"name":"insert_with_hasher","qualname":"<RawVacantEntryMut>::insert_with_hasher","value":"pub fn insert_with_hasher<H>(Self, u64, K, V, H) -> (&'a mut K, &'a mut V)\nwhere H: Fn(&K) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Set the value of an entry with a custom hasher function.\n","sig":null,"attributes":[{"value":"/ Set the value of an entry with a custom hasher function.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":132225,"byte_end":132285,"line_start":1831,"line_end":1831,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":756},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":134748,"byte_end":134756,"line_start":1914,"line_end":1914,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry)","parent":{"krate":0,"index":751},"children":[],"decl_id":null,"docs":" An occupied entry.\n","sig":null,"attributes":[{"value":"/ An occupied entry.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":134721,"byte_end":134743,"line_start":1913,"line_end":1913,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":759},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":134815,"byte_end":134821,"line_start":1917,"line_end":1917,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::Entry::Vacant","value":"Entry::Vacant(VacantEntry)","parent":{"krate":0,"index":751},"children":[],"decl_id":null,"docs":" A vacant entry.\n","sig":null,"attributes":[{"value":"/ A vacant entry.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":134791,"byte_end":134810,"line_start":1916,"line_end":1916,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":751},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":134696,"byte_end":134701,"line_start":1912,"line_end":1912,"column_start":10,"column_end":15},"name":"Entry","qualname":"::map::Entry","value":"pub enum Entry<'a, K, V, S> { Occupied(OccupiedEntry), Vacant(VacantEntry), }","parent":null,"children":[{"krate":0,"index":756},{"krate":0,"index":759}],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.","sig":null,"attributes":[{"value":"/ A view into a single entry in a map, which may either be vacant or occupied.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":134440,"byte_end":134520,"line_start":1906,"line_end":1906,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":134521,"byte_end":134524,"line_start":1907,"line_end":1907,"column_start":1,"column_end":4}},{"value":"/ This `enum` is constructed from the [`entry`] method on [`HashMap`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":134525,"byte_end":134597,"line_start":1908,"line_end":1908,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":134598,"byte_end":134601,"line_start":1909,"line_end":1909,"column_start":1,"column_end":4}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":134602,"byte_end":134638,"line_start":1910,"line_end":1910,"column_start":1,"column_end":37}},{"value":"/ [`entry`]: struct.HashMap.html#method.entry","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":134639,"byte_end":134686,"line_start":1911,"line_end":1911,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":767},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":135307,"byte_end":135320,"line_start":1933,"line_end":1933,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::map::OccupiedEntry","value":"OccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":774}],"decl_id":null,"docs":" A view into an occupied entry in a `HashMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `HashMap`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":135173,"byte_end":135222,"line_start":1929,"line_end":1929,"column_start":1,"column_end":50}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":135223,"byte_end":135260,"line_start":1930,"line_end":1930,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":135261,"byte_end":135264,"line_start":1931,"line_end":1931,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":135265,"byte_end":135295,"line_start":1932,"line_end":1932,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":788},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":136045,"byte_end":136056,"line_start":1967,"line_end":1967,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::map::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":795}],"decl_id":null,"docs":" A view into a vacant entry in a `HashMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `HashMap`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":135914,"byte_end":135960,"line_start":1963,"line_end":1963,"column_start":1,"column_end":47}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":135961,"byte_end":135998,"line_start":1964,"line_end":1964,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":135999,"byte_end":136002,"line_start":1965,"line_end":1965,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":136003,"byte_end":136033,"line_start":1966,"line_end":1966,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":947},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":142999,"byte_end":143005,"line_start":2225,"line_end":2225,"column_start":12,"column_end":18},"name":"insert","qualname":"<Entry>::insert","value":"pub fn insert(Self, V) -> OccupiedEntry where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns an OccupiedEntry.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns an OccupiedEntry.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":142607,"byte_end":142669,"line_start":2212,"line_end":2212,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":142674,"byte_end":142677,"line_start":2213,"line_end":2213,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":142682,"byte_end":142696,"line_start":2214,"line_end":2214,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":142701,"byte_end":142704,"line_start":2215,"line_end":2215,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":142709,"byte_end":142716,"line_start":2216,"line_end":2216,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":142721,"byte_end":142748,"line_start":2217,"line_end":2217,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":142753,"byte_end":142756,"line_start":2218,"line_end":2218,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":142761,"byte_end":142814,"line_start":2219,"line_end":2219,"column_start":5,"column_end":58}},{"value":"/ let entry = map.entry(\"horseyland\").insert(37);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":142819,"byte_end":142870,"line_start":2220,"line_end":2220,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":142875,"byte_end":142878,"line_start":2221,"line_end":2221,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(entry.key(), &\"horseyland\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":142883,"byte_end":142926,"line_start":2222,"line_end":2222,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":142931,"byte_end":142938,"line_start":2223,"line_end":2223,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":948},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":143881,"byte_end":143890,"line_start":2256,"line_end":2256,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"pub fn or_insert(Self, V) -> &'a mut V where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default if empty, and returns","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":143331,"byte_end":143413,"line_start":2239,"line_end":2239,"column_start":5,"column_end":87}},{"value":"/ a mutable reference to the value in the entry.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":143418,"byte_end":143468,"line_start":2240,"line_end":2240,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":143473,"byte_end":143476,"line_start":2241,"line_end":2241,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":143481,"byte_end":143495,"line_start":2242,"line_end":2242,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":143500,"byte_end":143503,"line_start":2243,"line_end":2243,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":143508,"byte_end":143515,"line_start":2244,"line_end":2244,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":143520,"byte_end":143547,"line_start":2245,"line_end":2245,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":143552,"byte_end":143555,"line_start":2246,"line_end":2246,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":143560,"byte_end":143613,"line_start":2247,"line_end":2247,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":143618,"byte_end":143621,"line_start":2248,"line_end":2248,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\").or_insert(3);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":143626,"byte_end":143666,"line_start":2249,"line_end":2249,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map[\"poneyland\"], 3);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":143671,"byte_end":143707,"line_start":2250,"line_end":2250,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":143712,"byte_end":143715,"line_start":2251,"line_end":2251,"column_start":5,"column_end":8}},{"value":"/ *map.entry(\"poneyland\").or_insert(10) *= 2;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":143720,"byte_end":143767,"line_start":2252,"line_end":2252,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(map[\"poneyland\"], 6);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":143772,"byte_end":143808,"line_start":2253,"line_end":2253,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":143813,"byte_end":143820,"line_start":2254,"line_end":2254,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":949},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":144680,"byte_end":144694,"line_start":2283,"line_end":2283,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"pub fn or_insert_with<F: FnOnce() -> V>(Self, F) -> &'a mut V where K: Hash,\nS: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the result of the default function if empty,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":144136,"byte_end":144229,"line_start":2267,"line_end":2267,"column_start":5,"column_end":98}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":144234,"byte_end":144296,"line_start":2268,"line_end":2268,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":144301,"byte_end":144304,"line_start":2269,"line_end":2269,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":144309,"byte_end":144323,"line_start":2270,"line_end":2270,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":144328,"byte_end":144331,"line_start":2271,"line_end":2271,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":144336,"byte_end":144343,"line_start":2272,"line_end":2272,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":144348,"byte_end":144375,"line_start":2273,"line_end":2273,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":144380,"byte_end":144383,"line_start":2274,"line_end":2274,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, String> = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":144388,"byte_end":144444,"line_start":2275,"line_end":2275,"column_start":5,"column_end":61}},{"value":"/ let s = \"hoho\".to_string();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":144449,"byte_end":144480,"line_start":2276,"line_end":2276,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":144485,"byte_end":144488,"line_start":2277,"line_end":2277,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\").or_insert_with(|| s);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":144493,"byte_end":144541,"line_start":2278,"line_end":2278,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":144546,"byte_end":144549,"line_start":2279,"line_end":2279,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], \"hoho\".to_string());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":144554,"byte_end":144607,"line_start":2280,"line_end":2280,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":144612,"byte_end":144619,"line_start":2281,"line_end":2281,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":951},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":145522,"byte_end":145540,"line_start":2310,"line_end":2310,"column_start":12,"column_end":30},"name":"or_insert_with_key","qualname":"<Entry>::or_insert_with_key","value":"pub fn or_insert_with_key<F: FnOnce(&K) -> V>(Self, F) -> &'a mut V where\nK: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting, if empty, the result of the default function,\n which takes the key as its argument, and returns a mutable reference to the value in the\n entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting, if empty, the result of the default function,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":144960,"byte_end":145055,"line_start":2294,"line_end":2294,"column_start":5,"column_end":100}},{"value":"/ which takes the key as its argument, and returns a mutable reference to the value in the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":145060,"byte_end":145152,"line_start":2295,"line_end":2295,"column_start":5,"column_end":97}},{"value":"/ entry.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":145157,"byte_end":145167,"line_start":2296,"line_end":2296,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":145172,"byte_end":145175,"line_start":2297,"line_end":2297,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":145180,"byte_end":145194,"line_start":2298,"line_end":2298,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":145199,"byte_end":145202,"line_start":2299,"line_end":2299,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":145207,"byte_end":145214,"line_start":2300,"line_end":2300,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":145219,"byte_end":145246,"line_start":2301,"line_end":2301,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":145251,"byte_end":145254,"line_start":2302,"line_end":2302,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, usize> = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":145259,"byte_end":145314,"line_start":2303,"line_end":2303,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":145319,"byte_end":145322,"line_start":2304,"line_end":2304,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\").or_insert_with_key(|key| key.chars().count());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":145327,"byte_end":145400,"line_start":2305,"line_end":2305,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":145405,"byte_end":145408,"line_start":2306,"line_end":2306,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 9);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":145413,"byte_end":145449,"line_start":2307,"line_end":2307,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":145454,"byte_end":145461,"line_start":2308,"line_end":2308,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":953},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":146211,"byte_end":146214,"line_start":2335,"line_end":2335,"column_start":12,"column_end":15},"name":"key","qualname":"<Entry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to this entry's key.","sig":null,"attributes":[{"value":"/ Returns a reference to this entry's key.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":145885,"byte_end":145929,"line_start":2324,"line_end":2324,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":145934,"byte_end":145937,"line_start":2325,"line_end":2325,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":145942,"byte_end":145956,"line_start":2326,"line_end":2326,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":145961,"byte_end":145964,"line_start":2327,"line_end":2327,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":145969,"byte_end":145976,"line_start":2328,"line_end":2328,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":145981,"byte_end":146008,"line_start":2329,"line_end":2329,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":146013,"byte_end":146016,"line_start":2330,"line_end":2330,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":146021,"byte_end":146074,"line_start":2331,"line_end":2331,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":146079,"byte_end":146138,"line_start":2332,"line_end":2332,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":146143,"byte_end":146150,"line_start":2333,"line_end":2333,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":954},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":147003,"byte_end":147013,"line_start":2363,"line_end":2363,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<Entry>::and_modify","value":"pub fn and_modify<F>(Self, F) -> Self where F: FnOnce(&mut V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Provides in-place mutable access to an occupied entry before any\n potential inserts into the map.","sig":null,"attributes":[{"value":"/ Provides in-place mutable access to an occupied entry before any","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":146381,"byte_end":146449,"line_start":2342,"line_end":2342,"column_start":5,"column_end":73}},{"value":"/ potential inserts into the map.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":146454,"byte_end":146489,"line_start":2343,"line_end":2343,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":146494,"byte_end":146497,"line_start":2344,"line_end":2344,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":146502,"byte_end":146516,"line_start":2345,"line_end":2345,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":146521,"byte_end":146524,"line_start":2346,"line_end":2346,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":146529,"byte_end":146536,"line_start":2347,"line_end":2347,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":146541,"byte_end":146568,"line_start":2348,"line_end":2348,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":146573,"byte_end":146576,"line_start":2349,"line_end":2349,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":146581,"byte_end":146634,"line_start":2350,"line_end":2350,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":146639,"byte_end":146642,"line_start":2351,"line_end":2351,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\")","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":146647,"byte_end":146673,"line_start":2352,"line_end":2352,"column_start":5,"column_end":31}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":146678,"byte_end":146713,"line_start":2353,"line_end":2353,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":146718,"byte_end":146740,"line_start":2354,"line_end":2354,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 42);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":146745,"byte_end":146782,"line_start":2355,"line_end":2355,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":146787,"byte_end":146790,"line_start":2356,"line_end":2356,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\")","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":146795,"byte_end":146821,"line_start":2357,"line_end":2357,"column_start":5,"column_end":31}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":146826,"byte_end":146861,"line_start":2358,"line_end":2358,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":146866,"byte_end":146888,"line_start":2359,"line_end":2359,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":146893,"byte_end":146930,"line_start":2360,"line_end":2360,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":146935,"byte_end":146942,"line_start":2361,"line_end":2361,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":961},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":147829,"byte_end":147839,"line_start":2392,"line_end":2392,"column_start":12,"column_end":22},"name":"or_default","qualname":"<Entry>::or_default","value":"pub fn or_default(Self) -> &'a mut V where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default value if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default value if empty,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":147363,"byte_end":147439,"line_start":2378,"line_end":2378,"column_start":5,"column_end":81}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":147444,"byte_end":147506,"line_start":2379,"line_end":2379,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":147511,"byte_end":147514,"line_start":2380,"line_end":2380,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":147519,"byte_end":147533,"line_start":2381,"line_end":2381,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":147538,"byte_end":147541,"line_start":2382,"line_end":2382,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":147546,"byte_end":147553,"line_start":2383,"line_end":2383,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":147558,"byte_end":147585,"line_start":2384,"line_end":2384,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":147590,"byte_end":147593,"line_start":2385,"line_end":2385,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, Option<u32>> = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":147598,"byte_end":147659,"line_start":2386,"line_end":2386,"column_start":5,"column_end":66}},{"value":"/ map.entry(\"poneyland\").or_default();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":147664,"byte_end":147704,"line_start":2387,"line_end":2387,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":147709,"byte_end":147712,"line_start":2388,"line_end":2388,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], None);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":147717,"byte_end":147756,"line_start":2389,"line_end":2389,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":147761,"byte_end":147768,"line_start":2390,"line_end":2390,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":967},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":148506,"byte_end":148509,"line_start":2417,"line_end":2417,"column_start":12,"column_end":15},"name":"key","qualname":"<OccupiedEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the key in the entry.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":148133,"byte_end":148178,"line_start":2405,"line_end":2405,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":148183,"byte_end":148186,"line_start":2406,"line_end":2406,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":148191,"byte_end":148205,"line_start":2407,"line_end":2407,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":148210,"byte_end":148213,"line_start":2408,"line_end":2408,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":148218,"byte_end":148225,"line_start":2409,"line_end":2409,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":148230,"byte_end":148257,"line_start":2410,"line_end":2410,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":148262,"byte_end":148265,"line_start":2411,"line_end":2411,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":148270,"byte_end":148323,"line_start":2412,"line_end":2412,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":148328,"byte_end":148369,"line_start":2413,"line_end":2413,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":148374,"byte_end":148433,"line_start":2414,"line_end":2414,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":148438,"byte_end":148445,"line_start":2415,"line_end":2415,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":149162,"byte_end":149174,"line_start":2440,"line_end":2440,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<OccupiedEntry>::remove_entry","value":"pub fn remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Take the ownership of the key and value from the map.","sig":null,"attributes":[{"value":"/ Take the ownership of the key and value from the map.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":148577,"byte_end":148634,"line_start":2421,"line_end":2421,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":148639,"byte_end":148642,"line_start":2422,"line_end":2422,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":148647,"byte_end":148661,"line_start":2423,"line_end":2423,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":148666,"byte_end":148669,"line_start":2424,"line_end":2424,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":148674,"byte_end":148681,"line_start":2425,"line_end":2425,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":148686,"byte_end":148713,"line_start":2426,"line_end":2426,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":148718,"byte_end":148753,"line_start":2427,"line_end":2427,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":148758,"byte_end":148761,"line_start":2428,"line_end":2428,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":148766,"byte_end":148819,"line_start":2429,"line_end":2429,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":148824,"byte_end":148865,"line_start":2430,"line_end":2430,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":148870,"byte_end":148873,"line_start":2431,"line_end":2431,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":148878,"byte_end":148934,"line_start":2432,"line_end":2432,"column_start":5,"column_end":61}},{"value":"/     // We delete the entry from the map.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":148939,"byte_end":148983,"line_start":2433,"line_end":2433,"column_start":5,"column_end":49}},{"value":"/     o.remove_entry();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":148988,"byte_end":149013,"line_start":2434,"line_end":2434,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":149018,"byte_end":149023,"line_start":2435,"line_end":2435,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":149028,"byte_end":149031,"line_start":2436,"line_end":2436,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map.contains_key(\"poneyland\"), false);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":149036,"byte_end":149089,"line_start":2437,"line_end":2437,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":149094,"byte_end":149101,"line_start":2438,"line_end":2438,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":969},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":149726,"byte_end":149729,"line_start":2460,"line_end":2460,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"pub fn get(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the value in the entry.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":149258,"byte_end":149305,"line_start":2444,"line_end":2444,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":149310,"byte_end":149313,"line_start":2445,"line_end":2445,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":149318,"byte_end":149332,"line_start":2446,"line_end":2446,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":149337,"byte_end":149340,"line_start":2447,"line_end":2447,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":149345,"byte_end":149352,"line_start":2448,"line_end":2448,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":149357,"byte_end":149384,"line_start":2449,"line_end":2449,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":149389,"byte_end":149424,"line_start":2450,"line_end":2450,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":149429,"byte_end":149432,"line_start":2451,"line_end":2451,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":149437,"byte_end":149490,"line_start":2452,"line_end":2452,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":149495,"byte_end":149536,"line_start":2453,"line_end":2453,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":149541,"byte_end":149544,"line_start":2454,"line_end":2454,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":149549,"byte_end":149605,"line_start":2455,"line_end":2455,"column_start":5,"column_end":61}},{"value":"/     assert_eq!(o.get(), &12);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":149610,"byte_end":149643,"line_start":2456,"line_end":2456,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":149648,"byte_end":149653,"line_start":2457,"line_end":2457,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":149658,"byte_end":149665,"line_start":2458,"line_end":2458,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":970},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":150689,"byte_end":150696,"line_start":2492,"line_end":2492,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the value in the entry.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":149797,"byte_end":149852,"line_start":2464,"line_end":2464,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":149857,"byte_end":149860,"line_start":2465,"line_end":2465,"column_start":5,"column_end":8}},{"value":"/ If you need a reference to the `OccupiedEntry` which may outlive the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":149865,"byte_end":149937,"line_start":2466,"line_end":2466,"column_start":5,"column_end":77}},{"value":"/ destruction of the `Entry` value, see [`into_mut`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":149942,"byte_end":149997,"line_start":2467,"line_end":2467,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":150002,"byte_end":150005,"line_start":2468,"line_end":2468,"column_start":5,"column_end":8}},{"value":"/ [`into_mut`]: #method.into_mut","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":150010,"byte_end":150044,"line_start":2469,"line_end":2469,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":150049,"byte_end":150052,"line_start":2470,"line_end":2470,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":150057,"byte_end":150071,"line_start":2471,"line_end":2471,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":150076,"byte_end":150079,"line_start":2472,"line_end":2472,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":150084,"byte_end":150091,"line_start":2473,"line_end":2473,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":150096,"byte_end":150123,"line_start":2474,"line_end":2474,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":150128,"byte_end":150163,"line_start":2475,"line_end":2475,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":150168,"byte_end":150171,"line_start":2476,"line_end":2476,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":150176,"byte_end":150229,"line_start":2477,"line_end":2477,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":150234,"byte_end":150275,"line_start":2478,"line_end":2478,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":150280,"byte_end":150283,"line_start":2479,"line_end":2479,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":150288,"byte_end":150325,"line_start":2480,"line_end":2480,"column_start":5,"column_end":42}},{"value":"/ if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":150330,"byte_end":150390,"line_start":2481,"line_end":2481,"column_start":5,"column_end":65}},{"value":"/     *o.get_mut() += 10;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":150395,"byte_end":150422,"line_start":2482,"line_end":2482,"column_start":5,"column_end":32}},{"value":"/     assert_eq!(*o.get(), 22);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":150427,"byte_end":150460,"line_start":2483,"line_end":2483,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":150465,"byte_end":150468,"line_start":2484,"line_end":2484,"column_start":5,"column_end":8}},{"value":"/     // We can use the same Entry multiple times.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":150473,"byte_end":150525,"line_start":2485,"line_end":2485,"column_start":5,"column_end":57}},{"value":"/     *o.get_mut() += 2;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":150530,"byte_end":150556,"line_start":2486,"line_end":2486,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":150561,"byte_end":150566,"line_start":2487,"line_end":2487,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":150571,"byte_end":150574,"line_start":2488,"line_end":2488,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 24);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":150579,"byte_end":150616,"line_start":2489,"line_end":2489,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":150621,"byte_end":150628,"line_start":2490,"line_end":2490,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":971},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151548,"byte_end":151556,"line_start":2520,"line_end":2520,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"pub fn into_mut(Self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the value in the entry\n with a lifetime bound to the map itself.","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the value in the entry","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":150776,"byte_end":150857,"line_start":2496,"line_end":2496,"column_start":5,"column_end":86}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":150862,"byte_end":150906,"line_start":2497,"line_end":2497,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":150911,"byte_end":150914,"line_start":2498,"line_end":2498,"column_start":5,"column_end":8}},{"value":"/ If you need multiple references to the `OccupiedEntry`, see [`get_mut`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":150919,"byte_end":150995,"line_start":2499,"line_end":2499,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151000,"byte_end":151003,"line_start":2500,"line_end":2500,"column_start":5,"column_end":8}},{"value":"/ [`get_mut`]: #method.get_mut","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151008,"byte_end":151040,"line_start":2501,"line_end":2501,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151045,"byte_end":151048,"line_start":2502,"line_end":2502,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151053,"byte_end":151067,"line_start":2503,"line_end":2503,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151072,"byte_end":151075,"line_start":2504,"line_end":2504,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151080,"byte_end":151087,"line_start":2505,"line_end":2505,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151092,"byte_end":151119,"line_start":2506,"line_end":2506,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151124,"byte_end":151159,"line_start":2507,"line_end":2507,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151164,"byte_end":151167,"line_start":2508,"line_end":2508,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151172,"byte_end":151225,"line_start":2509,"line_end":2509,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151230,"byte_end":151271,"line_start":2510,"line_end":2510,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151276,"byte_end":151279,"line_start":2511,"line_end":2511,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151284,"byte_end":151321,"line_start":2512,"line_end":2512,"column_start":5,"column_end":42}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151326,"byte_end":151382,"line_start":2513,"line_end":2513,"column_start":5,"column_end":61}},{"value":"/     *o.into_mut() += 10;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151387,"byte_end":151415,"line_start":2514,"line_end":2514,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151420,"byte_end":151425,"line_start":2515,"line_end":2515,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151430,"byte_end":151433,"line_start":2516,"line_end":2516,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 22);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151438,"byte_end":151475,"line_start":2517,"line_end":2517,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151480,"byte_end":151487,"line_start":2518,"line_end":2518,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":972},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":152180,"byte_end":152186,"line_start":2542,"line_end":2542,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"pub fn insert(&mut Self, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151634,"byte_end":151701,"line_start":2524,"line_end":2524,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151706,"byte_end":151709,"line_start":2525,"line_end":2525,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151714,"byte_end":151728,"line_start":2526,"line_end":2526,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151733,"byte_end":151736,"line_start":2527,"line_end":2527,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151741,"byte_end":151748,"line_start":2528,"line_end":2528,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151753,"byte_end":151780,"line_start":2529,"line_end":2529,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151785,"byte_end":151820,"line_start":2530,"line_end":2530,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151825,"byte_end":151828,"line_start":2531,"line_end":2531,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151833,"byte_end":151886,"line_start":2532,"line_end":2532,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151891,"byte_end":151932,"line_start":2533,"line_end":2533,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151937,"byte_end":151940,"line_start":2534,"line_end":2534,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":151945,"byte_end":152005,"line_start":2535,"line_end":2535,"column_start":5,"column_end":65}},{"value":"/     assert_eq!(o.insert(15), 12);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":152010,"byte_end":152047,"line_start":2536,"line_end":2536,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":152052,"byte_end":152057,"line_start":2537,"line_end":2537,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":152062,"byte_end":152065,"line_start":2538,"line_end":2538,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 15);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":152070,"byte_end":152107,"line_start":2539,"line_end":2539,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":152112,"byte_end":152119,"line_start":2540,"line_end":2540,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":973},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":152868,"byte_end":152874,"line_start":2566,"line_end":2566,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"pub fn remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of the entry, and returns it.","sig":null,"attributes":[{"value":"/ Takes the value out of the entry, and returns it.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":152326,"byte_end":152379,"line_start":2548,"line_end":2548,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":152384,"byte_end":152387,"line_start":2549,"line_end":2549,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":152392,"byte_end":152406,"line_start":2550,"line_end":2550,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":152411,"byte_end":152414,"line_start":2551,"line_end":2551,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":152419,"byte_end":152426,"line_start":2552,"line_end":2552,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":152431,"byte_end":152458,"line_start":2553,"line_end":2553,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":152463,"byte_end":152498,"line_start":2554,"line_end":2554,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":152503,"byte_end":152506,"line_start":2555,"line_end":2555,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":152511,"byte_end":152564,"line_start":2556,"line_end":2556,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":152569,"byte_end":152610,"line_start":2557,"line_end":2557,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":152615,"byte_end":152618,"line_start":2558,"line_end":2558,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":152623,"byte_end":152679,"line_start":2559,"line_end":2559,"column_start":5,"column_end":61}},{"value":"/     assert_eq!(o.remove(), 12);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":152684,"byte_end":152719,"line_start":2560,"line_end":2560,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":152724,"byte_end":152729,"line_start":2561,"line_end":2561,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":152734,"byte_end":152737,"line_start":2562,"line_end":2562,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map.contains_key(\"poneyland\"), false);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":152742,"byte_end":152795,"line_start":2563,"line_end":2563,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":152800,"byte_end":152807,"line_start":2564,"line_end":2564,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":974},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":153694,"byte_end":153707,"line_start":2591,"line_end":2591,"column_start":12,"column_end":25},"name":"replace_entry","qualname":"<OccupiedEntry>::replace_entry","value":"pub fn replace_entry(Self, V) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Replaces the entry, returning the old key and value. The new key in the hash map will be\n the key used to create this entry.","sig":null,"attributes":[{"value":"/ Replaces the entry, returning the old key and value. The new key in the hash map will be","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":152929,"byte_end":153021,"line_start":2570,"line_end":2570,"column_start":5,"column_end":97}},{"value":"/ the key used to create this entry.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":153026,"byte_end":153064,"line_start":2571,"line_end":2571,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":153069,"byte_end":153072,"line_start":2572,"line_end":2572,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":153077,"byte_end":153091,"line_start":2573,"line_end":2573,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":153096,"byte_end":153099,"line_start":2574,"line_end":2574,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":153104,"byte_end":153111,"line_start":2575,"line_end":2575,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::hash_map::{Entry, HashMap};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":153116,"byte_end":153162,"line_start":2576,"line_end":2576,"column_start":5,"column_end":51}},{"value":"/ use std::rc::Rc;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":153167,"byte_end":153187,"line_start":2577,"line_end":2577,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":153192,"byte_end":153195,"line_start":2578,"line_end":2578,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<Rc<String>, u32> = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":153200,"byte_end":153259,"line_start":2579,"line_end":2579,"column_start":5,"column_end":64}},{"value":"/ map.insert(Rc::new(\"Stringthing\".to_string()), 15);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":153264,"byte_end":153319,"line_start":2580,"line_end":2580,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":153324,"byte_end":153327,"line_start":2581,"line_end":2581,"column_start":5,"column_end":8}},{"value":"/ let my_key = Rc::new(\"Stringthing\".to_string());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":153332,"byte_end":153384,"line_start":2582,"line_end":2582,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":153389,"byte_end":153392,"line_start":2583,"line_end":2583,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(entry) = map.entry(my_key) {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":153397,"byte_end":153452,"line_start":2584,"line_end":2584,"column_start":5,"column_end":60}},{"value":"/     // Also replace the key with a handle to our other key.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":153457,"byte_end":153520,"line_start":2585,"line_end":2585,"column_start":5,"column_end":68}},{"value":"/     let (old_key, old_value): (Rc<String>, u32) = entry.replace_entry(16);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":153525,"byte_end":153603,"line_start":2586,"line_end":2586,"column_start":5,"column_end":83}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":153608,"byte_end":153613,"line_start":2587,"line_end":2587,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":153618,"byte_end":153621,"line_start":2588,"line_end":2588,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":153626,"byte_end":153633,"line_start":2589,"line_end":2589,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":975},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":154868,"byte_end":154879,"line_start":2625,"line_end":2625,"column_start":12,"column_end":23},"name":"replace_key","qualname":"<OccupiedEntry>::replace_key","value":"pub fn replace_key(Self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Replaces the key in the hash map with the key used to create this entry.","sig":null,"attributes":[{"value":"/ Replaces the key in the hash map with the key used to create this entry.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":153957,"byte_end":154033,"line_start":2600,"line_end":2600,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":154038,"byte_end":154041,"line_start":2601,"line_end":2601,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":154046,"byte_end":154060,"line_start":2602,"line_end":2602,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":154065,"byte_end":154068,"line_start":2603,"line_end":2603,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":154073,"byte_end":154080,"line_start":2604,"line_end":2604,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::hash_map::{Entry, HashMap};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":154085,"byte_end":154131,"line_start":2605,"line_end":2605,"column_start":5,"column_end":51}},{"value":"/ use std::rc::Rc;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":154136,"byte_end":154156,"line_start":2606,"line_end":2606,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":154161,"byte_end":154164,"line_start":2607,"line_end":2607,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<Rc<String>, u32> = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":154169,"byte_end":154228,"line_start":2608,"line_end":2608,"column_start":5,"column_end":64}},{"value":"/ let mut known_strings: Vec<Rc<String>> = Vec::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":154233,"byte_end":154289,"line_start":2609,"line_end":2609,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":154294,"byte_end":154297,"line_start":2610,"line_end":2610,"column_start":5,"column_end":8}},{"value":"/ // Initialise known strings, run program, etc.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":154302,"byte_end":154352,"line_start":2611,"line_end":2611,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":154357,"byte_end":154360,"line_start":2612,"line_end":2612,"column_start":5,"column_end":8}},{"value":"/ reclaim_memory(&mut map, &known_strings);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":154365,"byte_end":154410,"line_start":2613,"line_end":2613,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":154415,"byte_end":154418,"line_start":2614,"line_end":2614,"column_start":5,"column_end":8}},{"value":"/ fn reclaim_memory(map: &mut HashMap<Rc<String>, u32>, known_strings: &[Rc<String>] ) {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":154423,"byte_end":154513,"line_start":2615,"line_end":2615,"column_start":5,"column_end":95}},{"value":"/     for s in known_strings {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":154518,"byte_end":154550,"line_start":2616,"line_end":2616,"column_start":5,"column_end":37}},{"value":"/         if let Entry::Occupied(entry) = map.entry(s.clone()) {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":154555,"byte_end":154621,"line_start":2617,"line_end":2617,"column_start":5,"column_end":71}},{"value":"/             // Replaces the entry's key with our version of it in `known_strings`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":154626,"byte_end":154712,"line_start":2618,"line_end":2618,"column_start":5,"column_end":91}},{"value":"/             entry.replace_key();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":154717,"byte_end":154753,"line_start":2619,"line_end":2619,"column_start":5,"column_end":41}},{"value":"/         }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":154758,"byte_end":154771,"line_start":2620,"line_end":2620,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":154776,"byte_end":154785,"line_start":2621,"line_end":2621,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":154790,"byte_end":154795,"line_start":2622,"line_end":2622,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":154800,"byte_end":154807,"line_start":2623,"line_end":2623,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":981},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155446,"byte_end":155449,"line_start":2644,"line_end":2644,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key that would be used when inserting a value\n through the `VacantEntry`.","sig":null,"attributes":[{"value":"/ Gets a reference to the key that would be used when inserting a value","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155056,"byte_end":155129,"line_start":2632,"line_end":2632,"column_start":5,"column_end":78}},{"value":"/ through the `VacantEntry`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155134,"byte_end":155164,"line_start":2633,"line_end":2633,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155169,"byte_end":155172,"line_start":2634,"line_end":2634,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155177,"byte_end":155191,"line_start":2635,"line_end":2635,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155196,"byte_end":155199,"line_start":2636,"line_end":2636,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155204,"byte_end":155211,"line_start":2637,"line_end":2637,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155216,"byte_end":155243,"line_start":2638,"line_end":2638,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155248,"byte_end":155251,"line_start":2639,"line_end":2639,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155256,"byte_end":155309,"line_start":2640,"line_end":2640,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155314,"byte_end":155373,"line_start":2641,"line_end":2641,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155378,"byte_end":155385,"line_start":2642,"line_end":2642,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":982},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155885,"byte_end":155893,"line_start":2663,"line_end":2663,"column_start":12,"column_end":20},"name":"into_key","qualname":"<VacantEntry>::into_key","value":"pub fn into_key(Self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Take ownership of the key.","sig":null,"attributes":[{"value":"/ Take ownership of the key.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155494,"byte_end":155524,"line_start":2648,"line_end":2648,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155529,"byte_end":155532,"line_start":2649,"line_end":2649,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155537,"byte_end":155551,"line_start":2650,"line_end":2650,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155556,"byte_end":155559,"line_start":2651,"line_end":2651,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155564,"byte_end":155571,"line_start":2652,"line_end":2652,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155576,"byte_end":155603,"line_start":2653,"line_end":2653,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155608,"byte_end":155643,"line_start":2654,"line_end":2654,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155648,"byte_end":155651,"line_start":2655,"line_end":2655,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155656,"byte_end":155709,"line_start":2656,"line_end":2656,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155714,"byte_end":155717,"line_start":2657,"line_end":2657,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Vacant(v) = map.entry(\"poneyland\") {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155722,"byte_end":155776,"line_start":2658,"line_end":2658,"column_start":5,"column_end":59}},{"value":"/     v.into_key();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155781,"byte_end":155802,"line_start":2659,"line_end":2659,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155807,"byte_end":155812,"line_start":2660,"line_end":2660,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155817,"byte_end":155824,"line_start":2661,"line_end":2661,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":983},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":156444,"byte_end":156450,"line_start":2684,"line_end":2684,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry>::insert","value":"pub fn insert(Self, V) -> &'a mut V where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155935,"byte_end":155994,"line_start":2667,"line_end":2667,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155999,"byte_end":156041,"line_start":2668,"line_end":2668,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":156046,"byte_end":156049,"line_start":2669,"line_end":2669,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":156054,"byte_end":156068,"line_start":2670,"line_end":2670,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":156073,"byte_end":156076,"line_start":2671,"line_end":2671,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":156081,"byte_end":156088,"line_start":2672,"line_end":2672,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":156093,"byte_end":156120,"line_start":2673,"line_end":2673,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":156125,"byte_end":156160,"line_start":2674,"line_end":2674,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":156165,"byte_end":156168,"line_start":2675,"line_end":2675,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":156173,"byte_end":156226,"line_start":2676,"line_end":2676,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":156231,"byte_end":156234,"line_start":2677,"line_end":2677,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Vacant(o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":156239,"byte_end":156293,"line_start":2678,"line_end":2678,"column_start":5,"column_end":59}},{"value":"/     o.insert(37);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":156298,"byte_end":156319,"line_start":2679,"line_end":2679,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":156324,"byte_end":156329,"line_start":2680,"line_end":2680,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[\"poneyland\"], 37);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":156334,"byte_end":156371,"line_start":2681,"line_end":2681,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":156376,"byte_end":156383,"line_start":2682,"line_end":2682,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1132},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":198469,"byte_end":198476,"line_start":116,"line_end":116,"column_start":12,"column_end":19},"name":"HashSet","qualname":"::set::HashSet","value":"HashSet {  }","parent":null,"children":[{"krate":0,"index":1135}],"decl_id":null,"docs":" A hash set implemented as a `HashMap` where the value is `()`.","sig":null,"attributes":[{"value":"/ A hash set implemented as a `HashMap` where the value is `()`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":195075,"byte_end":195141,"line_start":19,"line_end":19,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":195142,"byte_end":195145,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ As with the [`HashMap`] type, a `HashSet` requires that the elements","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":195146,"byte_end":195218,"line_start":21,"line_end":21,"column_start":1,"column_end":73}},{"value":"/ implement the [`Eq`] and [`Hash`] traits. This can frequently be achieved by","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":195219,"byte_end":195299,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/ using `#[derive(PartialEq, Eq, Hash)]`. If you implement these yourself,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":195300,"byte_end":195376,"line_start":23,"line_end":23,"column_start":1,"column_end":77}},{"value":"/ it is important that the following property holds:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":195377,"byte_end":195431,"line_start":24,"line_end":24,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":195432,"byte_end":195435,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":195436,"byte_end":195447,"line_start":26,"line_end":26,"column_start":1,"column_end":12}},{"value":"/ k1 == k2 -> hash(k1) == hash(k2)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":195448,"byte_end":195484,"line_start":27,"line_end":27,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":195485,"byte_end":195492,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":195493,"byte_end":195496,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ In other words, if two keys are equal, their hashes must be equal.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":195497,"byte_end":195567,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":195568,"byte_end":195571,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":195572,"byte_end":195575,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for an item to be modified in such a way that the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":195576,"byte_end":195649,"line_start":33,"line_end":33,"column_start":1,"column_end":74}},{"value":"/ item's hash, as determined by the [`Hash`] trait, or its equality, as","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":195650,"byte_end":195723,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"/ determined by the [`Eq`] trait, changes while it is in the set. This is","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":195724,"byte_end":195799,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/ normally only possible through [`Cell`], [`RefCell`], global state, I/O, or","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":195800,"byte_end":195879,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/ unsafe code.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":195880,"byte_end":195896,"line_start":37,"line_end":37,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":195897,"byte_end":195900,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ It is also a logic error for the [`Hash`] implementation of a key to panic.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":195901,"byte_end":195980,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/ This is generally only possible if the trait is implemented manually. If a","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":195981,"byte_end":196059,"line_start":40,"line_end":40,"column_start":1,"column_end":79}},{"value":"/ panic does occur then the contents of the `HashSet` may become corrupted and","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196060,"byte_end":196140,"line_start":41,"line_end":41,"column_start":1,"column_end":81}},{"value":"/ some items may be dropped from the table.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196141,"byte_end":196186,"line_start":42,"line_end":42,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196187,"byte_end":196190,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196191,"byte_end":196205,"line_start":44,"line_end":44,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196206,"byte_end":196209,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196210,"byte_end":196217,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196218,"byte_end":196245,"line_start":47,"line_end":47,"column_start":1,"column_end":28}},{"value":"/ // Type inference lets us omit an explicit type signature (which","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196246,"byte_end":196314,"line_start":48,"line_end":48,"column_start":1,"column_end":69}},{"value":"/ // would be `HashSet<String>` in this example).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196315,"byte_end":196366,"line_start":49,"line_end":49,"column_start":1,"column_end":52}},{"value":"/ let mut books = HashSet::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196367,"byte_end":196402,"line_start":50,"line_end":50,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196403,"byte_end":196406,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ // Add some books.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196407,"byte_end":196429,"line_start":52,"line_end":52,"column_start":1,"column_end":23}},{"value":"/ books.insert(\"A Dance With Dragons\".to_string());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196430,"byte_end":196483,"line_start":53,"line_end":53,"column_start":1,"column_end":54}},{"value":"/ books.insert(\"To Kill a Mockingbird\".to_string());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196484,"byte_end":196538,"line_start":54,"line_end":54,"column_start":1,"column_end":55}},{"value":"/ books.insert(\"The Odyssey\".to_string());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196539,"byte_end":196583,"line_start":55,"line_end":55,"column_start":1,"column_end":45}},{"value":"/ books.insert(\"The Great Gatsby\".to_string());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196584,"byte_end":196633,"line_start":56,"line_end":56,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196634,"byte_end":196637,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ // Check for a specific one.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196638,"byte_end":196670,"line_start":58,"line_end":58,"column_start":1,"column_end":33}},{"value":"/ if !books.contains(\"The Winds of Winter\") {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196671,"byte_end":196718,"line_start":59,"line_end":59,"column_start":1,"column_end":48}},{"value":"/     println!(\"We have {} books, but The Winds of Winter ain't one.\",","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196719,"byte_end":196791,"line_start":60,"line_end":60,"column_start":1,"column_end":73}},{"value":"/              books.len());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196792,"byte_end":196822,"line_start":61,"line_end":61,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196823,"byte_end":196828,"line_start":62,"line_end":62,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196829,"byte_end":196832,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ // Remove a book.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196833,"byte_end":196854,"line_start":64,"line_end":64,"column_start":1,"column_end":22}},{"value":"/ books.remove(\"The Odyssey\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196855,"byte_end":196887,"line_start":65,"line_end":65,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196888,"byte_end":196891,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ // Iterate over everything.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196892,"byte_end":196923,"line_start":67,"line_end":67,"column_start":1,"column_end":32}},{"value":"/ for book in &books {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196924,"byte_end":196948,"line_start":68,"line_end":68,"column_start":1,"column_end":25}},{"value":"/     println!(\"{}\", book);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196949,"byte_end":196978,"line_start":69,"line_end":69,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196979,"byte_end":196984,"line_start":70,"line_end":70,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196985,"byte_end":196992,"line_start":71,"line_end":71,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196993,"byte_end":196996,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ The easiest way to use `HashSet` with a custom type is to derive","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":196997,"byte_end":197065,"line_start":73,"line_end":73,"column_start":1,"column_end":69}},{"value":"/ [`Eq`] and [`Hash`]. We must also derive [`PartialEq`], this will in the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197066,"byte_end":197142,"line_start":74,"line_end":74,"column_start":1,"column_end":77}},{"value":"/ future be implied by [`Eq`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197143,"byte_end":197175,"line_start":75,"line_end":75,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197176,"byte_end":197179,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197180,"byte_end":197187,"line_start":77,"line_end":77,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197188,"byte_end":197215,"line_start":78,"line_end":78,"column_start":1,"column_end":28}},{"value":"/ #[derive(Hash, Eq, PartialEq, Debug)]","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197216,"byte_end":197257,"line_start":79,"line_end":79,"column_start":1,"column_end":42}},{"value":"/ struct Viking {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197258,"byte_end":197277,"line_start":80,"line_end":80,"column_start":1,"column_end":20}},{"value":"/     name: String,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197278,"byte_end":197299,"line_start":81,"line_end":81,"column_start":1,"column_end":22}},{"value":"/     power: usize,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197300,"byte_end":197321,"line_start":82,"line_end":82,"column_start":1,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197322,"byte_end":197327,"line_start":83,"line_end":83,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197328,"byte_end":197331,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ let mut vikings = HashSet::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197332,"byte_end":197369,"line_start":85,"line_end":85,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197370,"byte_end":197373,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ vikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197374,"byte_end":197441,"line_start":87,"line_end":87,"column_start":1,"column_end":68}},{"value":"/ vikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197442,"byte_end":197509,"line_start":88,"line_end":88,"column_start":1,"column_end":68}},{"value":"/ vikings.insert(Viking { name: \"Olaf\".to_string(), power: 4 });","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197510,"byte_end":197576,"line_start":89,"line_end":89,"column_start":1,"column_end":67}},{"value":"/ vikings.insert(Viking { name: \"Harald\".to_string(), power: 8 });","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197577,"byte_end":197645,"line_start":90,"line_end":90,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197646,"byte_end":197649,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ // Use derived implementation to print the vikings.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197650,"byte_end":197705,"line_start":92,"line_end":92,"column_start":1,"column_end":56}},{"value":"/ for x in &vikings {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197706,"byte_end":197729,"line_start":93,"line_end":93,"column_start":1,"column_end":24}},{"value":"/     println!(\"{:?}\", x);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197730,"byte_end":197758,"line_start":94,"line_end":94,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197759,"byte_end":197764,"line_start":95,"line_end":95,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197765,"byte_end":197772,"line_start":96,"line_end":96,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197773,"byte_end":197776,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ A `HashSet` with fixed list of elements can be initialized from an array:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197777,"byte_end":197854,"line_start":98,"line_end":98,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197855,"byte_end":197858,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197859,"byte_end":197866,"line_start":100,"line_end":100,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197867,"byte_end":197894,"line_start":101,"line_end":101,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197895,"byte_end":197898,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197899,"byte_end":197914,"line_start":103,"line_end":103,"column_start":1,"column_end":16}},{"value":"/ let viking_names: HashSet<&'static str> =","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197915,"byte_end":197960,"line_start":104,"line_end":104,"column_start":1,"column_end":46}},{"value":"/     [ \"Einar\", \"Olaf\", \"Harald\" ].iter().cloned().collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":197961,"byte_end":198025,"line_start":105,"line_end":105,"column_start":1,"column_end":65}},{"value":"/ // use the values stored in the set","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":198026,"byte_end":198065,"line_start":106,"line_end":106,"column_start":1,"column_end":40}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":198066,"byte_end":198071,"line_start":107,"line_end":107,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":198072,"byte_end":198079,"line_start":108,"line_end":108,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":198080,"byte_end":198083,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ [`Cell`]: https://doc.rust-lang.org/std/cell/struct.Cell.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":198084,"byte_end":198149,"line_start":110,"line_end":110,"column_start":1,"column_end":66}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":198150,"byte_end":198209,"line_start":111,"line_end":111,"column_start":1,"column_end":60}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":198210,"byte_end":198274,"line_start":112,"line_end":112,"column_start":1,"column_end":65}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":198275,"byte_end":198311,"line_start":113,"line_end":113,"column_start":1,"column_end":37}},{"value":"/ [`PartialEq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":198312,"byte_end":198385,"line_start":114,"line_end":114,"column_start":1,"column_end":74}},{"value":"/ [`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":198386,"byte_end":198457,"line_start":115,"line_end":115,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1144},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200285,"byte_end":200293,"line_start":183,"line_end":183,"column_start":12,"column_end":20},"name":"capacity","qualname":"<HashSet<T, S>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the set can hold without reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the set can hold without reallocating.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":199959,"byte_end":200032,"line_start":173,"line_end":173,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200037,"byte_end":200040,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200045,"byte_end":200059,"line_start":175,"line_end":175,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200064,"byte_end":200067,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200072,"byte_end":200079,"line_start":177,"line_end":177,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200084,"byte_end":200111,"line_start":178,"line_end":178,"column_start":5,"column_end":32}},{"value":"/ let set: HashSet<i32> = HashSet::with_capacity(100);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200116,"byte_end":200172,"line_start":179,"line_end":179,"column_start":5,"column_end":61}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200177,"byte_end":200212,"line_start":180,"line_end":180,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200217,"byte_end":200224,"line_start":181,"line_end":181,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1145},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200818,"byte_end":200822,"line_start":204,"line_end":204,"column_start":12,"column_end":16},"name":"iter","qualname":"<HashSet<T, S>>::iter","value":"pub fn iter(&Self) -> Iter<, T>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all elements in arbitrary order.\n The iterator element type is `&'a T`.","sig":null,"attributes":[{"value":"/ An iterator visiting all elements in arbitrary order.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200351,"byte_end":200408,"line_start":187,"line_end":187,"column_start":5,"column_end":62}},{"value":"/ The iterator element type is `&'a T`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200413,"byte_end":200454,"line_start":188,"line_end":188,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200459,"byte_end":200462,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200467,"byte_end":200481,"line_start":190,"line_end":190,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200486,"byte_end":200489,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200494,"byte_end":200501,"line_start":192,"line_end":192,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200506,"byte_end":200533,"line_start":193,"line_end":193,"column_start":5,"column_end":32}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200538,"byte_end":200571,"line_start":194,"line_end":194,"column_start":5,"column_end":38}},{"value":"/ set.insert(\"a\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200576,"byte_end":200596,"line_start":195,"line_end":195,"column_start":5,"column_end":25}},{"value":"/ set.insert(\"b\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200601,"byte_end":200621,"line_start":196,"line_end":196,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200626,"byte_end":200629,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ // Will print in an arbitrary order.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200634,"byte_end":200674,"line_start":198,"line_end":198,"column_start":5,"column_end":45}},{"value":"/ for x in set.iter() {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200679,"byte_end":200704,"line_start":199,"line_end":199,"column_start":5,"column_end":30}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200709,"byte_end":200735,"line_start":200,"line_end":200,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200740,"byte_end":200745,"line_start":201,"line_end":201,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200750,"byte_end":200757,"line_start":202,"line_end":202,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1146},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201245,"byte_end":201248,"line_start":223,"line_end":223,"column_start":12,"column_end":15},"name":"len","qualname":"<HashSet<T, S>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the set.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the set.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200918,"byte_end":200964,"line_start":210,"line_end":210,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200969,"byte_end":200972,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200977,"byte_end":200991,"line_start":212,"line_end":212,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":200996,"byte_end":200999,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201004,"byte_end":201011,"line_start":214,"line_end":214,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201016,"byte_end":201043,"line_start":215,"line_end":215,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201048,"byte_end":201051,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201056,"byte_end":201087,"line_start":217,"line_end":217,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(v.len(), 0);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201092,"byte_end":201119,"line_start":218,"line_end":218,"column_start":5,"column_end":32}},{"value":"/ v.insert(1);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201124,"byte_end":201140,"line_start":219,"line_end":219,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(v.len(), 1);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201145,"byte_end":201172,"line_start":220,"line_end":220,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201177,"byte_end":201184,"line_start":221,"line_end":221,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1147},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201632,"byte_end":201640,"line_start":240,"line_end":240,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<HashSet<T, S>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains no elements.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains no elements.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201301,"byte_end":201352,"line_start":227,"line_end":227,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201357,"byte_end":201360,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201365,"byte_end":201379,"line_start":229,"line_end":229,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201384,"byte_end":201387,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201392,"byte_end":201399,"line_start":231,"line_end":231,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201404,"byte_end":201431,"line_start":232,"line_end":232,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201436,"byte_end":201439,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201444,"byte_end":201475,"line_start":234,"line_end":234,"column_start":5,"column_end":36}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201480,"byte_end":201506,"line_start":235,"line_end":235,"column_start":5,"column_end":31}},{"value":"/ v.insert(1);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201511,"byte_end":201527,"line_start":236,"line_end":236,"column_start":5,"column_end":21}},{"value":"/ assert!(!v.is_empty());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201532,"byte_end":201559,"line_start":237,"line_end":237,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201564,"byte_end":201571,"line_start":238,"line_end":238,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1148},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":202188,"byte_end":202193,"line_start":262,"line_end":262,"column_start":12,"column_end":17},"name":"drain","qualname":"<HashSet<T, S>>::drain","value":"pub fn drain(&mut Self) -> Drain<, T>","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, returning all elements in an iterator.","sig":null,"attributes":[{"value":"/ Clears the set, returning all elements in an iterator.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201697,"byte_end":201755,"line_start":244,"line_end":244,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201760,"byte_end":201763,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201768,"byte_end":201782,"line_start":246,"line_end":246,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201787,"byte_end":201790,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201795,"byte_end":201802,"line_start":248,"line_end":248,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201807,"byte_end":201834,"line_start":249,"line_end":249,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201839,"byte_end":201842,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201847,"byte_end":201913,"line_start":251,"line_end":251,"column_start":5,"column_end":71}},{"value":"/ assert!(!set.is_empty());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201918,"byte_end":201947,"line_start":252,"line_end":252,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201952,"byte_end":201955,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ // print 1, 2, 3 in an arbitrary order","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":201960,"byte_end":202002,"line_start":254,"line_end":254,"column_start":5,"column_end":47}},{"value":"/ for i in set.drain() {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":202007,"byte_end":202033,"line_start":255,"line_end":255,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", i);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":202038,"byte_end":202064,"line_start":256,"line_end":256,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":202069,"byte_end":202074,"line_start":257,"line_end":257,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":202079,"byte_end":202082,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ assert!(set.is_empty());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":202087,"byte_end":202115,"line_start":259,"line_end":259,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":202120,"byte_end":202127,"line_start":260,"line_end":260,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1149},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":202724,"byte_end":202730,"line_start":282,"line_end":282,"column_start":12,"column_end":18},"name":"retain","qualname":"<HashSet<T, S>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the elements specified by the predicate.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":202296,"byte_end":202353,"line_start":268,"line_end":268,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":202358,"byte_end":202361,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ In other words, remove all elements `e` such that `f(&e)` returns `false`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":202366,"byte_end":202444,"line_start":270,"line_end":270,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":202449,"byte_end":202452,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":202457,"byte_end":202471,"line_start":272,"line_end":272,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":202476,"byte_end":202479,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":202484,"byte_end":202491,"line_start":274,"line_end":274,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":202496,"byte_end":202523,"line_start":275,"line_end":275,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":202528,"byte_end":202531,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ let xs = [1,2,3,4,5,6];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":202536,"byte_end":202563,"line_start":277,"line_end":277,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = xs.iter().cloned().collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":202568,"byte_end":202629,"line_start":278,"line_end":278,"column_start":5,"column_end":66}},{"value":"/ set.retain(|&k| k % 2 == 0);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":202634,"byte_end":202666,"line_start":279,"line_end":279,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":202671,"byte_end":202700,"line_start":280,"line_end":280,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":202705,"byte_end":202712,"line_start":281,"line_end":281,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1152},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":203576,"byte_end":203588,"line_start":309,"line_end":309,"column_start":12,"column_end":24},"name":"drain_filter","qualname":"<HashSet<T, S>>::drain_filter","value":"pub fn drain_filter<F>(&mut Self, F) -> DrainFilter<, T, F> where F: FnMut(&T)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Drains elements which are false under the given predicate,\n and returns an iterator over the removed items.","sig":null,"attributes":[{"value":"/ Drains elements which are false under the given predicate,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":202850,"byte_end":202912,"line_start":289,"line_end":289,"column_start":5,"column_end":67}},{"value":"/ and returns an iterator over the removed items.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":202917,"byte_end":202968,"line_start":290,"line_end":290,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":202973,"byte_end":202976,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ In other words, move all elements `e` such that `f(&e)` returns `false` out","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":202981,"byte_end":203060,"line_start":292,"line_end":292,"column_start":5,"column_end":84}},{"value":"/ into another iterator.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":203065,"byte_end":203091,"line_start":293,"line_end":293,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":203096,"byte_end":203099,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ When the returned DrainedFilter is dropped, the elements that don't satisfy","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":203104,"byte_end":203183,"line_start":295,"line_end":295,"column_start":5,"column_end":84}},{"value":"/ the predicate are dropped from the set.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":203188,"byte_end":203231,"line_start":296,"line_end":296,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":203236,"byte_end":203239,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":203244,"byte_end":203258,"line_start":298,"line_end":298,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":203263,"byte_end":203266,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":203271,"byte_end":203278,"line_start":300,"line_end":300,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":203283,"byte_end":203310,"line_start":301,"line_end":301,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":203315,"byte_end":203318,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<i32> = (0..8).collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":203323,"byte_end":203372,"line_start":303,"line_end":303,"column_start":5,"column_end":54}},{"value":"/ let drained = set.drain_filter(|&k| k % 2 == 0);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":203377,"byte_end":203429,"line_start":304,"line_end":304,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(drained.count(), 4);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":203434,"byte_end":203469,"line_start":305,"line_end":305,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(set.len(), 4);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":203474,"byte_end":203503,"line_start":306,"line_end":306,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":203508,"byte_end":203515,"line_start":307,"line_end":307,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1154},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":204198,"byte_end":204203,"line_start":335,"line_end":335,"column_start":12,"column_end":17},"name":"clear","qualname":"<HashSet<T, S>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, removing all values.","sig":null,"attributes":[{"value":"/ Clears the set, removing all values.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":203891,"byte_end":203931,"line_start":322,"line_end":322,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":203936,"byte_end":203939,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":203944,"byte_end":203958,"line_start":324,"line_end":324,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":203963,"byte_end":203966,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":203971,"byte_end":203978,"line_start":326,"line_end":326,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":203983,"byte_end":204010,"line_start":327,"line_end":327,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":204015,"byte_end":204018,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":204023,"byte_end":204054,"line_start":329,"line_end":329,"column_start":5,"column_end":36}},{"value":"/ v.insert(1);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":204059,"byte_end":204075,"line_start":330,"line_end":330,"column_start":5,"column_end":21}},{"value":"/ v.clear();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":204080,"byte_end":204094,"line_start":331,"line_end":331,"column_start":5,"column_end":19}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":204099,"byte_end":204125,"line_start":332,"line_end":332,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":204130,"byte_end":204137,"line_start":333,"line_end":333,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1158},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":205338,"byte_end":205349,"line_start":372,"line_end":372,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<HashSet<T, S>>::with_hasher","value":"pub fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty hash set which will use the given hasher to hash\n keys.","sig":null,"attributes":[{"value":"/ Creates a new empty hash set which will use the given hasher to hash","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":204326,"byte_end":204398,"line_start":345,"line_end":345,"column_start":5,"column_end":77}},{"value":"/ keys.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":204403,"byte_end":204412,"line_start":346,"line_end":346,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":204417,"byte_end":204420,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ The hash set is also created with the default initial capacity.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":204425,"byte_end":204492,"line_start":348,"line_end":348,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":204497,"byte_end":204500,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ Warning: `hasher` is normally randomly generated, and","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":204505,"byte_end":204562,"line_start":350,"line_end":350,"column_start":5,"column_end":62}},{"value":"/ is designed to allow `HashSet`s to be resistant to attacks that","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":204567,"byte_end":204634,"line_start":351,"line_end":351,"column_start":5,"column_end":72}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":204639,"byte_end":204702,"line_start":352,"line_end":352,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":204707,"byte_end":204771,"line_start":353,"line_end":353,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":204776,"byte_end":204779,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ The `hash_builder` passed should implement the [`BuildHasher`] trait for","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":204784,"byte_end":204860,"line_start":355,"line_end":355,"column_start":5,"column_end":81}},{"value":"/ the HashMap to be useful, see its documentation for details.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":204865,"byte_end":204929,"line_start":356,"line_end":356,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":204934,"byte_end":204937,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":204942,"byte_end":204945,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":204950,"byte_end":204964,"line_start":359,"line_end":359,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":204969,"byte_end":204972,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":204977,"byte_end":204984,"line_start":361,"line_end":361,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":204989,"byte_end":205016,"line_start":362,"line_end":362,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":205021,"byte_end":205069,"line_start":363,"line_end":363,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":205074,"byte_end":205077,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":205082,"byte_end":205124,"line_start":365,"line_end":365,"column_start":5,"column_end":47}},{"value":"/ let mut set = HashSet::with_hasher(s);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":205129,"byte_end":205171,"line_start":366,"line_end":366,"column_start":5,"column_end":47}},{"value":"/ set.insert(2);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":205176,"byte_end":205194,"line_start":367,"line_end":367,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":205199,"byte_end":205206,"line_start":368,"line_end":368,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":205211,"byte_end":205214,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":205219,"byte_end":205277,"line_start":370,"line_end":370,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1159},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":206570,"byte_end":206594,"line_start":405,"line_end":405,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<HashSet<T, S>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet` with the specified capacity, using\n `hasher` to hash the keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashSet` with the specified capacity, using","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":205454,"byte_end":205519,"line_start":378,"line_end":378,"column_start":5,"column_end":70}},{"value":"/ `hasher` to hash the keys.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":205524,"byte_end":205554,"line_start":379,"line_end":379,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":205559,"byte_end":205562,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ The hash set will be able to hold at least `capacity` elements without","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":205567,"byte_end":205641,"line_start":381,"line_end":381,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash set will not allocate.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":205646,"byte_end":205715,"line_start":382,"line_end":382,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":205720,"byte_end":205723,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ Warning: `hasher` is normally randomly generated, and","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":205728,"byte_end":205785,"line_start":384,"line_end":384,"column_start":5,"column_end":62}},{"value":"/ is designed to allow `HashSet`s to be resistant to attacks that","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":205790,"byte_end":205857,"line_start":385,"line_end":385,"column_start":5,"column_end":72}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":205862,"byte_end":205925,"line_start":386,"line_end":386,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":205930,"byte_end":205994,"line_start":387,"line_end":387,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":205999,"byte_end":206002,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ The `hash_builder` passed should implement the [`BuildHasher`] trait for","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":206007,"byte_end":206083,"line_start":389,"line_end":389,"column_start":5,"column_end":81}},{"value":"/ the HashMap to be useful, see its documentation for details.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":206088,"byte_end":206152,"line_start":390,"line_end":390,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":206157,"byte_end":206160,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":206165,"byte_end":206179,"line_start":392,"line_end":392,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":206184,"byte_end":206187,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":206192,"byte_end":206199,"line_start":394,"line_end":394,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":206204,"byte_end":206231,"line_start":395,"line_end":395,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":206236,"byte_end":206284,"line_start":396,"line_end":396,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":206289,"byte_end":206292,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":206297,"byte_end":206339,"line_start":398,"line_end":398,"column_start":5,"column_end":47}},{"value":"/ let mut set = HashSet::with_capacity_and_hasher(10, s);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":206344,"byte_end":206403,"line_start":399,"line_end":399,"column_start":5,"column_end":64}},{"value":"/ set.insert(1);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":206408,"byte_end":206426,"line_start":400,"line_end":400,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":206431,"byte_end":206438,"line_start":401,"line_end":401,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":206443,"byte_end":206446,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":206451,"byte_end":206509,"line_start":403,"line_end":403,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1160},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":207266,"byte_end":207272,"line_start":426,"line_end":426,"column_start":12,"column_end":18},"name":"hasher","qualname":"<HashSet<T, S>>::hasher","value":"pub fn hasher(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the set's [`BuildHasher`].","sig":null,"attributes":[{"value":"/ Returns a reference to the set's [`BuildHasher`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":206739,"byte_end":206792,"line_start":411,"line_end":411,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":206797,"byte_end":206800,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":206805,"byte_end":206883,"line_start":413,"line_end":413,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":206888,"byte_end":206891,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":206896,"byte_end":206910,"line_start":415,"line_end":415,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":206915,"byte_end":206918,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":206923,"byte_end":206930,"line_start":417,"line_end":417,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":206935,"byte_end":206962,"line_start":418,"line_end":418,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":206967,"byte_end":207015,"line_start":419,"line_end":419,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":207020,"byte_end":207023,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ let hasher = DefaultHashBuilder::default();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":207028,"byte_end":207075,"line_start":421,"line_end":421,"column_start":5,"column_end":52}},{"value":"/ let set: HashSet<i32> = HashSet::with_hasher(hasher);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":207080,"byte_end":207137,"line_start":422,"line_end":422,"column_start":5,"column_end":62}},{"value":"/ let hasher: &DefaultHashBuilder = set.hasher();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":207142,"byte_end":207193,"line_start":423,"line_end":423,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":207198,"byte_end":207205,"line_start":424,"line_end":424,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1161},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":207868,"byte_end":207875,"line_start":447,"line_end":447,"column_start":12,"column_end":19},"name":"reserve","qualname":"<HashSet<T, S>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted\n in the `HashSet`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more elements to be inserted","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":207325,"byte_end":207401,"line_start":430,"line_end":430,"column_start":5,"column_end":81}},{"value":"/ in the `HashSet`. The collection may reserve more space to avoid","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":207406,"byte_end":207474,"line_start":431,"line_end":431,"column_start":5,"column_end":73}},{"value":"/ frequent reallocations.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":207479,"byte_end":207506,"line_start":432,"line_end":432,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":207511,"byte_end":207514,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":207519,"byte_end":207531,"line_start":434,"line_end":434,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":207536,"byte_end":207539,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ Panics if the new allocation size overflows `usize`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":207544,"byte_end":207600,"line_start":436,"line_end":436,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":207605,"byte_end":207608,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":207613,"byte_end":207627,"line_start":438,"line_end":438,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":207632,"byte_end":207635,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":207640,"byte_end":207647,"line_start":440,"line_end":440,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":207652,"byte_end":207679,"line_start":441,"line_end":441,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = HashSet::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":207684,"byte_end":207731,"line_start":442,"line_end":442,"column_start":5,"column_end":52}},{"value":"/ set.reserve(10);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":207736,"byte_end":207756,"line_start":443,"line_end":443,"column_start":5,"column_end":25}},{"value":"/ assert!(set.capacity() >= 10);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":207761,"byte_end":207795,"line_start":444,"line_end":444,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":207800,"byte_end":207807,"line_start":445,"line_end":445,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1162},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":208582,"byte_end":208593,"line_start":468,"line_end":468,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<HashSet<T, S>>::try_reserve","value":"pub fn try_reserve(&mut Self, usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserve capacity for at least `additional` more elements to be inserted\n in the given `HashSet<K,V>`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Tries to reserve capacity for at least `additional` more elements to be inserted","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":207956,"byte_end":208040,"line_start":451,"line_end":451,"column_start":5,"column_end":89}},{"value":"/ in the given `HashSet<K,V>`. The collection may reserve more space to avoid","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":208045,"byte_end":208124,"line_start":452,"line_end":452,"column_start":5,"column_end":84}},{"value":"/ frequent reallocations.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":208129,"byte_end":208156,"line_start":453,"line_end":453,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":208161,"byte_end":208164,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":208169,"byte_end":208181,"line_start":455,"line_end":455,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":208186,"byte_end":208189,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":208194,"byte_end":208274,"line_start":457,"line_end":457,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":208279,"byte_end":208295,"line_start":458,"line_end":458,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":208300,"byte_end":208303,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":208308,"byte_end":208322,"line_start":460,"line_end":460,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":208327,"byte_end":208330,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":208335,"byte_end":208342,"line_start":462,"line_end":462,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":208347,"byte_end":208374,"line_start":463,"line_end":463,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = HashSet::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":208379,"byte_end":208426,"line_start":464,"line_end":464,"column_start":5,"column_end":52}},{"value":"/ set.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":208431,"byte_end":208509,"line_start":465,"line_end":465,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":208514,"byte_end":208521,"line_start":466,"line_end":466,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1163},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":209290,"byte_end":209303,"line_start":489,"line_end":489,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<HashSet<T, S>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the set as much as possible. It will drop\n down as much as possible while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the set as much as possible. It will drop","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":208709,"byte_end":208778,"line_start":472,"line_end":472,"column_start":5,"column_end":74}},{"value":"/ down as much as possible while maintaining the internal rules","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":208783,"byte_end":208848,"line_start":473,"line_end":473,"column_start":5,"column_end":70}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":208853,"byte_end":208926,"line_start":474,"line_end":474,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":208931,"byte_end":208934,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":208939,"byte_end":208953,"line_start":476,"line_end":476,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":208958,"byte_end":208961,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":208966,"byte_end":208973,"line_start":478,"line_end":478,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":208978,"byte_end":209005,"line_start":479,"line_end":479,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":209010,"byte_end":209013,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::with_capacity(100);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":209018,"byte_end":209064,"line_start":481,"line_end":481,"column_start":5,"column_end":51}},{"value":"/ set.insert(1);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":209069,"byte_end":209087,"line_start":482,"line_end":482,"column_start":5,"column_end":23}},{"value":"/ set.insert(2);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":209092,"byte_end":209110,"line_start":483,"line_end":483,"column_start":5,"column_end":23}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":209115,"byte_end":209150,"line_start":484,"line_end":484,"column_start":5,"column_end":40}},{"value":"/ set.shrink_to_fit();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":209155,"byte_end":209179,"line_start":485,"line_end":485,"column_start":5,"column_end":29}},{"value":"/ assert!(set.capacity() >= 2);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":209184,"byte_end":209217,"line_start":486,"line_end":486,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":209222,"byte_end":209229,"line_start":487,"line_end":487,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1164},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":210119,"byte_end":210128,"line_start":515,"line_end":515,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<HashSet<T, S>>::shrink_to","value":"pub fn shrink_to(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the set with a lower limit. It will drop\n down no lower than the supplied limit while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the set with a lower limit. It will drop","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":209361,"byte_end":209429,"line_start":493,"line_end":493,"column_start":5,"column_end":73}},{"value":"/ down no lower than the supplied limit while maintaining the internal rules","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":209434,"byte_end":209512,"line_start":494,"line_end":494,"column_start":5,"column_end":83}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":209517,"byte_end":209590,"line_start":495,"line_end":495,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":209595,"byte_end":209598,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ Panics if the current capacity is smaller than the supplied","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":209603,"byte_end":209666,"line_start":497,"line_end":497,"column_start":5,"column_end":68}},{"value":"/ minimum capacity.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":209671,"byte_end":209692,"line_start":498,"line_end":498,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":209697,"byte_end":209700,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":209705,"byte_end":209719,"line_start":500,"line_end":500,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":209724,"byte_end":209727,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":209732,"byte_end":209739,"line_start":502,"line_end":502,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":209744,"byte_end":209771,"line_start":503,"line_end":503,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":209776,"byte_end":209779,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::with_capacity(100);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":209784,"byte_end":209830,"line_start":505,"line_end":505,"column_start":5,"column_end":51}},{"value":"/ set.insert(1);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":209835,"byte_end":209853,"line_start":506,"line_end":506,"column_start":5,"column_end":23}},{"value":"/ set.insert(2);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":209858,"byte_end":209876,"line_start":507,"line_end":507,"column_start":5,"column_end":23}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":209881,"byte_end":209916,"line_start":508,"line_end":508,"column_start":5,"column_end":40}},{"value":"/ set.shrink_to(10);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":209921,"byte_end":209943,"line_start":509,"line_end":509,"column_start":5,"column_end":27}},{"value":"/ assert!(set.capacity() >= 10);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":209948,"byte_end":209982,"line_start":510,"line_end":510,"column_start":5,"column_end":39}},{"value":"/ set.shrink_to(0);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":209987,"byte_end":210008,"line_start":511,"line_end":511,"column_start":5,"column_end":26}},{"value":"/ assert!(set.capacity() >= 2);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":210013,"byte_end":210046,"line_start":512,"line_end":512,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":210051,"byte_end":210058,"line_start":513,"line_end":513,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1165},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":211070,"byte_end":211080,"line_start":543,"line_end":543,"column_start":12,"column_end":22},"name":"difference","qualname":"<HashSet<T, S>>::difference","value":"pub fn difference<'a>(&'a Self, &'a Self) -> Difference","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the difference,\n i.e., the values that are in `self` but not in `other`.","sig":null,"attributes":[{"value":"/ Visits the values representing the difference,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":210215,"byte_end":210265,"line_start":519,"line_end":519,"column_start":5,"column_end":55}},{"value":"/ i.e., the values that are in `self` but not in `other`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":210270,"byte_end":210329,"line_start":520,"line_end":520,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":210334,"byte_end":210337,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":210342,"byte_end":210356,"line_start":522,"line_end":522,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":210361,"byte_end":210364,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":210369,"byte_end":210376,"line_start":524,"line_end":524,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":210381,"byte_end":210408,"line_start":525,"line_end":525,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":210413,"byte_end":210473,"line_start":526,"line_end":526,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":210478,"byte_end":210541,"line_start":527,"line_end":527,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":210546,"byte_end":210549,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ // Can be seen as `a - b`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":210554,"byte_end":210584,"line_start":529,"line_end":529,"column_start":5,"column_end":35}},{"value":"/ for x in a.difference(&b) {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":210589,"byte_end":210620,"line_start":530,"line_end":530,"column_start":5,"column_end":36}},{"value":"/     println!(\"{}\", x); // Print 1","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":210625,"byte_end":210662,"line_start":531,"line_end":531,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":210667,"byte_end":210672,"line_start":532,"line_end":532,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":210677,"byte_end":210680,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ let diff: HashSet<_> = a.difference(&b).collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":210685,"byte_end":210739,"line_start":534,"line_end":534,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(diff, [1].iter().collect());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":210744,"byte_end":210787,"line_start":535,"line_end":535,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":210792,"byte_end":210795,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/ // Note that difference is not symmetric,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":210800,"byte_end":210845,"line_start":537,"line_end":537,"column_start":5,"column_end":50}},{"value":"/ // and `b - a` means something else:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":210850,"byte_end":210890,"line_start":538,"line_end":538,"column_start":5,"column_end":45}},{"value":"/ let diff: HashSet<_> = b.difference(&a).collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":210895,"byte_end":210949,"line_start":539,"line_end":539,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(diff, [4].iter().collect());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":210954,"byte_end":210997,"line_start":540,"line_end":540,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":211002,"byte_end":211009,"line_start":541,"line_end":541,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1167},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":212029,"byte_end":212049,"line_start":572,"line_end":572,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<HashSet<T, S>>::symmetric_difference","value":"pub fn symmetric_difference<'a>(&'a Self, &'a Self) -> SymmetricDifference","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the symmetric difference,\n i.e., the values that are in `self` or in `other` but not in both.","sig":null,"attributes":[{"value":"/ Visits the values representing the symmetric difference,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":211230,"byte_end":211290,"line_start":550,"line_end":550,"column_start":5,"column_end":65}},{"value":"/ i.e., the values that are in `self` or in `other` but not in both.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":211295,"byte_end":211365,"line_start":551,"line_end":551,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":211370,"byte_end":211373,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":211378,"byte_end":211392,"line_start":553,"line_end":553,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":211397,"byte_end":211400,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":211405,"byte_end":211412,"line_start":555,"line_end":555,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":211417,"byte_end":211444,"line_start":556,"line_end":556,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":211449,"byte_end":211509,"line_start":557,"line_end":557,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":211514,"byte_end":211577,"line_start":558,"line_end":558,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":211582,"byte_end":211585,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 4 in arbitrary order.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":211590,"byte_end":211627,"line_start":560,"line_end":560,"column_start":5,"column_end":42}},{"value":"/ for x in a.symmetric_difference(&b) {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":211632,"byte_end":211673,"line_start":561,"line_end":561,"column_start":5,"column_end":46}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":211678,"byte_end":211704,"line_start":562,"line_end":562,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":211709,"byte_end":211714,"line_start":563,"line_end":563,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":211719,"byte_end":211722,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ let diff1: HashSet<_> = a.symmetric_difference(&b).collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":211727,"byte_end":211792,"line_start":565,"line_end":565,"column_start":5,"column_end":70}},{"value":"/ let diff2: HashSet<_> = b.symmetric_difference(&a).collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":211797,"byte_end":211862,"line_start":566,"line_end":566,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":211867,"byte_end":211870,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(diff1, diff2);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":211875,"byte_end":211904,"line_start":568,"line_end":568,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(diff1, [1, 4].iter().collect());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":211909,"byte_end":211956,"line_start":569,"line_end":569,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":211961,"byte_end":211968,"line_start":570,"line_end":570,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1169},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":212903,"byte_end":212915,"line_start":597,"line_end":597,"column_start":12,"column_end":24},"name":"intersection","qualname":"<HashSet<T, S>>::intersection","value":"pub fn intersection<'a>(&'a Self, &'a Self) -> Intersection","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the intersection,\n i.e., the values that are both in `self` and `other`.","sig":null,"attributes":[{"value":"/ Visits the values representing the intersection,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":212239,"byte_end":212291,"line_start":578,"line_end":578,"column_start":5,"column_end":57}},{"value":"/ i.e., the values that are both in `self` and `other`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":212296,"byte_end":212353,"line_start":579,"line_end":579,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":212358,"byte_end":212361,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":212366,"byte_end":212380,"line_start":581,"line_end":581,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":212385,"byte_end":212388,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":212393,"byte_end":212400,"line_start":583,"line_end":583,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":212405,"byte_end":212432,"line_start":584,"line_end":584,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":212437,"byte_end":212497,"line_start":585,"line_end":585,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":212502,"byte_end":212565,"line_start":586,"line_end":586,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":212570,"byte_end":212573,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ // Print 2, 3 in arbitrary order.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":212578,"byte_end":212615,"line_start":588,"line_end":588,"column_start":5,"column_end":42}},{"value":"/ for x in a.intersection(&b) {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":212620,"byte_end":212653,"line_start":589,"line_end":589,"column_start":5,"column_end":38}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":212658,"byte_end":212684,"line_start":590,"line_end":590,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":212689,"byte_end":212694,"line_start":591,"line_end":591,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":212699,"byte_end":212702,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ let intersection: HashSet<_> = a.intersection(&b).collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":212707,"byte_end":212771,"line_start":593,"line_end":593,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(intersection, [2, 3].iter().collect());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":212776,"byte_end":212830,"line_start":594,"line_end":594,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":212835,"byte_end":212842,"line_start":595,"line_end":595,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1171},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":213873,"byte_end":213878,"line_start":628,"line_end":628,"column_start":12,"column_end":17},"name":"union","qualname":"<HashSet<T, S>>::union","value":"pub fn union<'a>(&'a Self, &'a Self) -> Union","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the union,\n i.e., all the values in `self` or `other`, without duplicates.","sig":null,"attributes":[{"value":"/ Visits the values representing the union,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":213223,"byte_end":213268,"line_start":609,"line_end":609,"column_start":5,"column_end":50}},{"value":"/ i.e., all the values in `self` or `other`, without duplicates.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":213273,"byte_end":213339,"line_start":610,"line_end":610,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":213344,"byte_end":213347,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":213352,"byte_end":213366,"line_start":612,"line_end":612,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":213371,"byte_end":213374,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":213379,"byte_end":213386,"line_start":614,"line_end":614,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":213391,"byte_end":213418,"line_start":615,"line_end":615,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":213423,"byte_end":213483,"line_start":616,"line_end":616,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":213488,"byte_end":213551,"line_start":617,"line_end":617,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":213556,"byte_end":213559,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 2, 3, 4 in arbitrary order.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":213564,"byte_end":213607,"line_start":619,"line_end":619,"column_start":5,"column_end":48}},{"value":"/ for x in a.union(&b) {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":213612,"byte_end":213638,"line_start":620,"line_end":620,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":213643,"byte_end":213669,"line_start":621,"line_end":621,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":213674,"byte_end":213679,"line_start":622,"line_end":622,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":213684,"byte_end":213687,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ let union: HashSet<_> = a.union(&b).collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":213692,"byte_end":213742,"line_start":624,"line_end":624,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(union, [1, 2, 3, 4].iter().collect());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":213747,"byte_end":213800,"line_start":625,"line_end":625,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":213805,"byte_end":213812,"line_start":626,"line_end":626,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1173},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":214858,"byte_end":214866,"line_start":658,"line_end":658,"column_start":12,"column_end":20},"name":"contains","qualname":"<HashSet<T, S>>::contains","value":"pub fn contains<Q: ?Sized>(&Self, &Q) -> bool where T: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains a value.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains a value.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":214178,"byte_end":214225,"line_start":639,"line_end":639,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":214230,"byte_end":214233,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":214238,"byte_end":214305,"line_start":641,"line_end":641,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":214310,"byte_end":214377,"line_start":642,"line_end":642,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":214382,"byte_end":214401,"line_start":643,"line_end":643,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":214406,"byte_end":214409,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":214414,"byte_end":214428,"line_start":645,"line_end":645,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":214433,"byte_end":214436,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":214441,"byte_end":214448,"line_start":647,"line_end":647,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":214453,"byte_end":214480,"line_start":648,"line_end":648,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":214485,"byte_end":214488,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":214493,"byte_end":214555,"line_start":650,"line_end":650,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(set.contains(&1), true);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":214560,"byte_end":214599,"line_start":651,"line_end":651,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(set.contains(&4), false);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":214604,"byte_end":214644,"line_start":652,"line_end":652,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":214649,"byte_end":214656,"line_start":653,"line_end":653,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":214661,"byte_end":214664,"line_start":654,"line_end":654,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":214669,"byte_end":214728,"line_start":655,"line_end":655,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":214733,"byte_end":214797,"line_start":656,"line_end":656,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1175},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":215728,"byte_end":215731,"line_start":685,"line_end":685,"column_start":12,"column_end":15},"name":"get","qualname":"<HashSet<T, S>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&T> where T: Borrow<Q>, Q: Hash +\nEq","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value in the set, if any, that is equal to the given value.","sig":null,"attributes":[{"value":"/ Returns a reference to the value in the set, if any, that is equal to the given value.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":215012,"byte_end":215102,"line_start":666,"line_end":666,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":215107,"byte_end":215110,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":215115,"byte_end":215182,"line_start":668,"line_end":668,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":215187,"byte_end":215254,"line_start":669,"line_end":669,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":215259,"byte_end":215278,"line_start":670,"line_end":670,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":215283,"byte_end":215286,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":215291,"byte_end":215305,"line_start":672,"line_end":672,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":215310,"byte_end":215313,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":215318,"byte_end":215325,"line_start":674,"line_end":674,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":215330,"byte_end":215357,"line_start":675,"line_end":675,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":215362,"byte_end":215365,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":215370,"byte_end":215432,"line_start":677,"line_end":677,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(set.get(&2), Some(&2));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":215437,"byte_end":215475,"line_start":678,"line_end":678,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(set.get(&4), None);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":215480,"byte_end":215514,"line_start":679,"line_end":679,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":215519,"byte_end":215526,"line_start":680,"line_end":680,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":215531,"byte_end":215534,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":215539,"byte_end":215598,"line_start":682,"line_end":682,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":215603,"byte_end":215667,"line_start":683,"line_end":683,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1178},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":216437,"byte_end":216450,"line_start":708,"line_end":708,"column_start":12,"column_end":25},"name":"get_or_insert","qualname":"<HashSet<T, S>>::get_or_insert","value":"pub fn get_or_insert(&mut Self, T) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Inserts the given `value` into the set if it is not present, then\n returns a reference to the value in the set.","sig":null,"attributes":[{"value":"/ Inserts the given `value` into the set if it is not present, then","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":215900,"byte_end":215969,"line_start":693,"line_end":693,"column_start":5,"column_end":74}},{"value":"/ returns a reference to the value in the set.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":215974,"byte_end":216022,"line_start":694,"line_end":694,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":216027,"byte_end":216030,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":216035,"byte_end":216049,"line_start":696,"line_end":696,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":216054,"byte_end":216057,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":216062,"byte_end":216069,"line_start":698,"line_end":698,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":216074,"byte_end":216101,"line_start":699,"line_end":699,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":216106,"byte_end":216109,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":216114,"byte_end":216180,"line_start":701,"line_end":701,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":216185,"byte_end":216214,"line_start":702,"line_end":702,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(set.get_or_insert(2), &2);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":216219,"byte_end":216260,"line_start":703,"line_end":703,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(set.get_or_insert(100), &100);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":216265,"byte_end":216310,"line_start":704,"line_end":704,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(set.len(), 4); // 100 was inserted","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":216315,"byte_end":216364,"line_start":705,"line_end":705,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":216369,"byte_end":216376,"line_start":706,"line_end":706,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1179},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":217441,"byte_end":217460,"line_start":737,"line_end":737,"column_start":12,"column_end":31},"name":"get_or_insert_owned","qualname":"<HashSet<T, S>>::get_or_insert_owned","value":"pub fn get_or_insert_owned<Q: ?Sized>(&mut Self, &Q) -> &T where T: Borrow<Q>,\nQ: Hash + Eq + ToOwned<Owned = T>","parent":null,"children":[],"decl_id":null,"docs":" Inserts an owned copy of the given `value` into the set if it is not\n present, then returns a reference to the value in the set.","sig":null,"attributes":[{"value":"/ Inserts an owned copy of the given `value` into the set if it is not","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":216805,"byte_end":216877,"line_start":718,"line_end":718,"column_start":5,"column_end":77}},{"value":"/ present, then returns a reference to the value in the set.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":216882,"byte_end":216944,"line_start":719,"line_end":719,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":216949,"byte_end":216952,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":216957,"byte_end":216971,"line_start":721,"line_end":721,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":216976,"byte_end":216979,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":216984,"byte_end":216991,"line_start":723,"line_end":723,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":216996,"byte_end":217023,"line_start":724,"line_end":724,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":217028,"byte_end":217031,"line_start":725,"line_end":725,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<String> = [\"cat\", \"dog\", \"horse\"]","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":217036,"byte_end":217094,"line_start":726,"line_end":726,"column_start":5,"column_end":63}},{"value":"/     .iter().map(|&pet| pet.to_owned()).collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":217099,"byte_end":217152,"line_start":727,"line_end":727,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":217157,"byte_end":217160,"line_start":728,"line_end":728,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":217165,"byte_end":217194,"line_start":729,"line_end":729,"column_start":5,"column_end":34}},{"value":"/ for &pet in &[\"cat\", \"dog\", \"fish\"] {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":217199,"byte_end":217240,"line_start":730,"line_end":730,"column_start":5,"column_end":46}},{"value":"/     let value = set.get_or_insert_owned(pet);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":217245,"byte_end":217294,"line_start":731,"line_end":731,"column_start":5,"column_end":54}},{"value":"/     assert_eq!(value, pet);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":217299,"byte_end":217330,"line_start":732,"line_end":732,"column_start":5,"column_end":36}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":217335,"byte_end":217340,"line_start":733,"line_end":733,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(set.len(), 4); // a new \"fish\" was inserted","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":217345,"byte_end":217403,"line_start":734,"line_end":734,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":217408,"byte_end":217415,"line_start":735,"line_end":735,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":217420,"byte_end":217429,"line_start":736,"line_end":736,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1182},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":218617,"byte_end":218635,"line_start":770,"line_end":770,"column_start":12,"column_end":30},"name":"get_or_insert_with","qualname":"<HashSet<T, S>>::get_or_insert_with","value":"pub fn get_or_insert_with<Q: ?Sized, F>(&mut Self, &Q, F) -> &T where\nT: Borrow<Q>, Q: Hash + Eq, F: FnOnce(&Q) -> T","parent":null,"children":[],"decl_id":null,"docs":" Inserts a value computed from `f` into the set if the given `value` is\n not present, then returns a reference to the value in the set.","sig":null,"attributes":[{"value":"/ Inserts a value computed from `f` into the set if the given `value` is","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":217926,"byte_end":218000,"line_start":751,"line_end":751,"column_start":5,"column_end":79}},{"value":"/ not present, then returns a reference to the value in the set.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":218005,"byte_end":218071,"line_start":752,"line_end":752,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":218076,"byte_end":218079,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":218084,"byte_end":218098,"line_start":754,"line_end":754,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":218103,"byte_end":218106,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":218111,"byte_end":218118,"line_start":756,"line_end":756,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":218123,"byte_end":218150,"line_start":757,"line_end":757,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":218155,"byte_end":218158,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<String> = [\"cat\", \"dog\", \"horse\"]","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":218163,"byte_end":218221,"line_start":759,"line_end":759,"column_start":5,"column_end":63}},{"value":"/     .iter().map(|&pet| pet.to_owned()).collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":218226,"byte_end":218279,"line_start":760,"line_end":760,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":218284,"byte_end":218287,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":218292,"byte_end":218321,"line_start":762,"line_end":762,"column_start":5,"column_end":34}},{"value":"/ for &pet in &[\"cat\", \"dog\", \"fish\"] {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":218326,"byte_end":218367,"line_start":763,"line_end":763,"column_start":5,"column_end":46}},{"value":"/     let value = set.get_or_insert_with(pet, str::to_owned);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":218372,"byte_end":218435,"line_start":764,"line_end":764,"column_start":5,"column_end":68}},{"value":"/     assert_eq!(value, pet);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":218440,"byte_end":218471,"line_start":765,"line_end":765,"column_start":5,"column_end":36}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":218476,"byte_end":218481,"line_start":766,"line_end":766,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(set.len(), 4); // a new \"fish\" was inserted","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":218486,"byte_end":218544,"line_start":767,"line_end":767,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":218549,"byte_end":218556,"line_start":768,"line_end":768,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1186},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":219641,"byte_end":219652,"line_start":802,"line_end":802,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<HashSet<T, S>>::is_disjoint","value":"pub fn is_disjoint(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`.\n This is equivalent to checking for an empty intersection.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has no elements in common with `other`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":219109,"byte_end":219177,"line_start":785,"line_end":785,"column_start":5,"column_end":73}},{"value":"/ This is equivalent to checking for an empty intersection.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":219182,"byte_end":219243,"line_start":786,"line_end":786,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":219248,"byte_end":219251,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":219256,"byte_end":219270,"line_start":788,"line_end":788,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":219275,"byte_end":219278,"line_start":789,"line_end":789,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":219283,"byte_end":219290,"line_start":790,"line_end":790,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":219295,"byte_end":219322,"line_start":791,"line_end":791,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":219327,"byte_end":219330,"line_start":792,"line_end":792,"column_start":5,"column_end":8}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":219335,"byte_end":219395,"line_start":793,"line_end":793,"column_start":5,"column_end":65}},{"value":"/ let mut b = HashSet::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":219400,"byte_end":219431,"line_start":794,"line_end":794,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":219436,"byte_end":219439,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":219444,"byte_end":219484,"line_start":796,"line_end":796,"column_start":5,"column_end":45}},{"value":"/ b.insert(4);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":219489,"byte_end":219505,"line_start":797,"line_end":797,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":219510,"byte_end":219550,"line_start":798,"line_end":798,"column_start":5,"column_end":45}},{"value":"/ b.insert(1);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":219555,"byte_end":219571,"line_start":799,"line_end":799,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.is_disjoint(&b), false);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":219576,"byte_end":219617,"line_start":800,"line_end":800,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":219622,"byte_end":219629,"line_start":801,"line_end":801,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1188},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":220274,"byte_end":220283,"line_start":823,"line_end":823,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<HashSet<T, S>>::is_subset","value":"pub fn is_subset(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a subset of another,\n i.e., `other` contains at least all the values in `self`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a subset of another,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":219743,"byte_end":219796,"line_start":806,"line_end":806,"column_start":5,"column_end":58}},{"value":"/ i.e., `other` contains at least all the values in `self`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":219801,"byte_end":219862,"line_start":807,"line_end":807,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":219867,"byte_end":219870,"line_start":808,"line_end":808,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":219875,"byte_end":219889,"line_start":809,"line_end":809,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":219894,"byte_end":219897,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":219902,"byte_end":219909,"line_start":811,"line_end":811,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":219914,"byte_end":219941,"line_start":812,"line_end":812,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":219946,"byte_end":219949,"line_start":813,"line_end":813,"column_start":5,"column_end":8}},{"value":"/ let sup: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":219954,"byte_end":220016,"line_start":814,"line_end":814,"column_start":5,"column_end":67}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":220021,"byte_end":220054,"line_start":815,"line_end":815,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":220059,"byte_end":220062,"line_start":816,"line_end":816,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":220067,"byte_end":220109,"line_start":817,"line_end":817,"column_start":5,"column_end":47}},{"value":"/ set.insert(2);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":220114,"byte_end":220132,"line_start":818,"line_end":818,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":220137,"byte_end":220179,"line_start":819,"line_end":819,"column_start":5,"column_end":47}},{"value":"/ set.insert(4);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":220184,"byte_end":220202,"line_start":820,"line_end":820,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_subset(&sup), false);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":220207,"byte_end":220250,"line_start":821,"line_end":821,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":220255,"byte_end":220262,"line_start":822,"line_end":822,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":221027,"byte_end":221038,"line_start":848,"line_end":848,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<HashSet<T, S>>::is_superset","value":"pub fn is_superset(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a superset of another,\n i.e., `self` contains at least all the values in `other`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a superset of another,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":220402,"byte_end":220457,"line_start":827,"line_end":827,"column_start":5,"column_end":60}},{"value":"/ i.e., `self` contains at least all the values in `other`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":220462,"byte_end":220523,"line_start":828,"line_end":828,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":220528,"byte_end":220531,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":220536,"byte_end":220550,"line_start":830,"line_end":830,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":220555,"byte_end":220558,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":220563,"byte_end":220570,"line_start":832,"line_end":832,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":220575,"byte_end":220602,"line_start":833,"line_end":833,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":220607,"byte_end":220610,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ let sub: HashSet<_> = [1, 2].iter().cloned().collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":220615,"byte_end":220674,"line_start":835,"line_end":835,"column_start":5,"column_end":64}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":220679,"byte_end":220712,"line_start":836,"line_end":836,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":220717,"byte_end":220720,"line_start":837,"line_end":837,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":220725,"byte_end":220770,"line_start":838,"line_end":838,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":220775,"byte_end":220778,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ set.insert(0);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":220783,"byte_end":220801,"line_start":840,"line_end":840,"column_start":5,"column_end":23}},{"value":"/ set.insert(1);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":220806,"byte_end":220824,"line_start":841,"line_end":841,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":220829,"byte_end":220874,"line_start":842,"line_end":842,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":220879,"byte_end":220882,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ set.insert(2);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":220887,"byte_end":220905,"line_start":844,"line_end":844,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_superset(&sub), true);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":220910,"byte_end":220954,"line_start":845,"line_end":845,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":220959,"byte_end":220966,"line_start":846,"line_end":846,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1191},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":221619,"byte_end":221625,"line_start":870,"line_end":870,"column_start":12,"column_end":18},"name":"insert","qualname":"<HashSet<T, S>>::insert","value":"pub fn insert(&mut Self, T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set.","sig":null,"attributes":[{"value":"/ Adds a value to the set.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":221111,"byte_end":221139,"line_start":852,"line_end":852,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":221144,"byte_end":221147,"line_start":853,"line_end":853,"column_start":5,"column_end":8}},{"value":"/ If the set did not have this value present, `true` is returned.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":221152,"byte_end":221219,"line_start":854,"line_end":854,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":221224,"byte_end":221227,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ If the set did have this value present, `false` is returned.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":221232,"byte_end":221296,"line_start":856,"line_end":856,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":221301,"byte_end":221304,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":221309,"byte_end":221323,"line_start":858,"line_end":858,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":221328,"byte_end":221331,"line_start":859,"line_end":859,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":221336,"byte_end":221343,"line_start":860,"line_end":860,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":221348,"byte_end":221375,"line_start":861,"line_end":861,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":221380,"byte_end":221383,"line_start":862,"line_end":862,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":221388,"byte_end":221421,"line_start":863,"line_end":863,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":221426,"byte_end":221429,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.insert(2), true);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":221434,"byte_end":221470,"line_start":865,"line_end":865,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(set.insert(2), false);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":221475,"byte_end":221512,"line_start":866,"line_end":866,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(set.len(), 1);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":221517,"byte_end":221546,"line_start":867,"line_end":867,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":221551,"byte_end":221558,"line_start":868,"line_end":868,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1192},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":222260,"byte_end":222267,"line_start":890,"line_end":890,"column_start":12,"column_end":19},"name":"replace","qualname":"<HashSet<T, S>>::replace","value":"pub fn replace(&mut Self, T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set, replacing the existing value, if any, that is equal to the given\n one. Returns the replaced value.","sig":null,"attributes":[{"value":"/ Adds a value to the set, replacing the existing value, if any, that is equal to the given","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":221713,"byte_end":221806,"line_start":874,"line_end":874,"column_start":5,"column_end":98}},{"value":"/ one. Returns the replaced value.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":221811,"byte_end":221847,"line_start":875,"line_end":875,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":221852,"byte_end":221855,"line_start":876,"line_end":876,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":221860,"byte_end":221874,"line_start":877,"line_end":877,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":221879,"byte_end":221882,"line_start":878,"line_end":878,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":221887,"byte_end":221894,"line_start":879,"line_end":879,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":221899,"byte_end":221926,"line_start":880,"line_end":880,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":221931,"byte_end":221934,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":221939,"byte_end":221972,"line_start":882,"line_end":882,"column_start":5,"column_end":38}},{"value":"/ set.insert(Vec::<i32>::new());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":221977,"byte_end":222011,"line_start":883,"line_end":883,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":222016,"byte_end":222019,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.get(&[][..]).unwrap().capacity(), 0);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":222024,"byte_end":222080,"line_start":885,"line_end":885,"column_start":5,"column_end":61}},{"value":"/ set.replace(Vec::with_capacity(10));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":222085,"byte_end":222125,"line_start":886,"line_end":886,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(set.get(&[][..]).unwrap().capacity(), 10);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":222130,"byte_end":222187,"line_start":887,"line_end":887,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":222192,"byte_end":222199,"line_start":888,"line_end":888,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1193},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":223275,"byte_end":223281,"line_start":922,"line_end":922,"column_start":12,"column_end":18},"name":"remove","qualname":"<HashSet<T, S>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> bool where T: Borrow<Q>, Q: Hash +\nEq","parent":null,"children":[],"decl_id":null,"docs":" Removes a value from the set. Returns whether the value was\n present in the set.","sig":null,"attributes":[{"value":"/ Removes a value from the set. Returns whether the value was","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":222553,"byte_end":222616,"line_start":900,"line_end":900,"column_start":5,"column_end":68}},{"value":"/ present in the set.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":222621,"byte_end":222644,"line_start":901,"line_end":901,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":222649,"byte_end":222652,"line_start":902,"line_end":902,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":222657,"byte_end":222724,"line_start":903,"line_end":903,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":222729,"byte_end":222796,"line_start":904,"line_end":904,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":222801,"byte_end":222820,"line_start":905,"line_end":905,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":222825,"byte_end":222828,"line_start":906,"line_end":906,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":222833,"byte_end":222847,"line_start":907,"line_end":907,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":222852,"byte_end":222855,"line_start":908,"line_end":908,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":222860,"byte_end":222867,"line_start":909,"line_end":909,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":222872,"byte_end":222899,"line_start":910,"line_end":910,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":222904,"byte_end":222907,"line_start":911,"line_end":911,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":222912,"byte_end":222945,"line_start":912,"line_end":912,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":222950,"byte_end":222953,"line_start":913,"line_end":913,"column_start":5,"column_end":8}},{"value":"/ set.insert(2);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":222958,"byte_end":222976,"line_start":914,"line_end":914,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.remove(&2), true);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":222981,"byte_end":223018,"line_start":915,"line_end":915,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(set.remove(&2), false);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":223023,"byte_end":223061,"line_start":916,"line_end":916,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":223066,"byte_end":223073,"line_start":917,"line_end":917,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":223078,"byte_end":223081,"line_start":918,"line_end":918,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":223086,"byte_end":223145,"line_start":919,"line_end":919,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":223150,"byte_end":223214,"line_start":920,"line_end":920,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1195},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":224151,"byte_end":224155,"line_start":949,"line_end":949,"column_start":12,"column_end":16},"name":"take","qualname":"<HashSet<T, S>>::take","value":"pub fn take<Q: ?Sized>(&mut Self, &Q) -> Option<T> where T: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the given one.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":223435,"byte_end":223520,"line_start":930,"line_end":930,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":223525,"byte_end":223528,"line_start":931,"line_end":931,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":223533,"byte_end":223600,"line_start":932,"line_end":932,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":223605,"byte_end":223672,"line_start":933,"line_end":933,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":223677,"byte_end":223696,"line_start":934,"line_end":934,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":223701,"byte_end":223704,"line_start":935,"line_end":935,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":223709,"byte_end":223723,"line_start":936,"line_end":936,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":223728,"byte_end":223731,"line_start":937,"line_end":937,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":223736,"byte_end":223743,"line_start":938,"line_end":938,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":223748,"byte_end":223775,"line_start":939,"line_end":939,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":223780,"byte_end":223783,"line_start":940,"line_end":940,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":223788,"byte_end":223854,"line_start":941,"line_end":941,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(set.take(&2), Some(2));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":223859,"byte_end":223897,"line_start":942,"line_end":942,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(set.take(&2), None);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":223902,"byte_end":223937,"line_start":943,"line_end":943,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":223942,"byte_end":223949,"line_start":944,"line_end":944,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":223954,"byte_end":223957,"line_start":945,"line_end":945,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":223962,"byte_end":224021,"line_start":946,"line_end":946,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":224026,"byte_end":224090,"line_start":947,"line_end":947,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1251},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":230150,"byte_end":230154,"line_start":1196,"line_end":1196,"column_start":12,"column_end":16},"name":"Iter","qualname":"::set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":1254}],"decl_id":null,"docs":" An iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ An iterator over the items of a `HashSet`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":229897,"byte_end":229943,"line_start":1189,"line_end":1189,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":229944,"byte_end":229947,"line_start":1190,"line_end":1190,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`HashSet`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":229948,"byte_end":230015,"line_start":1191,"line_end":1191,"column_start":1,"column_end":68}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":230016,"byte_end":230051,"line_start":1192,"line_end":1192,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":230052,"byte_end":230055,"line_start":1193,"line_end":1193,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":230056,"byte_end":230092,"line_start":1194,"line_end":1194,"column_start":1,"column_end":37}},{"value":"/ [`iter`]: struct.HashSet.html#method.iter","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":230093,"byte_end":230138,"line_start":1195,"line_end":1195,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1255},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":230508,"byte_end":230516,"line_start":1207,"line_end":1207,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":1257}],"decl_id":null,"docs":" An owning iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ An owning iterator over the items of a `HashSet`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":230194,"byte_end":230247,"line_start":1200,"line_end":1200,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":230248,"byte_end":230251,"line_start":1201,"line_end":1201,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`HashSet`]","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":230252,"byte_end":230323,"line_start":1202,"line_end":1202,"column_start":1,"column_end":72}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":230324,"byte_end":230399,"line_start":1203,"line_end":1203,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":230400,"byte_end":230403,"line_start":1204,"line_end":1204,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":230404,"byte_end":230440,"line_start":1205,"line_end":1205,"column_start":1,"column_end":37}},{"value":"/ [`into_iter`]: struct.HashSet.html#method.into_iter","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":230441,"byte_end":230496,"line_start":1206,"line_end":1206,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":1258},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":230821,"byte_end":230826,"line_start":1218,"line_end":1218,"column_start":12,"column_end":17},"name":"Drain","qualname":"::set::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":1261}],"decl_id":null,"docs":" A draining iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ A draining iterator over the items of a `HashSet`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":230557,"byte_end":230611,"line_start":1211,"line_end":1211,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":230612,"byte_end":230615,"line_start":1212,"line_end":1212,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`HashSet`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":230616,"byte_end":230684,"line_start":1213,"line_end":1213,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":230685,"byte_end":230720,"line_start":1214,"line_end":1214,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":230721,"byte_end":230724,"line_start":1215,"line_end":1215,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":230725,"byte_end":230761,"line_start":1216,"line_end":1216,"column_start":1,"column_end":37}},{"value":"/ [`drain`]: struct.HashSet.html#method.drain","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":230762,"byte_end":230809,"line_start":1217,"line_end":1217,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1262},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":231193,"byte_end":231204,"line_start":1229,"line_end":1229,"column_start":12,"column_end":23},"name":"DrainFilter","qualname":"::set::DrainFilter","value":"DrainFilter {  }","parent":null,"children":[{"krate":0,"index":1266},{"krate":0,"index":1267}],"decl_id":null,"docs":" A draining iterator over entries of a `HashSet` which don't satisfy the predicate `f`.","sig":null,"attributes":[{"value":"/ A draining iterator over entries of a `HashSet` which don't satisfy the predicate `f`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":230872,"byte_end":230962,"line_start":1222,"line_end":1222,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":230963,"byte_end":230966,"line_start":1223,"line_end":1223,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain_filter`] method on [`HashSet`]. See its","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":230967,"byte_end":231050,"line_start":1224,"line_end":1224,"column_start":1,"column_end":84}},{"value":"/ documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":231051,"byte_end":231078,"line_start":1225,"line_end":1225,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":231079,"byte_end":231082,"line_start":1226,"line_end":1226,"column_start":1,"column_end":4}},{"value":"/ [`drain_filter`]: struct.HashSet.html#method.drain_filter","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":231083,"byte_end":231144,"line_start":1227,"line_end":1227,"column_start":1,"column_end":62}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":231145,"byte_end":231181,"line_start":1228,"line_end":1228,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1268},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":231606,"byte_end":231618,"line_start":1244,"line_end":1244,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::set::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":1272},{"krate":0,"index":1273}],"decl_id":null,"docs":" A lazy iterator producing elements in the intersection of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the intersection of `HashSet`s.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":231302,"byte_end":231375,"line_start":1237,"line_end":1237,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":231376,"byte_end":231379,"line_start":1238,"line_end":1238,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`intersection`] method on [`HashSet`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":231380,"byte_end":231455,"line_start":1239,"line_end":1239,"column_start":1,"column_end":76}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":231456,"byte_end":231491,"line_start":1240,"line_end":1240,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":231492,"byte_end":231495,"line_start":1241,"line_end":1241,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":231496,"byte_end":231532,"line_start":1242,"line_end":1242,"column_start":1,"column_end":37}},{"value":"/ [`intersection`]: struct.HashSet.html#method.intersection","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":231533,"byte_end":231594,"line_start":1243,"line_end":1243,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":1274},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":232038,"byte_end":232048,"line_start":1258,"line_end":1258,"column_start":12,"column_end":22},"name":"Difference","qualname":"::set::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":1278},{"krate":0,"index":1279}],"decl_id":null,"docs":" A lazy iterator producing elements in the difference of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the difference of `HashSet`s.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":231742,"byte_end":231813,"line_start":1251,"line_end":1251,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":231814,"byte_end":231817,"line_start":1252,"line_end":1252,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`difference`] method on [`HashSet`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":231818,"byte_end":231891,"line_start":1253,"line_end":1253,"column_start":1,"column_end":74}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":231892,"byte_end":231927,"line_start":1254,"line_end":1254,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":231928,"byte_end":231931,"line_start":1255,"line_end":1255,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":231932,"byte_end":231968,"line_start":1256,"line_end":1256,"column_start":1,"column_end":37}},{"value":"/ [`difference`]: struct.HashSet.html#method.difference","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":231969,"byte_end":232026,"line_start":1257,"line_end":1257,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":1280},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":232508,"byte_end":232527,"line_start":1272,"line_end":1272,"column_start":12,"column_end":31},"name":"SymmetricDifference","qualname":"::set::SymmetricDifference","value":"SymmetricDifference {  }","parent":null,"children":[{"krate":0,"index":1284}],"decl_id":null,"docs":" A lazy iterator producing elements in the symmetric difference of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the symmetric difference of `HashSet`s.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":232172,"byte_end":232253,"line_start":1265,"line_end":1265,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":232254,"byte_end":232257,"line_start":1266,"line_end":1266,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`symmetric_difference`] method on","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":232258,"byte_end":232328,"line_start":1267,"line_end":1267,"column_start":1,"column_end":71}},{"value":"/ [`HashSet`]. See its documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":232329,"byte_end":232377,"line_start":1268,"line_end":1268,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":232378,"byte_end":232381,"line_start":1269,"line_end":1269,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":232382,"byte_end":232418,"line_start":1270,"line_end":1270,"column_start":1,"column_end":37}},{"value":"/ [`symmetric_difference`]: struct.HashSet.html#method.symmetric_difference","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":232419,"byte_end":232496,"line_start":1271,"line_end":1271,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":1285},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":232880,"byte_end":232885,"line_start":1283,"line_end":1283,"column_start":12,"column_end":17},"name":"Union","qualname":"::set::Union","value":"Union {  }","parent":null,"children":[{"krate":0,"index":1289}],"decl_id":null,"docs":" A lazy iterator producing elements in the union of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the union of `HashSet`s.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":232604,"byte_end":232670,"line_start":1276,"line_end":1276,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":232671,"byte_end":232674,"line_start":1277,"line_end":1277,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`union`] method on [`HashSet`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":232675,"byte_end":232743,"line_start":1278,"line_end":1278,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":232744,"byte_end":232779,"line_start":1279,"line_end":1279,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":232780,"byte_end":232783,"line_start":1280,"line_end":1280,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":232784,"byte_end":232820,"line_start":1281,"line_end":1281,"column_start":1,"column_end":37}},{"value":"/ [`union`]: struct.HashSet.html#method.union","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":232821,"byte_end":232868,"line_start":1282,"line_end":1282,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":1456},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":1905,"byte_end":1913,"line_start":77,"line_end":77,"column_start":9,"column_end":17},"name":"hash_map","qualname":"::hash_map","value":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1457}],"decl_id":null,"docs":" A hash map implemented with quadratic probing and SIMD lookup.\n","sig":null,"attributes":[{"value":"/ A hash map implemented with quadratic probing and SIMD lookup.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":1920,"byte_end":1986,"line_start":78,"line_end":78,"column_start":5,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":1458},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":2460,"byte_end":2468,"line_start":94,"line_end":94,"column_start":9,"column_end":17},"name":"hash_set","qualname":"::hash_set","value":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1459}],"decl_id":null,"docs":" A hash set implemented as a `HashMap` where the value is `()`.\n","sig":null,"attributes":[{"value":"/ A hash set implemented as a `HashMap` where the value is `()`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":2475,"byte_end":2541,"line_start":95,"line_end":95,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1525},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":3220,"byte_end":3236,"line_start":117,"line_end":117,"column_start":5,"column_end":21},"name":"CapacityOverflow","qualname":"::TryReserveError::CapacityOverflow","value":"TryReserveError::CapacityOverflow","parent":{"krate":0,"index":1524},"children":[],"decl_id":null,"docs":" Error due to the computed capacity exceeding the collection's maximum\n (usually `isize::MAX` bytes).\n","sig":null,"attributes":[{"value":"/ Error due to the computed capacity exceeding the collection's maximum","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":3104,"byte_end":3177,"line_start":115,"line_end":115,"column_start":5,"column_end":78}},{"value":"/ (usually `isize::MAX` bytes).","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":3182,"byte_end":3215,"line_start":116,"line_end":116,"column_start":5,"column_end":38}}]},{"kind":"StructVariant","id":{"krate":0,"index":1527},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":3290,"byte_end":3300,"line_start":120,"line_end":120,"column_start":5,"column_end":15},"name":"AllocError","qualname":"::TryReserveError::AllocError","value":"TryReserveError::AllocError { layout }","parent":{"krate":0,"index":1524},"children":[],"decl_id":null,"docs":" The memory allocator returned an error\n","sig":null,"attributes":[{"value":"/ The memory allocator returned an error","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":3243,"byte_end":3285,"line_start":119,"line_end":119,"column_start":5,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":1524},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":3082,"byte_end":3097,"line_start":114,"line_end":114,"column_start":10,"column_end":25},"name":"TryReserveError","qualname":"::TryReserveError","value":"pub enum TryReserveError {\n    CapacityOverflow,\n    AllocError {\n        layout: alloc::alloc::Layout,\n    },\n}","parent":null,"children":[{"krate":0,"index":1525},{"krate":0,"index":1527}],"decl_id":null,"docs":" The error type for `try_reserve` methods.\n","sig":null,"attributes":[{"value":"/ The error type for `try_reserve` methods.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/lib.rs","byte_start":2988,"byte_end":3033,"line_start":112,"line_end":112,"column_start":1,"column_end":46}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/sse2.rs","byte_start":10325960,"byte_end":10325965,"line_start":23,"line_end":23,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1483},{"krate":0,"index":1484},{"krate":0,"index":1491},{"krate":0,"index":1492},{"krate":0,"index":1493},{"krate":0,"index":1494},{"krate":0,"index":1495},{"krate":0,"index":1496},{"krate":0,"index":1497},{"krate":0,"index":1498}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/bitmask.rs","byte_start":71570,"byte_end":71577,"line_start":20,"line_end":20,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/bitmask.rs","byte_start":74191,"byte_end":74198,"line_start":99,"line_end":99,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/bitmask.rs","byte_start":74486,"byte_end":74497,"line_start":113,"line_end":113,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":7620,"byte_end":7631,"line_start":73,"line_end":73,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":88},{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":10362,"byte_end":10370,"line_start":153,"line_end":153,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":15293,"byte_end":15299,"line_start":282,"line_end":282,"column_start":25,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":15325,"byte_end":15331,"line_start":284,"line_end":284,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":15464,"byte_end":15470,"line_start":291,"line_end":291,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":127},{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":18292,"byte_end":18300,"line_start":378,"line_end":378,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":143},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":163},{"krate":0,"index":166},{"krate":0,"index":169},{"krate":0,"index":171},{"krate":0,"index":174},{"krate":0,"index":178},{"krate":0,"index":181},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":46842,"byte_end":46850,"line_start":1077,"line_end":1077,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":46895,"byte_end":46903,"line_start":1078,"line_end":1078,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":46950,"byte_end":46958,"line_start":1080,"line_end":1080,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":49065,"byte_end":49073,"line_start":1139,"line_end":1139,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1522}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":49856,"byte_end":49864,"line_start":1163,"line_end":1163,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":216},{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":53778,"byte_end":53786,"line_start":1269,"line_end":1269,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":54189,"byte_end":54197,"line_start":1285,"line_end":1285,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":55039,"byte_end":55051,"line_start":1316,"line_end":1316,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":57874,"byte_end":57886,"line_start":1385,"line_end":1385,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":57917,"byte_end":57929,"line_start":1386,"line_end":1386,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":57955,"byte_end":57967,"line_start":1388,"line_end":1388,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":58257,"byte_end":58269,"line_start":1400,"line_end":1400,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":59736,"byte_end":59748,"line_start":1438,"line_end":1438,"column_start":27,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":59923,"byte_end":59930,"line_start":1446,"line_end":1446,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":65869,"byte_end":65876,"line_start":1564,"line_end":1564,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":66084,"byte_end":66091,"line_start":1574,"line_end":1574,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":66776,"byte_end":66783,"line_start":1597,"line_end":1597,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":66816,"byte_end":66823,"line_start":1598,"line_end":1598,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":67020,"byte_end":67031,"line_start":1607,"line_end":1607,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":67184,"byte_end":67195,"line_start":1614,"line_end":1614,"column_start":25,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":67240,"byte_end":67251,"line_start":1615,"line_end":1615,"column_start":25,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":67867,"byte_end":67878,"line_start":1637,"line_end":1637,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":68367,"byte_end":68378,"line_start":1656,"line_end":1656,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":68718,"byte_end":68729,"line_start":1670,"line_end":1670,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":68762,"byte_end":68773,"line_start":1671,"line_end":1671,"column_start":27,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":69313,"byte_end":69321,"line_start":1688,"line_end":1688,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":69478,"byte_end":69486,"line_start":1695,"line_end":1695,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":69535,"byte_end":69543,"line_start":1696,"line_end":1696,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":69586,"byte_end":69594,"line_start":1698,"line_end":1698,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":70298,"byte_end":70306,"line_start":1721,"line_end":1721,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":70699,"byte_end":70707,"line_start":1738,"line_end":1738,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":70744,"byte_end":70752,"line_start":1739,"line_end":1739,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":81735,"byte_end":81742,"line_start":193,"line_end":193,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":393},{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":83476,"byte_end":83483,"line_start":251,"line_end":251,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":416},{"krate":0,"index":418}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":94598,"byte_end":94605,"line_start":639,"line_end":639,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":425},{"krate":0,"index":427},{"krate":0,"index":429},{"krate":0,"index":431},{"krate":0,"index":433},{"krate":0,"index":436},{"krate":0,"index":440},{"krate":0,"index":444},{"krate":0,"index":446},{"krate":0,"index":450},{"krate":0,"index":453},{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":107757,"byte_end":107764,"line_start":1047,"line_end":1047,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":463},{"krate":0,"index":464}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":110697,"byte_end":110704,"line_start":1105,"line_end":1105,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":469}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":111025,"byte_end":111032,"line_start":1121,"line_end":1121,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":111126,"byte_end":111133,"line_start":1129,"line_end":1129,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":480}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":111329,"byte_end":111336,"line_start":1139,"line_end":1139,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":485}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":111626,"byte_end":111633,"line_start":1150,"line_end":1150,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":491},{"krate":0,"index":492}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":112479,"byte_end":112483,"line_start":1182,"line_end":1182,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":502}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":112721,"byte_end":112725,"line_start":1192,"line_end":1192,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":506}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":113503,"byte_end":113510,"line_start":1214,"line_end":1214,"column_start":40,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":113536,"byte_end":113543,"line_start":1216,"line_end":1216,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":114207,"byte_end":114215,"line_start":1238,"line_end":1238,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":114870,"byte_end":114874,"line_start":1261,"line_end":1261,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":115072,"byte_end":115076,"line_start":1270,"line_end":1270,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":115600,"byte_end":115606,"line_start":1288,"line_end":1288,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":115806,"byte_end":115812,"line_start":1297,"line_end":1297,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":553}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":116282,"byte_end":116287,"line_start":1314,"line_end":1314,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":562}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":117038,"byte_end":117049,"line_start":1340,"line_end":1340,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":117443,"byte_end":117459,"line_start":1356,"line_end":1356,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":117609,"byte_end":117620,"line_start":1363,"line_end":1363,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":588},{"krate":0,"index":589}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":118037,"byte_end":118053,"line_start":1381,"line_end":1381,"column_start":12,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":599}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":120118,"byte_end":120137,"line_start":1446,"line_end":1446,"column_start":28,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":120211,"byte_end":120230,"line_start":1452,"line_end":1452,"column_start":28,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":120837,"byte_end":120855,"line_start":1477,"line_end":1477,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":653},{"krate":0,"index":655}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":121680,"byte_end":121698,"line_start":1504,"line_end":1504,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":663},{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":122654,"byte_end":122669,"line_start":1533,"line_end":1533,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":675},{"krate":0,"index":677},{"krate":0,"index":680},{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":124186,"byte_end":124197,"line_start":1584,"line_end":1584,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":691},{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":695}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":128111,"byte_end":128130,"line_start":1712,"line_end":1712,"column_start":16,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":131257,"byte_end":131274,"line_start":1804,"line_end":1804,"column_start":19,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":722},{"krate":0,"index":725}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":133293,"byte_end":133311,"line_start":1870,"line_end":1870,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":731}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":133488,"byte_end":133499,"line_start":1876,"line_end":1876,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":736}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":133830,"byte_end":133849,"line_start":1885,"line_end":1885,"column_start":36,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":740}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":134104,"byte_end":134121,"line_start":1894,"line_end":1894,"column_start":25,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":745}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":134286,"byte_end":134301,"line_start":1900,"line_end":1900,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":750}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":134890,"byte_end":134895,"line_start":1920,"line_end":1920,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":766}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":135452,"byte_end":135465,"line_start":1939,"line_end":1939,"column_start":31,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":135558,"byte_end":135571,"line_start":1946,"line_end":1946,"column_start":31,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":135673,"byte_end":135686,"line_start":1954,"line_end":1954,"column_start":39,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":787}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":136170,"byte_end":136181,"line_start":1973,"line_end":1973,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":800}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":136878,"byte_end":136885,"line_start":1999,"line_end":1999,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":823}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":137664,"byte_end":137668,"line_start":2028,"line_end":2028,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":828},{"krate":0,"index":829},{"krate":0,"index":831}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":138104,"byte_end":138108,"line_start":2043,"line_end":2043,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":835}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":138262,"byte_end":138266,"line_start":2050,"line_end":2050,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":138309,"byte_end":138316,"line_start":2052,"line_end":2052,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":138764,"byte_end":138771,"line_start":2067,"line_end":2067,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":850}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":138924,"byte_end":138931,"line_start":2073,"line_end":2073,"column_start":30,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":138972,"byte_end":138979,"line_start":2075,"line_end":2075,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":857}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":139185,"byte_end":139193,"line_start":2085,"line_end":2085,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":863}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":139524,"byte_end":139532,"line_start":2097,"line_end":2097,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":867}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":139681,"byte_end":139689,"line_start":2103,"line_end":2103,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":139740,"byte_end":139748,"line_start":2105,"line_end":2105,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":874}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":139910,"byte_end":139914,"line_start":2111,"line_end":2111,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":882}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":140263,"byte_end":140267,"line_start":2123,"line_end":2123,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":886}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":140420,"byte_end":140424,"line_start":2129,"line_end":2129,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":140467,"byte_end":140473,"line_start":2131,"line_end":2131,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":897}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":140822,"byte_end":140828,"line_start":2143,"line_end":2143,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":901}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":140981,"byte_end":140987,"line_start":2149,"line_end":2149,"column_start":30,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":141030,"byte_end":141039,"line_start":2151,"line_end":2151,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":909},{"krate":0,"index":910},{"krate":0,"index":912}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":141396,"byte_end":141405,"line_start":2163,"line_end":2163,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":916}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":141558,"byte_end":141567,"line_start":2169,"line_end":2169,"column_start":30,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":141608,"byte_end":141617,"line_start":2171,"line_end":2171,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":923}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":141833,"byte_end":141838,"line_start":2181,"line_end":2181,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":928},{"krate":0,"index":929},{"krate":0,"index":930}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":142173,"byte_end":142178,"line_start":2193,"line_end":2193,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":934}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":142331,"byte_end":142336,"line_start":2199,"line_end":2199,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":142377,"byte_end":142382,"line_start":2201,"line_end":2201,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":941}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":142582,"byte_end":142587,"line_start":2211,"line_end":2211,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":951},{"krate":0,"index":953},{"krate":0,"index":954}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":147338,"byte_end":147343,"line_start":2377,"line_end":2377,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":961}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":148100,"byte_end":148113,"line_start":2404,"line_end":2404,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":967},{"krate":0,"index":968},{"krate":0,"index":969},{"krate":0,"index":970},{"krate":0,"index":971},{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155025,"byte_end":155036,"line_start":2631,"line_end":2631,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":981},{"krate":0,"index":982},{"krate":0,"index":983},{"krate":0,"index":985}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":157286,"byte_end":157293,"line_start":2714,"line_end":2714,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":991}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":157866,"byte_end":157873,"line_start":2732,"line_end":2732,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":998}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":159320,"byte_end":159327,"line_start":2777,"line_end":2777,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1006}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/scopeguard.rs","byte_start":193939,"byte_end":193949,"line_start":20,"line_end":20,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1057},{"krate":0,"index":1058}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/scopeguard.rs","byte_start":194137,"byte_end":194147,"line_start":31,"line_end":31,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1062}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/scopeguard.rs","byte_start":194326,"byte_end":194336,"line_start":41,"line_end":41,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1066}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":198583,"byte_end":198590,"line_start":120,"line_end":120,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1139},{"krate":0,"index":1140}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":199939,"byte_end":199946,"line_start":172,"line_end":172,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1144},{"krate":0,"index":1145},{"krate":0,"index":1146},{"krate":0,"index":1147},{"krate":0,"index":1148},{"krate":0,"index":1149},{"krate":0,"index":1152},{"krate":0,"index":1154}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":204262,"byte_end":204269,"line_start":340,"line_end":340,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1158},{"krate":0,"index":1159},{"krate":0,"index":1160},{"krate":0,"index":1161},{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1164},{"krate":0,"index":1165},{"krate":0,"index":1167},{"krate":0,"index":1169},{"krate":0,"index":1171},{"krate":0,"index":1173},{"krate":0,"index":1175},{"krate":0,"index":1178},{"krate":0,"index":1179},{"krate":0,"index":1182},{"krate":0,"index":1186},{"krate":0,"index":1188},{"krate":0,"index":1190},{"krate":0,"index":1191},{"krate":0,"index":1192},{"krate":0,"index":1193},{"krate":0,"index":1195}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":224349,"byte_end":224356,"line_start":958,"line_end":958,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1201}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":224604,"byte_end":224611,"line_start":972,"line_end":972,"column_start":19,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":224693,"byte_end":224700,"line_start":979,"line_end":979,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1209}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":224921,"byte_end":224928,"line_start":989,"line_end":989,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1213}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":225236,"byte_end":225243,"line_start":1002,"line_end":1002,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1218}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":225809,"byte_end":225816,"line_start":1025,"line_end":1025,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1225}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":226381,"byte_end":226388,"line_start":1048,"line_end":1048,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1230}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":233208,"byte_end":233215,"line_start":1297,"line_end":1297,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1300},{"krate":0,"index":1301},{"krate":0,"index":1302}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":234090,"byte_end":234094,"line_start":1329,"line_end":1329,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1305}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":234278,"byte_end":234282,"line_start":1337,"line_end":1337,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1309},{"krate":0,"index":1310},{"krate":0,"index":1311}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":234611,"byte_end":234615,"line_start":1349,"line_end":1349,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1315}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":234761,"byte_end":234765,"line_start":1355,"line_end":1355,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":234812,"byte_end":234816,"line_start":1357,"line_end":1357,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1320}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":234973,"byte_end":234981,"line_start":1363,"line_end":1363,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1323},{"krate":0,"index":1324},{"krate":0,"index":1326}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":235310,"byte_end":235318,"line_start":1375,"line_end":1375,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1329}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":235460,"byte_end":235468,"line_start":1381,"line_end":1381,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":235511,"byte_end":235519,"line_start":1383,"line_end":1383,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1334}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":235733,"byte_end":235738,"line_start":1390,"line_end":1390,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1338},{"krate":0,"index":1339},{"krate":0,"index":1341}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":236071,"byte_end":236076,"line_start":1402,"line_end":1402,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1344}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":236222,"byte_end":236227,"line_start":1408,"line_end":1408,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":236274,"byte_end":236279,"line_start":1410,"line_end":1410,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1349}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":236500,"byte_end":236511,"line_start":1417,"line_end":1417,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1355}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":236822,"byte_end":236833,"line_start":1431,"line_end":1431,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1359},{"krate":0,"index":1360}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":237126,"byte_end":237138,"line_start":1445,"line_end":1445,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1365}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":237357,"byte_end":237369,"line_start":1455,"line_end":1455,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1370},{"krate":0,"index":1371},{"krate":0,"index":1372}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":237907,"byte_end":237919,"line_start":1479,"line_end":1479,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1376}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":238144,"byte_end":238156,"line_start":1489,"line_end":1489,"column_start":30,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":238237,"byte_end":238247,"line_start":1496,"line_end":1496,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1383}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":238464,"byte_end":238474,"line_start":1506,"line_end":1506,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1388},{"krate":0,"index":1389},{"krate":0,"index":1390}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":239016,"byte_end":239026,"line_start":1530,"line_end":1530,"column_start":30,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":239112,"byte_end":239122,"line_start":1537,"line_end":1537,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1397}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":239339,"byte_end":239358,"line_start":1547,"line_end":1547,"column_start":22,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1401}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":239564,"byte_end":239583,"line_start":1556,"line_end":1556,"column_start":29,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":1408}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":239955,"byte_end":239974,"line_start":1573,"line_end":1573,"column_start":30,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":240060,"byte_end":240079,"line_start":1580,"line_end":1580,"column_start":27,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1415}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":240296,"byte_end":240301,"line_start":1590,"line_end":1590,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1419}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":240494,"byte_end":240499,"line_start":1599,"line_end":1599,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":240585,"byte_end":240590,"line_start":1606,"line_end":1606,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1426}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":240814,"byte_end":240819,"line_start":1616,"line_end":1616,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1431},{"krate":0,"index":1432},{"krate":0,"index":1433}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/sse2.rs","byte_start":10325960,"byte_end":10325965,"line_start":23,"line_end":23,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1502},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/bitmask.rs","byte_start":71570,"byte_end":71577,"line_start":20,"line_end":20,"column_start":6,"column_end":13},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1508},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/bitmask.rs","byte_start":74191,"byte_end":74198,"line_start":99,"line_end":99,"column_start":23,"column_end":30},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1508},"to":{"krate":1,"index":7379}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/bitmask.rs","byte_start":74486,"byte_end":74497,"line_start":113,"line_end":113,"column_start":19,"column_end":30},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":71},"to":{"krate":1,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":7620,"byte_end":7631,"line_start":73,"line_end":73,"column_start":6,"column_end":17},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1514},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":10362,"byte_end":10370,"line_start":153,"line_end":153,"column_start":19,"column_end":27},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":97},"to":{"krate":1,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":15293,"byte_end":15299,"line_start":282,"line_end":282,"column_start":25,"column_end":31},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":108},"to":{"krate":1,"index":2989}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":15325,"byte_end":15331,"line_start":284,"line_end":284,"column_start":19,"column_end":25},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":108},"to":{"krate":1,"index":2610}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":15464,"byte_end":15470,"line_start":291,"line_end":291,"column_start":9,"column_end":15},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":108},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":18292,"byte_end":18300,"line_start":378,"line_end":378,"column_start":9,"column_end":17},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":130},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":46842,"byte_end":46850,"line_start":1077,"line_end":1077,"column_start":25,"column_end":33},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":130},"to":{"krate":1,"index":2989}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":46895,"byte_end":46903,"line_start":1078,"line_end":1078,"column_start":25,"column_end":33},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":130},"to":{"krate":1,"index":3001}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":46950,"byte_end":46958,"line_start":1080,"line_end":1080,"column_start":26,"column_end":34},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":130},"to":{"krate":1,"index":2610}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":49065,"byte_end":49073,"line_start":1139,"line_end":1139,"column_start":34,"column_end":42},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":130},"to":{"krate":0,"index":209}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":49856,"byte_end":49864,"line_start":1163,"line_end":1163,"column_start":16,"column_end":24},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":130},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":53778,"byte_end":53786,"line_start":1269,"line_end":1269,"column_start":18,"column_end":26},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":130},"to":{"krate":1,"index":3224}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":54189,"byte_end":54197,"line_start":1285,"line_end":1285,"column_start":26,"column_end":34},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":130},"to":{"krate":1,"index":7379}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":55039,"byte_end":55051,"line_start":1316,"line_end":1316,"column_start":9,"column_end":21},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":230},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":57874,"byte_end":57886,"line_start":1385,"line_end":1385,"column_start":25,"column_end":37},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":230},"to":{"krate":1,"index":2989}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":57917,"byte_end":57929,"line_start":1386,"line_end":1386,"column_start":25,"column_end":37},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":230},"to":{"krate":1,"index":3001}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":57955,"byte_end":57967,"line_start":1388,"line_end":1388,"column_start":19,"column_end":31},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":230},"to":{"krate":1,"index":2610}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":58257,"byte_end":58269,"line_start":1400,"line_end":1400,"column_start":22,"column_end":34},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":230},"to":{"krate":1,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":59736,"byte_end":59748,"line_start":1438,"line_end":1438,"column_start":27,"column_end":39},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":230},"to":{"krate":1,"index":7827}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":59923,"byte_end":59930,"line_start":1446,"line_end":1446,"column_start":9,"column_end":16},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":253},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":65869,"byte_end":65876,"line_start":1564,"line_end":1564,"column_start":19,"column_end":26},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":253},"to":{"krate":1,"index":2610}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":66084,"byte_end":66091,"line_start":1574,"line_end":1574,"column_start":22,"column_end":29},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":253},"to":{"krate":1,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":66776,"byte_end":66783,"line_start":1597,"line_end":1597,"column_start":31,"column_end":38},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":253},"to":{"krate":1,"index":7448}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":66816,"byte_end":66823,"line_start":1598,"line_end":1598,"column_start":27,"column_end":34},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":253},"to":{"krate":1,"index":7827}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":67020,"byte_end":67031,"line_start":1607,"line_end":1607,"column_start":9,"column_end":20},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":274},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":67184,"byte_end":67195,"line_start":1614,"line_end":1614,"column_start":25,"column_end":36},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":274},"to":{"krate":1,"index":2989}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":67240,"byte_end":67251,"line_start":1615,"line_end":1615,"column_start":25,"column_end":36},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":274},"to":{"krate":1,"index":3001}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":67867,"byte_end":67878,"line_start":1637,"line_end":1637,"column_start":18,"column_end":29},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":274},"to":{"krate":1,"index":3224}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":68367,"byte_end":68378,"line_start":1656,"line_end":1656,"column_start":22,"column_end":33},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":274},"to":{"krate":1,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":68718,"byte_end":68729,"line_start":1670,"line_end":1670,"column_start":31,"column_end":42},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":274},"to":{"krate":1,"index":7448}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":68762,"byte_end":68773,"line_start":1671,"line_end":1671,"column_start":27,"column_end":38},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":274},"to":{"krate":1,"index":7827}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":69313,"byte_end":69321,"line_start":1688,"line_end":1688,"column_start":9,"column_end":17},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":298},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":69478,"byte_end":69486,"line_start":1695,"line_end":1695,"column_start":25,"column_end":33},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":298},"to":{"krate":1,"index":2989}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":69535,"byte_end":69543,"line_start":1696,"line_end":1696,"column_start":25,"column_end":33},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":298},"to":{"krate":1,"index":3001}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":69586,"byte_end":69594,"line_start":1698,"line_end":1698,"column_start":18,"column_end":26},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":298},"to":{"krate":1,"index":3224}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":70298,"byte_end":70306,"line_start":1721,"line_end":1721,"column_start":22,"column_end":30},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":298},"to":{"krate":1,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":70699,"byte_end":70707,"line_start":1738,"line_end":1738,"column_start":31,"column_end":39},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":298},"to":{"krate":1,"index":7448}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/raw/mod.rs","byte_start":70744,"byte_end":70752,"line_start":1739,"line_end":1739,"column_start":27,"column_end":35},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":298},"to":{"krate":1,"index":7827}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":81735,"byte_end":81742,"line_start":193,"line_end":193,"column_start":46,"column_end":53},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":2610}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":83476,"byte_end":83483,"line_start":251,"line_end":251,"column_start":15,"column_end":22},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":383},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":94598,"byte_end":94605,"line_start":639,"line_end":639,"column_start":15,"column_end":22},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":383},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":107757,"byte_end":107764,"line_start":1047,"line_end":1047,"column_start":15,"column_end":22},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":383},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":110697,"byte_end":110704,"line_start":1105,"line_end":1105,"column_start":29,"column_end":36},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":2640}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":111025,"byte_end":111032,"line_start":1121,"line_end":1121,"column_start":22,"column_end":29},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":111126,"byte_end":111133,"line_start":1129,"line_end":1129,"column_start":25,"column_end":32},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":111329,"byte_end":111336,"line_start":1139,"line_end":1139,"column_start":27,"column_end":34},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":2967}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":111626,"byte_end":111633,"line_start":1150,"line_end":1150,"column_start":40,"column_end":47},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":3285}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":112479,"byte_end":112483,"line_start":1182,"line_end":1182,"column_start":22,"column_end":26},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":493},"to":{"krate":1,"index":2610}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":112721,"byte_end":112725,"line_start":1192,"line_end":1192,"column_start":41,"column_end":45},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":493},"to":{"krate":1,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":113503,"byte_end":113510,"line_start":1214,"line_end":1214,"column_start":40,"column_end":47},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":507},"to":{"krate":1,"index":2989}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":113536,"byte_end":113543,"line_start":1216,"line_end":1216,"column_start":12,"column_end":19},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":507},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":114207,"byte_end":114215,"line_start":1238,"line_end":1238,"column_start":12,"column_end":20},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":114870,"byte_end":114874,"line_start":1261,"line_end":1261,"column_start":22,"column_end":26},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":528},"to":{"krate":1,"index":2610}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":115072,"byte_end":115076,"line_start":1270,"line_end":1270,"column_start":34,"column_end":38},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":528},"to":{"krate":1,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":115600,"byte_end":115606,"line_start":1288,"line_end":1288,"column_start":22,"column_end":28},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":541},"to":{"krate":1,"index":2610}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":115806,"byte_end":115812,"line_start":1297,"line_end":1297,"column_start":34,"column_end":40},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":541},"to":{"krate":1,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":116282,"byte_end":116287,"line_start":1314,"line_end":1314,"column_start":12,"column_end":17},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":554},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":117038,"byte_end":117049,"line_start":1340,"line_end":1340,"column_start":28,"column_end":39},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":563},"to":{"krate":1,"index":3224}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":117443,"byte_end":117459,"line_start":1356,"line_end":1356,"column_start":28,"column_end":44},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":576},"to":{"krate":1,"index":3224}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":117609,"byte_end":117620,"line_start":1363,"line_end":1363,"column_start":28,"column_end":39},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":563},"to":{"krate":1,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":118037,"byte_end":118053,"line_start":1381,"line_end":1381,"column_start":12,"column_end":28},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":590},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":120118,"byte_end":120137,"line_start":1446,"line_end":1446,"column_start":28,"column_end":47},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":623},"to":{"krate":1,"index":2989}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":120211,"byte_end":120230,"line_start":1452,"line_end":1452,"column_start":28,"column_end":47},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":623},"to":{"krate":1,"index":3001}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":120837,"byte_end":120855,"line_start":1477,"line_end":1477,"column_start":19,"column_end":37},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":606},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":121680,"byte_end":121698,"line_start":1504,"line_end":1504,"column_start":19,"column_end":37},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":606},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":122654,"byte_end":122669,"line_start":1533,"line_end":1533,"column_start":19,"column_end":34},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":642},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":124186,"byte_end":124197,"line_start":1584,"line_end":1584,"column_start":19,"column_end":30},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":612},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":128111,"byte_end":128130,"line_start":1712,"line_end":1712,"column_start":16,"column_end":35},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":623},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":131257,"byte_end":131274,"line_start":1804,"line_end":1804,"column_start":19,"column_end":36},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":635},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":133293,"byte_end":133311,"line_start":1870,"line_end":1870,"column_start":25,"column_end":43},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":606},"to":{"krate":1,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":133488,"byte_end":133499,"line_start":1876,"line_end":1876,"column_start":39,"column_end":50},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":612},"to":{"krate":1,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":133830,"byte_end":133849,"line_start":1885,"line_end":1885,"column_start":36,"column_end":55},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":623},"to":{"krate":1,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":134104,"byte_end":134121,"line_start":1894,"line_end":1894,"column_start":25,"column_end":42},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":635},"to":{"krate":1,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":134286,"byte_end":134301,"line_start":1900,"line_end":1900,"column_start":25,"column_end":40},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":642},"to":{"krate":1,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":134890,"byte_end":134895,"line_start":1920,"line_end":1920,"column_start":39,"column_end":44},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":751},"to":{"krate":1,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":135452,"byte_end":135465,"line_start":1939,"line_end":1939,"column_start":31,"column_end":44},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":767},"to":{"krate":1,"index":2989}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":135558,"byte_end":135571,"line_start":1946,"line_end":1946,"column_start":31,"column_end":44},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":767},"to":{"krate":1,"index":3001}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":135673,"byte_end":135686,"line_start":1954,"line_end":1954,"column_start":39,"column_end":52},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":767},"to":{"krate":1,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":136170,"byte_end":136181,"line_start":1973,"line_end":1973,"column_start":32,"column_end":43},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":788},"to":{"krate":1,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":136878,"byte_end":136885,"line_start":1999,"line_end":1999,"column_start":32,"column_end":39},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":7379}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":137664,"byte_end":137668,"line_start":2028,"line_end":2028,"column_start":29,"column_end":33},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":493},"to":{"krate":1,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":138104,"byte_end":138108,"line_start":2043,"line_end":2043,"column_start":34,"column_end":38},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":493},"to":{"krate":1,"index":7448}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":138262,"byte_end":138266,"line_start":2050,"line_end":2050,"column_start":30,"column_end":34},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":493},"to":{"krate":1,"index":7827}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":138309,"byte_end":138316,"line_start":2052,"line_end":2052,"column_start":29,"column_end":36},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":507},"to":{"krate":1,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":138764,"byte_end":138771,"line_start":2067,"line_end":2067,"column_start":34,"column_end":41},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":507},"to":{"krate":1,"index":7448}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":138924,"byte_end":138931,"line_start":2073,"line_end":2073,"column_start":30,"column_end":37},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":507},"to":{"krate":1,"index":7827}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":138972,"byte_end":138979,"line_start":2075,"line_end":2075,"column_start":27,"column_end":34},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":507},"to":{"krate":1,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":139185,"byte_end":139193,"line_start":2085,"line_end":2085,"column_start":25,"column_end":33},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":520},"to":{"krate":1,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":139524,"byte_end":139532,"line_start":2097,"line_end":2097,"column_start":34,"column_end":42},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":520},"to":{"krate":1,"index":7448}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":139681,"byte_end":139689,"line_start":2103,"line_end":2103,"column_start":30,"column_end":38},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":520},"to":{"krate":1,"index":7827}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":139740,"byte_end":139748,"line_start":2105,"line_end":2105,"column_start":41,"column_end":49},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":520},"to":{"krate":1,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":139910,"byte_end":139914,"line_start":2111,"line_end":2111,"column_start":29,"column_end":33},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":528},"to":{"krate":1,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":140263,"byte_end":140267,"line_start":2123,"line_end":2123,"column_start":34,"column_end":38},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":528},"to":{"krate":1,"index":7448}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":140420,"byte_end":140424,"line_start":2129,"line_end":2129,"column_start":30,"column_end":34},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":528},"to":{"krate":1,"index":7827}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":140467,"byte_end":140473,"line_start":2131,"line_end":2131,"column_start":29,"column_end":35},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":541},"to":{"krate":1,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":140822,"byte_end":140828,"line_start":2143,"line_end":2143,"column_start":34,"column_end":40},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":541},"to":{"krate":1,"index":7448}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":140981,"byte_end":140987,"line_start":2149,"line_end":2149,"column_start":30,"column_end":36},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":541},"to":{"krate":1,"index":7827}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":141030,"byte_end":141039,"line_start":2151,"line_end":2151,"column_start":29,"column_end":38},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":601},"to":{"krate":1,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":141396,"byte_end":141405,"line_start":2163,"line_end":2163,"column_start":34,"column_end":43},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":601},"to":{"krate":1,"index":7448}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":141558,"byte_end":141567,"line_start":2169,"line_end":2169,"column_start":30,"column_end":39},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":601},"to":{"krate":1,"index":7827}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":141608,"byte_end":141617,"line_start":2171,"line_end":2171,"column_start":27,"column_end":36},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":601},"to":{"krate":1,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":141833,"byte_end":141838,"line_start":2181,"line_end":2181,"column_start":29,"column_end":34},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":554},"to":{"krate":1,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":142173,"byte_end":142178,"line_start":2193,"line_end":2193,"column_start":34,"column_end":39},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":554},"to":{"krate":1,"index":7448}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":142331,"byte_end":142336,"line_start":2199,"line_end":2199,"column_start":30,"column_end":35},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":554},"to":{"krate":1,"index":7827}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":142377,"byte_end":142382,"line_start":2201,"line_end":2201,"column_start":27,"column_end":32},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":554},"to":{"krate":1,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":142582,"byte_end":142587,"line_start":2211,"line_end":2211,"column_start":19,"column_end":24},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":751},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":147338,"byte_end":147343,"line_start":2377,"line_end":2377,"column_start":28,"column_end":33},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":751},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":148100,"byte_end":148113,"line_start":2404,"line_end":2404,"column_start":19,"column_end":32},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":767},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":155025,"byte_end":155036,"line_start":2631,"line_end":2631,"column_start":19,"column_end":30},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":788},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":157286,"byte_end":157293,"line_start":2714,"line_end":2714,"column_start":40,"column_end":47},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":7375}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":157866,"byte_end":157873,"line_start":2732,"line_end":2732,"column_start":34,"column_end":41},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":7388}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/map.rs","byte_start":159320,"byte_end":159327,"line_start":2777,"line_end":2777,"column_start":46,"column_end":53},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":7388}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/scopeguard.rs","byte_start":193939,"byte_end":193949,"line_start":20,"line_end":20,"column_start":22,"column_end":32},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1046},"to":{"krate":1,"index":3200}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/scopeguard.rs","byte_start":194137,"byte_end":194147,"line_start":31,"line_end":31,"column_start":25,"column_end":35},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1046},"to":{"krate":1,"index":3213}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/scopeguard.rs","byte_start":194326,"byte_end":194336,"line_start":41,"line_end":41,"column_start":21,"column_end":31},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1046},"to":{"krate":1,"index":3224}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":198583,"byte_end":198590,"line_start":120,"line_end":120,"column_start":36,"column_end":43},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1132},"to":{"krate":1,"index":2610}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":199939,"byte_end":199946,"line_start":172,"line_end":172,"column_start":12,"column_end":19},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1132},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":204262,"byte_end":204269,"line_start":340,"line_end":340,"column_start":12,"column_end":19},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1132},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":224349,"byte_end":224356,"line_start":958,"line_end":958,"column_start":26,"column_end":33},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1132},"to":{"krate":1,"index":2640}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":224604,"byte_end":224611,"line_start":972,"line_end":972,"column_start":19,"column_end":26},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1132},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":224693,"byte_end":224700,"line_start":979,"line_end":979,"column_start":27,"column_end":34},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1132},"to":{"krate":1,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":224921,"byte_end":224928,"line_start":989,"line_end":989,"column_start":32,"column_end":39},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1132},"to":{"krate":1,"index":7375}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":225236,"byte_end":225243,"line_start":1002,"line_end":1002,"column_start":26,"column_end":33},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1132},"to":{"krate":1,"index":7388}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":225809,"byte_end":225816,"line_start":1025,"line_end":1025,"column_start":34,"column_end":41},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1132},"to":{"krate":1,"index":7388}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":226381,"byte_end":226388,"line_start":1048,"line_end":1048,"column_start":24,"column_end":31},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1132},"to":{"krate":1,"index":2967}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":233208,"byte_end":233215,"line_start":1297,"line_end":1297,"column_start":29,"column_end":36},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1132},"to":{"krate":1,"index":7379}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":234090,"byte_end":234094,"line_start":1329,"line_end":1329,"column_start":19,"column_end":23},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1251},"to":{"krate":1,"index":2610}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":234278,"byte_end":234282,"line_start":1337,"line_end":1337,"column_start":26,"column_end":30},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1251},"to":{"krate":1,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":234611,"byte_end":234615,"line_start":1349,"line_end":1349,"column_start":35,"column_end":39},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1251},"to":{"krate":1,"index":7448}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":234761,"byte_end":234765,"line_start":1355,"line_end":1355,"column_start":27,"column_end":31},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1251},"to":{"krate":1,"index":7827}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":234812,"byte_end":234816,"line_start":1357,"line_end":1357,"column_start":36,"column_end":40},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1251},"to":{"krate":1,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":234973,"byte_end":234981,"line_start":1363,"line_end":1363,"column_start":22,"column_end":30},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1255},"to":{"krate":1,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":235310,"byte_end":235318,"line_start":1375,"line_end":1375,"column_start":31,"column_end":39},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1255},"to":{"krate":1,"index":7448}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":235460,"byte_end":235468,"line_start":1381,"line_end":1381,"column_start":27,"column_end":35},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1255},"to":{"krate":1,"index":7827}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":235511,"byte_end":235519,"line_start":1383,"line_end":1383,"column_start":36,"column_end":44},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1255},"to":{"krate":1,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":235733,"byte_end":235738,"line_start":1390,"line_end":1390,"column_start":22,"column_end":27},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1258},"to":{"krate":1,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":236071,"byte_end":236076,"line_start":1402,"line_end":1402,"column_start":31,"column_end":36},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1258},"to":{"krate":1,"index":7448}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":236222,"byte_end":236227,"line_start":1408,"line_end":1408,"column_start":27,"column_end":32},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1258},"to":{"krate":1,"index":7827}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":236274,"byte_end":236279,"line_start":1410,"line_end":1410,"column_start":36,"column_end":41},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1258},"to":{"krate":1,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":236500,"byte_end":236511,"line_start":1417,"line_end":1417,"column_start":25,"column_end":36},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1262},"to":{"krate":1,"index":3224}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":236822,"byte_end":236833,"line_start":1431,"line_end":1431,"column_start":25,"column_end":36},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1262},"to":{"krate":1,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":237126,"byte_end":237138,"line_start":1445,"line_end":1445,"column_start":22,"column_end":34},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1268},"to":{"krate":1,"index":2610}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":237357,"byte_end":237369,"line_start":1455,"line_end":1455,"column_start":29,"column_end":41},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1268},"to":{"krate":1,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":237907,"byte_end":237919,"line_start":1479,"line_end":1479,"column_start":27,"column_end":39},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1268},"to":{"krate":1,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":238144,"byte_end":238156,"line_start":1489,"line_end":1489,"column_start":30,"column_end":42},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":1268},"to":{"krate":1,"index":7827}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":238237,"byte_end":238247,"line_start":1496,"line_end":1496,"column_start":22,"column_end":32},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1274},"to":{"krate":1,"index":2610}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":238464,"byte_end":238474,"line_start":1506,"line_end":1506,"column_start":29,"column_end":39},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":1274},"to":{"krate":1,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":239016,"byte_end":239026,"line_start":1530,"line_end":1530,"column_start":30,"column_end":40},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1274},"to":{"krate":1,"index":7827}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":239112,"byte_end":239122,"line_start":1537,"line_end":1537,"column_start":27,"column_end":37},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1274},"to":{"krate":1,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":239339,"byte_end":239358,"line_start":1547,"line_end":1547,"column_start":22,"column_end":41},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":1280},"to":{"krate":1,"index":2610}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":239564,"byte_end":239583,"line_start":1556,"line_end":1556,"column_start":29,"column_end":48},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1280},"to":{"krate":1,"index":7559}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":239955,"byte_end":239974,"line_start":1573,"line_end":1573,"column_start":30,"column_end":49},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1280},"to":{"krate":1,"index":7827}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":240060,"byte_end":240079,"line_start":1580,"line_end":1580,"column_start":27,"column_end":46},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1280},"to":{"krate":1,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":240296,"byte_end":240301,"line_start":1590,"line_end":1590,"column_start":22,"column_end":27},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1285},"to":{"krate":1,"index":2610}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":240494,"byte_end":240499,"line_start":1599,"line_end":1599,"column_start":30,"column_end":35},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":1285},"to":{"krate":1,"index":7827}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":240585,"byte_end":240590,"line_start":1606,"line_end":1606,"column_start":27,"column_end":32},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":1285},"to":{"krate":1,"index":9293}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.1/src/set.rs","byte_start":240814,"byte_end":240819,"line_start":1616,"line_end":1616,"column_start":29,"column_end":34},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":1285},"to":{"krate":1,"index":7559}}]}