{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4","program":"/home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","byteorder","/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=cd21f5e36b15e5b7","-C","extra-filename=-cd21f5e36b15e5b7","--out-dir","/home/pavel/Near/create-near-NFTapp/NFT-project/contract/target/rls/debug/deps","-L","dependency=/home/pavel/Near/create-near-NFTapp/NFT-project/contract/target/rls/debug/deps","--cap-lints","allow","--cfg","byteorder_i128","--error-format=json","--sysroot","/home/pavel/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/pavel/Near/create-near-NFTapp/NFT-project/contract/target/rls/debug/deps/libbyteorder-cd21f5e36b15e5b7.rmeta"},"prelude":{"crate_id":{"name":"byteorder","disambiguator":[16815882823831449055,0]},"crate_root":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src","external_crates":[{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[1482942822998146276,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2034785968469428135,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[12655493918929861395,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13424910470399079611,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8213023121058624814,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[1453466684381863476,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[6350140743624839590,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14051362197407762759,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[9149086998956066884,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[10052156975085119838,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[8205769154475333920,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[6301584694146806614,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[15443445678815071393,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[11686829219546108309,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[1288115582928114942,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[3368074392128242346,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[7654683265571716261,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[14210105045647006011,0]}},{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[1449232587040508138,0]}}],"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":0,"byte_end":104497,"line_start":1,"line_end":3365,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":37},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":2766,"byte_end":2778,"line_start":92,"line_end":92,"column_start":14,"column_end":26},"alias_span":null,"name":"ReadBytesExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":123},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":2780,"byte_end":2793,"line_start":92,"line_end":92,"column_start":28,"column_end":41},"alias_span":null,"name":"WriteBytesExt","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":0,"byte_end":104497,"line_start":1,"line_end":3365,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":197},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":347},{"krate":0,"index":350},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":355},{"krate":0,"index":267},{"krate":0,"index":269},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":366},{"krate":0,"index":369},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":374},{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":309}],"decl_id":null,"docs":"This crate provides convenience methods for encoding and decoding numbers in\neither [big-endian or little-endian order].","sig":null,"attributes":[{"value":"*\nThis crate provides convenience methods for encoding and decoding numbers in\neither [big-endian or little-endian order].\n\nThe organization of the crate is pretty simple. A trait, [`ByteOrder`], specifies\nbyte conversion methods for each type of number in Rust (sans numbers that have\na platform dependent size like `usize` and `isize`). Two types, [`BigEndian`]\nand [`LittleEndian`] implement these methods. Finally, [`ReadBytesExt`] and\n[`WriteBytesExt`] provide convenience methods available to all types that\nimplement [`Read`] and [`Write`].\n\nAn alias, [`NetworkEndian`], for [`BigEndian`] is provided to help improve\ncode clarity.\n\nAn additional alias, [`NativeEndian`], is provided for the endianness of the\nlocal platform. This is convenient when serializing data for use and\nconversions are not desired.\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a [`Read`] type:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\n// Note that we use type parameters to indicate which kind of byte order\n// we want!\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```\n\nWrite unsigned 16 bit little-endian integers to a [`Write`] type:\n\n```rust\nuse byteorder::{LittleEndian, WriteBytesExt};\n\nlet mut wtr = vec![];\nwtr.write_u16::<LittleEndian>(517).unwrap();\nwtr.write_u16::<LittleEndian>(768).unwrap();\nassert_eq!(wtr, vec![5, 2, 0, 3]);\n```\n\n# Optional Features\n\nThis crate optionally provides support for 128 bit values (`i128` and `u128`)\nwhen built with the `i128` feature enabled.\n\nThis crate can also be used without the standard library.\n\n# Alternatives\n\nNote that as of Rust 1.32, the standard numeric types provide built-in methods\nlike `to_le_bytes` and `from_le_bytes`, which support some of the same use\ncases.\n\n[big-endian or little-endian order]: https://en.wikipedia.org/wiki/Endianness\n[`ByteOrder`]: trait.ByteOrder.html\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`ReadBytesExt`]: trait.ReadBytesExt.html\n[`WriteBytesExt`]: trait.WriteBytesExt.html\n[`NetworkEndian`]: type.NetworkEndian.html\n[`NativeEndian`]: type.NativeEndian.html\n[`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html\n[`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html\n*/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":0,"byte_end":2347,"line_start":1,"line_end":68,"column_start":1,"column_end":3}},{"value":"allow(deprecated)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":2404,"byte_end":2425,"line_start":71,"line_end":71,"column_start":1,"column_end":22}},{"value":"deny(missing_docs)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":2427,"byte_end":2449,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":37},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105378,"byte_end":105390,"line_start":28,"line_end":28,"column_start":11,"column_end":23},"name":"ReadBytesExt","qualname":"::io::ReadBytesExt","value":"ReadBytesExt: io::Read","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":57},{"krate":0,"index":60},{"krate":0,"index":63},{"krate":0,"index":66},{"krate":0,"index":69},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":87},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":107},{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":113},{"krate":0,"index":115},{"krate":0,"index":117},{"krate":0,"index":119}],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[{"value":"/ Extends [`Read`] with methods for reading numbers. (For `std::io`.)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":104561,"byte_end":104632,"line_start":6,"line_end":6,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":104633,"byte_end":104636,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Most of the methods defined here have an unconstrained type parameter that","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":104637,"byte_end":104715,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/ must be explicitly instantiated. Typically, it is instantiated with either","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":104716,"byte_end":104794,"line_start":9,"line_end":9,"column_start":1,"column_end":79}},{"value":"/ the [`BigEndian`] or [`LittleEndian`] types defined in this crate.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":104795,"byte_end":104865,"line_start":10,"line_end":10,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":104866,"byte_end":104869,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":104870,"byte_end":104884,"line_start":12,"line_end":12,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":104885,"byte_end":104888,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Read unsigned 16 bit big-endian integers from a [`Read`]:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":104889,"byte_end":104950,"line_start":14,"line_end":14,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":104951,"byte_end":104954,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":104955,"byte_end":104966,"line_start":16,"line_end":16,"column_start":1,"column_end":12}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":104967,"byte_end":104991,"line_start":17,"line_end":17,"column_start":1,"column_end":25}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":104992,"byte_end":105037,"line_start":18,"line_end":18,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105038,"byte_end":105041,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5, 3, 0]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105042,"byte_end":105090,"line_start":20,"line_end":20,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105091,"byte_end":105149,"line_start":21,"line_end":21,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105150,"byte_end":105208,"line_start":22,"line_end":22,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105209,"byte_end":105216,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105217,"byte_end":105220,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [`BigEndian`]: enum.BigEndian.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105221,"byte_end":105259,"line_start":25,"line_end":25,"column_start":1,"column_end":39}},{"value":"/ [`LittleEndian`]: enum.LittleEndian.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105260,"byte_end":105304,"line_start":26,"line_end":26,"column_start":1,"column_end":45}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105305,"byte_end":105367,"line_start":27,"line_end":27,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":106172,"byte_end":106179,"line_start":53,"line_end":53,"column_start":8,"column_end":15},"name":"read_u8","qualname":"::io::ReadBytesExt::read_u8","value":"pub fn read_u8(&mut Self) -> Result<u8>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads an unsigned 8 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 8 bit integer from the underlying reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105407,"byte_end":105470,"line_start":29,"line_end":29,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105475,"byte_end":105478,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Note that since this reads a single byte, no byte order conversions","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105483,"byte_end":105554,"line_start":31,"line_end":31,"column_start":5,"column_end":76}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105559,"byte_end":105605,"line_start":32,"line_end":32,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105610,"byte_end":105613,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105618,"byte_end":105630,"line_start":34,"line_end":34,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105635,"byte_end":105638,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105643,"byte_end":105707,"line_start":36,"line_end":36,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105712,"byte_end":105715,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105720,"byte_end":105812,"line_start":38,"line_end":38,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105817,"byte_end":105820,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105825,"byte_end":105839,"line_start":40,"line_end":40,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105844,"byte_end":105847,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 8 bit integers from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105852,"byte_end":105899,"line_start":42,"line_end":42,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105904,"byte_end":105907,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105912,"byte_end":105923,"line_start":44,"line_end":44,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105928,"byte_end":105952,"line_start":45,"line_end":45,"column_start":5,"column_end":29}},{"value":"/ use byteorder::ReadBytesExt;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105957,"byte_end":105989,"line_start":46,"line_end":46,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105994,"byte_end":105997,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":106002,"byte_end":106044,"line_start":48,"line_end":48,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(2, rdr.read_u8().unwrap());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":106049,"byte_end":106091,"line_start":49,"line_end":49,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(5, rdr.read_u8().unwrap());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":106096,"byte_end":106138,"line_start":50,"line_end":50,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":106143,"byte_end":106150,"line_start":51,"line_end":51,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":106155,"byte_end":106164,"line_start":52,"line_end":52,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":107075,"byte_end":107082,"line_start":83,"line_end":83,"column_start":8,"column_end":15},"name":"read_i8","qualname":"::io::ReadBytesExt::read_i8","value":"pub fn read_i8(&mut Self) -> Result<i8>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a signed 8 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 8 bit integer from the underlying reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":106308,"byte_end":106368,"line_start":59,"line_end":59,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":106373,"byte_end":106376,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ Note that since this reads a single byte, no byte order conversions","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":106381,"byte_end":106452,"line_start":61,"line_end":61,"column_start":5,"column_end":76}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":106457,"byte_end":106503,"line_start":62,"line_end":62,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":106508,"byte_end":106511,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":106516,"byte_end":106528,"line_start":64,"line_end":64,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":106533,"byte_end":106536,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":106541,"byte_end":106605,"line_start":66,"line_end":66,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":106610,"byte_end":106613,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":106618,"byte_end":106710,"line_start":68,"line_end":68,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":106715,"byte_end":106718,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":106723,"byte_end":106737,"line_start":70,"line_end":70,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":106742,"byte_end":106745,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ Read signed 8 bit integers from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":106750,"byte_end":106795,"line_start":72,"line_end":72,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":106800,"byte_end":106803,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":106808,"byte_end":106819,"line_start":74,"line_end":74,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":106824,"byte_end":106848,"line_start":75,"line_end":75,"column_start":5,"column_end":29}},{"value":"/ use byteorder::ReadBytesExt;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":106853,"byte_end":106885,"line_start":76,"line_end":76,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":106890,"byte_end":106893,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x02, 0xfb]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":106898,"byte_end":106946,"line_start":78,"line_end":78,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(2, rdr.read_i8().unwrap());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":106951,"byte_end":106993,"line_start":79,"line_end":79,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(-5, rdr.read_i8().unwrap());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":106998,"byte_end":107041,"line_start":80,"line_end":80,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":107046,"byte_end":107053,"line_start":81,"line_end":81,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":107058,"byte_end":107067,"line_start":82,"line_end":82,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":107911,"byte_end":107919,"line_start":110,"line_end":110,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::io::ReadBytesExt::read_u16","value":"pub fn read_u16<T: ByteOrder>(&mut Self) -> Result<u16>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads an unsigned 16 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 16 bit integer from the underlying reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":107217,"byte_end":107281,"line_start":89,"line_end":89,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":107286,"byte_end":107289,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":107294,"byte_end":107306,"line_start":91,"line_end":91,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":107311,"byte_end":107314,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":107319,"byte_end":107383,"line_start":93,"line_end":93,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":107388,"byte_end":107391,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":107396,"byte_end":107488,"line_start":95,"line_end":95,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":107493,"byte_end":107496,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":107501,"byte_end":107515,"line_start":97,"line_end":97,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":107520,"byte_end":107523,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 16 bit big-endian integers from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":107528,"byte_end":107587,"line_start":99,"line_end":99,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":107592,"byte_end":107595,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":107600,"byte_end":107611,"line_start":101,"line_end":101,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":107616,"byte_end":107640,"line_start":102,"line_end":102,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":107645,"byte_end":107690,"line_start":103,"line_end":103,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":107695,"byte_end":107698,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5, 3, 0]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":107703,"byte_end":107751,"line_start":105,"line_end":105,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":107756,"byte_end":107814,"line_start":106,"line_end":106,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":107819,"byte_end":107877,"line_start":107,"line_end":107,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":107882,"byte_end":107889,"line_start":108,"line_end":108,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":107894,"byte_end":107903,"line_start":109,"line_end":109,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":108776,"byte_end":108784,"line_start":137,"line_end":137,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::io::ReadBytesExt::read_i16","value":"pub fn read_i16<T: ByteOrder>(&mut Self) -> Result<i16>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a signed 16 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 16 bit integer from the underlying reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":108074,"byte_end":108135,"line_start":116,"line_end":116,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":108140,"byte_end":108143,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":108148,"byte_end":108160,"line_start":118,"line_end":118,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":108165,"byte_end":108168,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":108173,"byte_end":108237,"line_start":120,"line_end":120,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":108242,"byte_end":108245,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":108250,"byte_end":108342,"line_start":122,"line_end":122,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":108347,"byte_end":108350,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":108355,"byte_end":108369,"line_start":124,"line_end":124,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":108374,"byte_end":108377,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ Read signed 16 bit big-endian integers from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":108382,"byte_end":108439,"line_start":126,"line_end":126,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":108444,"byte_end":108447,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":108452,"byte_end":108463,"line_start":128,"line_end":128,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":108468,"byte_end":108492,"line_start":129,"line_end":129,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":108497,"byte_end":108542,"line_start":130,"line_end":130,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":108547,"byte_end":108550,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x00, 0xc1, 0xff, 0x7c]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":108555,"byte_end":108615,"line_start":132,"line_end":132,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(193, rdr.read_i16::<BigEndian>().unwrap());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":108620,"byte_end":108678,"line_start":133,"line_end":133,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(-132, rdr.read_i16::<BigEndian>().unwrap());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":108683,"byte_end":108742,"line_start":134,"line_end":134,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":108747,"byte_end":108754,"line_start":135,"line_end":135,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":108759,"byte_end":108768,"line_start":136,"line_end":136,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":109576,"byte_end":109584,"line_start":163,"line_end":163,"column_start":8,"column_end":16},"name":"read_u24","qualname":"::io::ReadBytesExt::read_u24","value":"pub fn read_u24<T: ByteOrder>(&mut Self) -> Result<u32>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads an unsigned 24 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 24 bit integer from the underlying reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":108939,"byte_end":109003,"line_start":143,"line_end":143,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":109008,"byte_end":109011,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":109016,"byte_end":109028,"line_start":145,"line_end":145,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":109033,"byte_end":109036,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":109041,"byte_end":109105,"line_start":147,"line_end":147,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":109110,"byte_end":109113,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":109118,"byte_end":109210,"line_start":149,"line_end":149,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":109215,"byte_end":109218,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":109223,"byte_end":109237,"line_start":151,"line_end":151,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":109242,"byte_end":109245,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 24 bit big-endian integers from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":109250,"byte_end":109309,"line_start":153,"line_end":153,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":109314,"byte_end":109317,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":109322,"byte_end":109333,"line_start":155,"line_end":155,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":109338,"byte_end":109362,"line_start":156,"line_end":156,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":109367,"byte_end":109412,"line_start":157,"line_end":157,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":109417,"byte_end":109420,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x00, 0x01, 0x0b]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":109425,"byte_end":109479,"line_start":159,"line_end":159,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(267, rdr.read_u24::<BigEndian>().unwrap());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":109484,"byte_end":109542,"line_start":160,"line_end":160,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":109547,"byte_end":109554,"line_start":161,"line_end":161,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":109559,"byte_end":109568,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":110374,"byte_end":110382,"line_start":189,"line_end":189,"column_start":8,"column_end":16},"name":"read_i24","qualname":"::io::ReadBytesExt::read_i24","value":"pub fn read_i24<T: ByteOrder>(&mut Self) -> Result<i32>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a signed 24 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 24 bit integer from the underlying reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":109739,"byte_end":109800,"line_start":169,"line_end":169,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":109805,"byte_end":109808,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":109813,"byte_end":109825,"line_start":171,"line_end":171,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":109830,"byte_end":109833,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":109838,"byte_end":109902,"line_start":173,"line_end":173,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":109907,"byte_end":109910,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":109915,"byte_end":110007,"line_start":175,"line_end":175,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":110012,"byte_end":110015,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":110020,"byte_end":110034,"line_start":177,"line_end":177,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":110039,"byte_end":110042,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ Read signed 24 bit big-endian integers from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":110047,"byte_end":110104,"line_start":179,"line_end":179,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":110109,"byte_end":110112,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":110117,"byte_end":110128,"line_start":181,"line_end":181,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":110133,"byte_end":110157,"line_start":182,"line_end":182,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":110162,"byte_end":110207,"line_start":183,"line_end":183,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":110212,"byte_end":110215,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0xff, 0x7a, 0x33]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":110220,"byte_end":110274,"line_start":185,"line_end":185,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(-34253, rdr.read_i24::<BigEndian>().unwrap());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":110279,"byte_end":110340,"line_start":186,"line_end":186,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":110345,"byte_end":110352,"line_start":187,"line_end":187,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":110357,"byte_end":110366,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":111180,"byte_end":111188,"line_start":215,"line_end":215,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::io::ReadBytesExt::read_u32","value":"pub fn read_u32<T: ByteOrder>(&mut Self) -> Result<u32>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads an unsigned 32 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 32 bit integer from the underlying reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":110537,"byte_end":110601,"line_start":195,"line_end":195,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":110606,"byte_end":110609,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":110614,"byte_end":110626,"line_start":197,"line_end":197,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":110631,"byte_end":110634,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":110639,"byte_end":110703,"line_start":199,"line_end":199,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":110708,"byte_end":110711,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":110716,"byte_end":110808,"line_start":201,"line_end":201,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":110813,"byte_end":110816,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":110821,"byte_end":110835,"line_start":203,"line_end":203,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":110840,"byte_end":110843,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 32 bit big-endian integers from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":110848,"byte_end":110907,"line_start":205,"line_end":205,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":110912,"byte_end":110915,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":110920,"byte_end":110931,"line_start":207,"line_end":207,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":110936,"byte_end":110960,"line_start":208,"line_end":208,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":110965,"byte_end":111010,"line_start":209,"line_end":209,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":111015,"byte_end":111018,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x00, 0x00, 0x01, 0x0b]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":111023,"byte_end":111083,"line_start":211,"line_end":211,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(267, rdr.read_u32::<BigEndian>().unwrap());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":111088,"byte_end":111146,"line_start":212,"line_end":212,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":111151,"byte_end":111158,"line_start":213,"line_end":213,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":111163,"byte_end":111172,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":111984,"byte_end":111992,"line_start":241,"line_end":241,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::io::ReadBytesExt::read_i32","value":"pub fn read_i32<T: ByteOrder>(&mut Self) -> Result<i32>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a signed 32 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 32 bit integer from the underlying reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":111343,"byte_end":111404,"line_start":221,"line_end":221,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":111409,"byte_end":111412,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":111417,"byte_end":111429,"line_start":223,"line_end":223,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":111434,"byte_end":111437,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":111442,"byte_end":111506,"line_start":225,"line_end":225,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":111511,"byte_end":111514,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":111519,"byte_end":111611,"line_start":227,"line_end":227,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":111616,"byte_end":111619,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":111624,"byte_end":111638,"line_start":229,"line_end":229,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":111643,"byte_end":111646,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ Read signed 32 bit big-endian integers from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":111651,"byte_end":111708,"line_start":231,"line_end":231,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":111713,"byte_end":111716,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":111721,"byte_end":111732,"line_start":233,"line_end":233,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":111737,"byte_end":111761,"line_start":234,"line_end":234,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":111766,"byte_end":111811,"line_start":235,"line_end":235,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":111816,"byte_end":111819,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0xff, 0xff, 0x7a, 0x33]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":111824,"byte_end":111884,"line_start":237,"line_end":237,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(-34253, rdr.read_i32::<BigEndian>().unwrap());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":111889,"byte_end":111950,"line_start":238,"line_end":238,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":111955,"byte_end":111962,"line_start":239,"line_end":239,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":111967,"byte_end":111976,"line_start":240,"line_end":240,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":112814,"byte_end":112822,"line_start":267,"line_end":267,"column_start":8,"column_end":16},"name":"read_u48","qualname":"::io::ReadBytesExt::read_u48","value":"pub fn read_u48<T: ByteOrder>(&mut Self) -> Result<u64>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads an unsigned 48 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 48 bit integer from the underlying reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":112147,"byte_end":112211,"line_start":247,"line_end":247,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":112216,"byte_end":112219,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":112224,"byte_end":112236,"line_start":249,"line_end":249,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":112241,"byte_end":112244,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":112249,"byte_end":112313,"line_start":251,"line_end":251,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":112318,"byte_end":112321,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":112326,"byte_end":112418,"line_start":253,"line_end":253,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":112423,"byte_end":112426,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":112431,"byte_end":112445,"line_start":255,"line_end":255,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":112450,"byte_end":112453,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 48 bit big-endian integers from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":112458,"byte_end":112517,"line_start":257,"line_end":257,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":112522,"byte_end":112525,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":112530,"byte_end":112541,"line_start":259,"line_end":259,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":112546,"byte_end":112570,"line_start":260,"line_end":260,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":112575,"byte_end":112620,"line_start":261,"line_end":261,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":112625,"byte_end":112628,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0xb6, 0x71, 0x6b, 0xdc, 0x2b, 0x31]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":112633,"byte_end":112705,"line_start":263,"line_end":263,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(200598257150769, rdr.read_u48::<BigEndian>().unwrap());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":112710,"byte_end":112780,"line_start":264,"line_end":264,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":112785,"byte_end":112792,"line_start":265,"line_end":265,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":112797,"byte_end":112806,"line_start":266,"line_end":266,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":113640,"byte_end":113648,"line_start":293,"line_end":293,"column_start":8,"column_end":16},"name":"read_i48","qualname":"::io::ReadBytesExt::read_i48","value":"pub fn read_i48<T: ByteOrder>(&mut Self) -> Result<i64>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a signed 48 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 48 bit integer from the underlying reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":112977,"byte_end":113038,"line_start":273,"line_end":273,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":113043,"byte_end":113046,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":113051,"byte_end":113063,"line_start":275,"line_end":275,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":113068,"byte_end":113071,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":113076,"byte_end":113140,"line_start":277,"line_end":277,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":113145,"byte_end":113148,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":113153,"byte_end":113245,"line_start":279,"line_end":279,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":113250,"byte_end":113253,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":113258,"byte_end":113272,"line_start":281,"line_end":281,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":113277,"byte_end":113280,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ Read signed 48 bit big-endian integers from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":113285,"byte_end":113342,"line_start":283,"line_end":283,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":113347,"byte_end":113350,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":113355,"byte_end":113366,"line_start":285,"line_end":285,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":113371,"byte_end":113395,"line_start":286,"line_end":286,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":113400,"byte_end":113445,"line_start":287,"line_end":287,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":113450,"byte_end":113453,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x9d, 0x71, 0xab, 0xe7, 0x97, 0x8f]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":113458,"byte_end":113530,"line_start":289,"line_end":289,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(-108363435763825, rdr.read_i48::<BigEndian>().unwrap());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":113535,"byte_end":113606,"line_start":290,"line_end":290,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":113611,"byte_end":113618,"line_start":291,"line_end":291,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":113623,"byte_end":113632,"line_start":292,"line_end":292,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":114484,"byte_end":114492,"line_start":319,"line_end":319,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::io::ReadBytesExt::read_u64","value":"pub fn read_u64<T: ByteOrder>(&mut Self) -> Result<u64>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads an unsigned 64 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 64 bit integer from the underlying reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":113803,"byte_end":113867,"line_start":299,"line_end":299,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":113872,"byte_end":113875,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":113880,"byte_end":113892,"line_start":301,"line_end":301,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":113897,"byte_end":113900,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":113905,"byte_end":113969,"line_start":303,"line_end":303,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":113974,"byte_end":113977,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":113982,"byte_end":114074,"line_start":305,"line_end":305,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":114079,"byte_end":114082,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":114087,"byte_end":114101,"line_start":307,"line_end":307,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":114106,"byte_end":114109,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ Read an unsigned 64 bit big-endian integer from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":114114,"byte_end":114175,"line_start":309,"line_end":309,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":114180,"byte_end":114183,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":114188,"byte_end":114199,"line_start":311,"line_end":311,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":114204,"byte_end":114228,"line_start":312,"line_end":312,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":114233,"byte_end":114278,"line_start":313,"line_end":313,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":114283,"byte_end":114286,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":114291,"byte_end":114375,"line_start":315,"line_end":315,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(918733457491587, rdr.read_u64::<BigEndian>().unwrap());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":114380,"byte_end":114450,"line_start":316,"line_end":316,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":114455,"byte_end":114462,"line_start":317,"line_end":317,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":114467,"byte_end":114476,"line_start":318,"line_end":318,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":115302,"byte_end":115310,"line_start":345,"line_end":345,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::io::ReadBytesExt::read_i64","value":"pub fn read_i64<T: ByteOrder>(&mut Self) -> Result<i64>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a signed 64 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 64 bit integer from the underlying reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":114647,"byte_end":114708,"line_start":325,"line_end":325,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":114713,"byte_end":114716,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":114721,"byte_end":114733,"line_start":327,"line_end":327,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":114738,"byte_end":114741,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":114746,"byte_end":114810,"line_start":329,"line_end":329,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":114815,"byte_end":114818,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":114823,"byte_end":114915,"line_start":331,"line_end":331,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":114920,"byte_end":114923,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":114928,"byte_end":114942,"line_start":333,"line_end":333,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":114947,"byte_end":114950,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ Read a signed 64 bit big-endian integer from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":114955,"byte_end":115013,"line_start":335,"line_end":335,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":115018,"byte_end":115021,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":115026,"byte_end":115037,"line_start":337,"line_end":337,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":115042,"byte_end":115066,"line_start":338,"line_end":338,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":115071,"byte_end":115116,"line_start":339,"line_end":339,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":115121,"byte_end":115124,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":115129,"byte_end":115192,"line_start":341,"line_end":341,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(i64::min_value(), rdr.read_i64::<BigEndian>().unwrap());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":115197,"byte_end":115268,"line_start":342,"line_end":342,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":115273,"byte_end":115280,"line_start":343,"line_end":343,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":115285,"byte_end":115294,"line_start":344,"line_end":344,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":116278,"byte_end":116287,"line_start":375,"line_end":375,"column_start":8,"column_end":17},"name":"read_u128","qualname":"::io::ReadBytesExt::read_u128","value":"pub fn read_u128<T: ByteOrder>(&mut Self) -> Result<u128>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads an unsigned 128 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 128 bit integer from the underlying reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":115465,"byte_end":115530,"line_start":351,"line_end":351,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":115535,"byte_end":115538,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":115543,"byte_end":115555,"line_start":353,"line_end":353,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":115560,"byte_end":115563,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":115568,"byte_end":115632,"line_start":355,"line_end":355,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":115637,"byte_end":115640,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":115645,"byte_end":115737,"line_start":357,"line_end":357,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":115742,"byte_end":115745,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":115750,"byte_end":115764,"line_start":359,"line_end":359,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":115769,"byte_end":115772,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ Read an unsigned 128 bit big-endian integer from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":115777,"byte_end":115839,"line_start":361,"line_end":361,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":115844,"byte_end":115847,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":115852,"byte_end":115863,"line_start":363,"line_end":363,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":115868,"byte_end":115892,"line_start":364,"line_end":364,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":115897,"byte_end":115942,"line_start":365,"line_end":365,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":115947,"byte_end":115950,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":115955,"byte_end":115990,"line_start":367,"line_end":367,"column_start":5,"column_end":40}},{"value":"/     0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":115995,"byte_end":116050,"line_start":368,"line_end":368,"column_start":5,"column_end":60}},{"value":"/     0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":116055,"byte_end":116109,"line_start":369,"line_end":369,"column_start":5,"column_end":59}},{"value":"/ ]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":116114,"byte_end":116121,"line_start":370,"line_end":370,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(16947640962301618749969007319746179, rdr.read_u128::<BigEndian>().unwrap());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":116126,"byte_end":116217,"line_start":371,"line_end":371,"column_start":5,"column_end":96}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":116222,"byte_end":116229,"line_start":372,"line_end":372,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":116234,"byte_end":116256,"line_start":373,"line_end":373,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":116261,"byte_end":116270,"line_start":374,"line_end":374,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":117155,"byte_end":117164,"line_start":402,"line_end":402,"column_start":8,"column_end":17},"name":"read_i128","qualname":"::io::ReadBytesExt::read_i128","value":"pub fn read_i128<T: ByteOrder>(&mut Self) -> Result<i128>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a signed 128 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 128 bit integer from the underlying reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":116445,"byte_end":116507,"line_start":381,"line_end":381,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":116512,"byte_end":116515,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":116520,"byte_end":116532,"line_start":383,"line_end":383,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":116537,"byte_end":116540,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":116545,"byte_end":116609,"line_start":385,"line_end":385,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":116614,"byte_end":116617,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":116622,"byte_end":116714,"line_start":387,"line_end":387,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":116719,"byte_end":116722,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":116727,"byte_end":116741,"line_start":389,"line_end":389,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":116746,"byte_end":116749,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ Read a signed 128 bit big-endian integer from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":116754,"byte_end":116813,"line_start":391,"line_end":391,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":116818,"byte_end":116821,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":116826,"byte_end":116837,"line_start":393,"line_end":393,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":116842,"byte_end":116866,"line_start":394,"line_end":394,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":116871,"byte_end":116916,"line_start":395,"line_end":395,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":116921,"byte_end":116924,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":116929,"byte_end":117016,"line_start":397,"line_end":397,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(i128::min_value(), rdr.read_i128::<BigEndian>().unwrap());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":117021,"byte_end":117094,"line_start":398,"line_end":398,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":117099,"byte_end":117106,"line_start":399,"line_end":399,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":117111,"byte_end":117133,"line_start":400,"line_end":400,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":117138,"byte_end":117147,"line_start":401,"line_end":401,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":117956,"byte_end":117965,"line_start":427,"line_end":427,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::io::ReadBytesExt::read_uint","value":"pub fn read_uint<T: ByteOrder>(&mut Self, usize) -> Result<u64>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned n-bytes integer from the underlying reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":117322,"byte_end":117387,"line_start":408,"line_end":408,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":117392,"byte_end":117395,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":117400,"byte_end":117412,"line_start":410,"line_end":410,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":117417,"byte_end":117420,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":117425,"byte_end":117489,"line_start":412,"line_end":412,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":117494,"byte_end":117497,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":117502,"byte_end":117594,"line_start":414,"line_end":414,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":117599,"byte_end":117602,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":117607,"byte_end":117621,"line_start":416,"line_end":416,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":117626,"byte_end":117629,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ Read an unsigned n-byte big-endian integer from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":117634,"byte_end":117695,"line_start":418,"line_end":418,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":117700,"byte_end":117703,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":117708,"byte_end":117719,"line_start":420,"line_end":420,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":117724,"byte_end":117748,"line_start":421,"line_end":421,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":117753,"byte_end":117798,"line_start":422,"line_end":422,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":117803,"byte_end":117806,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x80, 0x74, 0xfa]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":117811,"byte_end":117865,"line_start":424,"line_end":424,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(8418554, rdr.read_uint::<BigEndian>(3).unwrap());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":117870,"byte_end":117934,"line_start":425,"line_end":425,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":117939,"byte_end":117948,"line_start":426,"line_end":426,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":118795,"byte_end":118803,"line_start":452,"line_end":452,"column_start":8,"column_end":16},"name":"read_int","qualname":"::io::ReadBytesExt::read_int","value":"pub fn read_int<T: ByteOrder>(&mut Self, usize) -> Result<i64>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed n-bytes integer from the underlying reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":118164,"byte_end":118226,"line_start":433,"line_end":433,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":118231,"byte_end":118234,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":118239,"byte_end":118251,"line_start":435,"line_end":435,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":118256,"byte_end":118259,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":118264,"byte_end":118328,"line_start":437,"line_end":437,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":118333,"byte_end":118336,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":118341,"byte_end":118433,"line_start":439,"line_end":439,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":118438,"byte_end":118441,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":118446,"byte_end":118460,"line_start":441,"line_end":441,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":118465,"byte_end":118468,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ Read an unsigned n-byte big-endian integer from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":118473,"byte_end":118534,"line_start":443,"line_end":443,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":118539,"byte_end":118542,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":118547,"byte_end":118558,"line_start":445,"line_end":445,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":118563,"byte_end":118587,"line_start":446,"line_end":446,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":118592,"byte_end":118637,"line_start":447,"line_end":447,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":118642,"byte_end":118645,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0xc1, 0xff, 0x7c]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":118650,"byte_end":118704,"line_start":449,"line_end":449,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(-4063364, rdr.read_int::<BigEndian>(3).unwrap());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":118709,"byte_end":118773,"line_start":450,"line_end":450,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":118778,"byte_end":118787,"line_start":451,"line_end":451,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":119115,"byte_end":119127,"line_start":461,"line_end":461,"column_start":8,"column_end":20},"name":"read_uint128","qualname":"::io::ReadBytesExt::read_uint128","value":"pub fn read_uint128<T: ByteOrder>(&mut Self, usize) -> Result<u128>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from the underlying reader.\n","sig":null,"attributes":[{"value":"/ Reads an unsigned n-bytes integer from the underlying reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":119001,"byte_end":119066,"line_start":458,"line_end":458,"column_start":5,"column_end":70}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":119071,"byte_end":119093,"line_start":459,"line_end":459,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":119098,"byte_end":119107,"line_start":460,"line_end":460,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":119442,"byte_end":119453,"line_start":470,"line_end":470,"column_start":8,"column_end":19},"name":"read_int128","qualname":"::io::ReadBytesExt::read_int128","value":"pub fn read_int128<T: ByteOrder>(&mut Self, usize) -> Result<i128>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from the underlying reader.\n","sig":null,"attributes":[{"value":"/ Reads a signed n-bytes integer from the underlying reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":119331,"byte_end":119393,"line_start":467,"line_end":467,"column_start":5,"column_end":67}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":119398,"byte_end":119420,"line_start":468,"line_end":468,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":119425,"byte_end":119434,"line_start":469,"line_end":469,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":120420,"byte_end":120428,"line_start":501,"line_end":501,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::io::ReadBytesExt::read_f32","value":"pub fn read_f32<T: ByteOrder>(&mut Self) -> Result<f32>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a IEEE754 single-precision (4 bytes) floating point number from\n the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a IEEE754 single-precision (4 bytes) floating point number from","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":119656,"byte_end":119729,"line_start":476,"line_end":476,"column_start":5,"column_end":78}},{"value":"/ the underlying reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":119734,"byte_end":119760,"line_start":477,"line_end":477,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":119765,"byte_end":119768,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":119773,"byte_end":119785,"line_start":479,"line_end":479,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":119790,"byte_end":119793,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":119798,"byte_end":119862,"line_start":481,"line_end":481,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":119867,"byte_end":119870,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":119875,"byte_end":119967,"line_start":483,"line_end":483,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":119972,"byte_end":119975,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":119980,"byte_end":119994,"line_start":485,"line_end":485,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":119999,"byte_end":120002,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ Read a big-endian single-precision floating point number from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":120007,"byte_end":120082,"line_start":487,"line_end":487,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":120087,"byte_end":120090,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":120095,"byte_end":120106,"line_start":489,"line_end":489,"column_start":5,"column_end":16}},{"value":"/ use std::f32;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":120111,"byte_end":120128,"line_start":490,"line_end":490,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":120133,"byte_end":120157,"line_start":491,"line_end":491,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":120162,"byte_end":120165,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":120170,"byte_end":120215,"line_start":493,"line_end":493,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":120220,"byte_end":120223,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":120228,"byte_end":120263,"line_start":495,"line_end":495,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x49, 0x0f, 0xdb,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":120268,"byte_end":120299,"line_start":496,"line_end":496,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":120304,"byte_end":120311,"line_start":497,"line_end":497,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(f32::consts::PI, rdr.read_f32::<BigEndian>().unwrap());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":120316,"byte_end":120386,"line_start":498,"line_end":498,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":120391,"byte_end":120398,"line_start":499,"line_end":499,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":120403,"byte_end":120412,"line_start":500,"line_end":500,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":121371,"byte_end":121379,"line_start":532,"line_end":532,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::io::ReadBytesExt::read_f64","value":"pub fn read_f64<T: ByteOrder>(&mut Self) -> Result<f64>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a IEEE754 double-precision (8 bytes) floating point number from\n the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a IEEE754 double-precision (8 bytes) floating point number from","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":120583,"byte_end":120656,"line_start":507,"line_end":507,"column_start":5,"column_end":78}},{"value":"/ the underlying reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":120661,"byte_end":120687,"line_start":508,"line_end":508,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":120692,"byte_end":120695,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":120700,"byte_end":120712,"line_start":510,"line_end":510,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":120717,"byte_end":120720,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":120725,"byte_end":120789,"line_start":512,"line_end":512,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":120794,"byte_end":120797,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":120802,"byte_end":120894,"line_start":514,"line_end":514,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":120899,"byte_end":120902,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":120907,"byte_end":120921,"line_start":516,"line_end":516,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":120926,"byte_end":120929,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ Read a big-endian double-precision floating point number from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":120934,"byte_end":121009,"line_start":518,"line_end":518,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":121014,"byte_end":121017,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":121022,"byte_end":121033,"line_start":520,"line_end":520,"column_start":5,"column_end":16}},{"value":"/ use std::f64;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":121038,"byte_end":121055,"line_start":521,"line_end":521,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":121060,"byte_end":121084,"line_start":522,"line_end":522,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":121089,"byte_end":121092,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":121097,"byte_end":121142,"line_start":524,"line_end":524,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":121147,"byte_end":121150,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":121155,"byte_end":121190,"line_start":526,"line_end":526,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":121195,"byte_end":121250,"line_start":527,"line_end":527,"column_start":5,"column_end":60}},{"value":"/ ]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":121255,"byte_end":121262,"line_start":528,"line_end":528,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(f64::consts::PI, rdr.read_f64::<BigEndian>().unwrap());","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":121267,"byte_end":121337,"line_start":529,"line_end":529,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":121342,"byte_end":121349,"line_start":530,"line_end":530,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":121354,"byte_end":121363,"line_start":531,"line_end":531,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":122420,"byte_end":122433,"line_start":564,"line_end":564,"column_start":8,"column_end":21},"name":"read_u16_into","qualname":"::io::ReadBytesExt::read_u16_into","value":"pub fn read_u16_into<T: ByteOrder>(&mut Self, &mut [u16]) -> Result<()>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a sequence of unsigned 16 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of unsigned 16 bit integers from the underlying","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":121534,"byte_end":121602,"line_start":538,"line_end":538,"column_start":5,"column_end":73}},{"value":"/ reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":121607,"byte_end":121618,"line_start":539,"line_end":539,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":121623,"byte_end":121626,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":121631,"byte_end":121704,"line_start":541,"line_end":541,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":121709,"byte_end":121776,"line_start":542,"line_end":542,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":121781,"byte_end":121784,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":121789,"byte_end":121801,"line_start":544,"line_end":544,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":121806,"byte_end":121809,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":121814,"byte_end":121878,"line_start":546,"line_end":546,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":121883,"byte_end":121886,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":121891,"byte_end":121983,"line_start":548,"line_end":548,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":121988,"byte_end":121991,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":121996,"byte_end":122010,"line_start":550,"line_end":550,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":122015,"byte_end":122018,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of unsigned 16 bit big-endian integers from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":122023,"byte_end":122096,"line_start":552,"line_end":552,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":122101,"byte_end":122104,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":122109,"byte_end":122120,"line_start":554,"line_end":554,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":122125,"byte_end":122149,"line_start":555,"line_end":555,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":122154,"byte_end":122199,"line_start":556,"line_end":556,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":122204,"byte_end":122207,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5, 3, 0]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":122212,"byte_end":122260,"line_start":558,"line_end":558,"column_start":5,"column_end":53}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":122265,"byte_end":122290,"line_start":559,"line_end":559,"column_start":5,"column_end":30}},{"value":"/ rdr.read_u16_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":122295,"byte_end":122349,"line_start":560,"line_end":560,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":122354,"byte_end":122386,"line_start":561,"line_end":561,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":122391,"byte_end":122398,"line_start":562,"line_end":562,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":122403,"byte_end":122412,"line_start":563,"line_end":563,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":123563,"byte_end":123576,"line_start":599,"line_end":599,"column_start":8,"column_end":21},"name":"read_u32_into","qualname":"::io::ReadBytesExt::read_u32_into","value":"pub fn read_u32_into<T: ByteOrder>(&mut Self, &mut [u32]) -> Result<()>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a sequence of unsigned 32 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of unsigned 32 bit integers from the underlying","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":122665,"byte_end":122733,"line_start":573,"line_end":573,"column_start":5,"column_end":73}},{"value":"/ reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":122738,"byte_end":122749,"line_start":574,"line_end":574,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":122754,"byte_end":122757,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":122762,"byte_end":122835,"line_start":576,"line_end":576,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":122840,"byte_end":122907,"line_start":577,"line_end":577,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":122912,"byte_end":122915,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":122920,"byte_end":122932,"line_start":579,"line_end":579,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":122937,"byte_end":122940,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":122945,"byte_end":123009,"line_start":581,"line_end":581,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":123014,"byte_end":123017,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":123022,"byte_end":123114,"line_start":583,"line_end":583,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":123119,"byte_end":123122,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":123127,"byte_end":123141,"line_start":585,"line_end":585,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":123146,"byte_end":123149,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of unsigned 32 bit big-endian integers from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":123154,"byte_end":123227,"line_start":587,"line_end":587,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":123232,"byte_end":123235,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":123240,"byte_end":123251,"line_start":589,"line_end":589,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":123256,"byte_end":123280,"line_start":590,"line_end":590,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":123285,"byte_end":123330,"line_start":591,"line_end":591,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":123335,"byte_end":123338,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":123343,"byte_end":123403,"line_start":593,"line_end":593,"column_start":5,"column_end":65}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":123408,"byte_end":123433,"line_start":594,"line_end":594,"column_start":5,"column_end":30}},{"value":"/ rdr.read_u32_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":123438,"byte_end":123492,"line_start":595,"line_end":595,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":123497,"byte_end":123529,"line_start":596,"line_end":596,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":123534,"byte_end":123541,"line_start":597,"line_end":597,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":123546,"byte_end":123555,"line_start":598,"line_end":598,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":124765,"byte_end":124778,"line_start":637,"line_end":637,"column_start":8,"column_end":21},"name":"read_u64_into","qualname":"::io::ReadBytesExt::read_u64_into","value":"pub fn read_u64_into<T: ByteOrder>(&mut Self, &mut [u64]) -> Result<()>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a sequence of unsigned 64 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of unsigned 64 bit integers from the underlying","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":123808,"byte_end":123876,"line_start":608,"line_end":608,"column_start":5,"column_end":73}},{"value":"/ reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":123881,"byte_end":123892,"line_start":609,"line_end":609,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":123897,"byte_end":123900,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":123905,"byte_end":123978,"line_start":611,"line_end":611,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":123983,"byte_end":124050,"line_start":612,"line_end":612,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":124055,"byte_end":124058,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":124063,"byte_end":124075,"line_start":614,"line_end":614,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":124080,"byte_end":124083,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":124088,"byte_end":124152,"line_start":616,"line_end":616,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":124157,"byte_end":124160,"line_start":617,"line_end":617,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":124165,"byte_end":124257,"line_start":618,"line_end":618,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":124262,"byte_end":124265,"line_start":619,"line_end":619,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":124270,"byte_end":124284,"line_start":620,"line_end":620,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":124289,"byte_end":124292,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of unsigned 64 bit big-endian integers from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":124297,"byte_end":124370,"line_start":622,"line_end":622,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":124375,"byte_end":124378,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":124383,"byte_end":124394,"line_start":624,"line_end":624,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":124399,"byte_end":124423,"line_start":625,"line_end":625,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":124428,"byte_end":124473,"line_start":626,"line_end":626,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":124478,"byte_end":124481,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":124486,"byte_end":124521,"line_start":628,"line_end":628,"column_start":5,"column_end":40}},{"value":"/     0, 0, 0, 0, 0, 0, 2, 5,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":124526,"byte_end":124557,"line_start":629,"line_end":629,"column_start":5,"column_end":36}},{"value":"/     0, 0, 0, 0, 0, 0, 3, 0,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":124562,"byte_end":124593,"line_start":630,"line_end":630,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":124598,"byte_end":124605,"line_start":631,"line_end":631,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":124610,"byte_end":124635,"line_start":632,"line_end":632,"column_start":5,"column_end":30}},{"value":"/ rdr.read_u64_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":124640,"byte_end":124694,"line_start":633,"line_end":633,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":124699,"byte_end":124731,"line_start":634,"line_end":634,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":124736,"byte_end":124743,"line_start":635,"line_end":635,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":124748,"byte_end":124757,"line_start":636,"line_end":636,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":126045,"byte_end":126059,"line_start":676,"line_end":676,"column_start":8,"column_end":22},"name":"read_u128_into","qualname":"::io::ReadBytesExt::read_u128_into","value":"pub fn read_u128_into<T: ByteOrder>(&mut Self, &mut [u128]) -> Result<()>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a sequence of unsigned 128 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of unsigned 128 bit integers from the underlying","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":125010,"byte_end":125079,"line_start":646,"line_end":646,"column_start":5,"column_end":74}},{"value":"/ reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":125084,"byte_end":125095,"line_start":647,"line_end":647,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":125100,"byte_end":125103,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":125108,"byte_end":125181,"line_start":649,"line_end":649,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":125186,"byte_end":125253,"line_start":650,"line_end":650,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":125258,"byte_end":125261,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":125266,"byte_end":125278,"line_start":652,"line_end":652,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":125283,"byte_end":125286,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":125291,"byte_end":125355,"line_start":654,"line_end":654,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":125360,"byte_end":125363,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":125368,"byte_end":125460,"line_start":656,"line_end":656,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":125465,"byte_end":125468,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":125473,"byte_end":125487,"line_start":658,"line_end":658,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":125492,"byte_end":125495,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of unsigned 128 bit big-endian integers from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":125500,"byte_end":125574,"line_start":660,"line_end":660,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":125579,"byte_end":125582,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":125587,"byte_end":125598,"line_start":662,"line_end":662,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":125603,"byte_end":125627,"line_start":663,"line_end":663,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":125632,"byte_end":125677,"line_start":664,"line_end":664,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":125682,"byte_end":125685,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":125690,"byte_end":125725,"line_start":666,"line_end":666,"column_start":5,"column_end":40}},{"value":"/     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":125730,"byte_end":125785,"line_start":667,"line_end":667,"column_start":5,"column_end":60}},{"value":"/     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":125790,"byte_end":125845,"line_start":668,"line_end":668,"column_start":5,"column_end":60}},{"value":"/ ]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":125850,"byte_end":125857,"line_start":669,"line_end":669,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":125862,"byte_end":125887,"line_start":670,"line_end":670,"column_start":5,"column_end":30}},{"value":"/ rdr.read_u128_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":125892,"byte_end":125947,"line_start":671,"line_end":671,"column_start":5,"column_end":60}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":125952,"byte_end":125984,"line_start":672,"line_end":672,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":125989,"byte_end":125996,"line_start":673,"line_end":673,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":126001,"byte_end":126023,"line_start":674,"line_end":674,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":126028,"byte_end":126037,"line_start":675,"line_end":675,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":127519,"byte_end":127531,"line_start":719,"line_end":719,"column_start":8,"column_end":20},"name":"read_i8_into","qualname":"::io::ReadBytesExt::read_i8_into","value":"pub fn read_i8_into(&mut Self, &mut [i8]) -> Result<()>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a sequence of signed 8 bit integers from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of signed 8 bit integers from the underlying reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":126316,"byte_end":126389,"line_start":688,"line_end":688,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":126394,"byte_end":126397,"line_start":689,"line_end":689,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":126402,"byte_end":126475,"line_start":690,"line_end":690,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":126480,"byte_end":126547,"line_start":691,"line_end":691,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":126552,"byte_end":126555,"line_start":692,"line_end":692,"column_start":5,"column_end":8}},{"value":"/ Note that since each `i8` is a single byte, no byte order conversions","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":126560,"byte_end":126633,"line_start":693,"line_end":693,"column_start":5,"column_end":78}},{"value":"/ are used. This method is included because it provides a safe, simple","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":126638,"byte_end":126710,"line_start":694,"line_end":694,"column_start":5,"column_end":77}},{"value":"/ way for the caller to read into a `&mut [i8]` buffer. (Without this","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":126715,"byte_end":126786,"line_start":695,"line_end":695,"column_start":5,"column_end":76}},{"value":"/ method, the caller would have to either use `unsafe` code or convert","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":126791,"byte_end":126863,"line_start":696,"line_end":696,"column_start":5,"column_end":77}},{"value":"/ each byte to `i8` individually.)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":126868,"byte_end":126904,"line_start":697,"line_end":697,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":126909,"byte_end":126912,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":126917,"byte_end":126929,"line_start":699,"line_end":699,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":126934,"byte_end":126937,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":126942,"byte_end":127006,"line_start":701,"line_end":701,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":127011,"byte_end":127014,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":127019,"byte_end":127111,"line_start":703,"line_end":703,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":127116,"byte_end":127119,"line_start":704,"line_end":704,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":127124,"byte_end":127138,"line_start":705,"line_end":705,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":127143,"byte_end":127146,"line_start":706,"line_end":706,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of signed 8 bit integers from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":127151,"byte_end":127210,"line_start":707,"line_end":707,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":127215,"byte_end":127218,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":127223,"byte_end":127234,"line_start":709,"line_end":709,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":127239,"byte_end":127263,"line_start":710,"line_end":710,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":127268,"byte_end":127313,"line_start":711,"line_end":711,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":127318,"byte_end":127321,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![2, 251, 3]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":127326,"byte_end":127373,"line_start":713,"line_end":713,"column_start":5,"column_end":52}},{"value":"/ let mut dst = [0; 3];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":127378,"byte_end":127403,"line_start":714,"line_end":714,"column_start":5,"column_end":30}},{"value":"/ rdr.read_i8_into(&mut dst).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":127408,"byte_end":127448,"line_start":715,"line_end":715,"column_start":5,"column_end":45}},{"value":"/ assert_eq!([2, -5, 3], dst);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":127453,"byte_end":127485,"line_start":716,"line_end":716,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":127490,"byte_end":127497,"line_start":717,"line_end":717,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":127502,"byte_end":127511,"line_start":718,"line_end":718,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":128548,"byte_end":128561,"line_start":750,"line_end":750,"column_start":8,"column_end":21},"name":"read_i16_into","qualname":"::io::ReadBytesExt::read_i16_into","value":"pub fn read_i16_into<T: ByteOrder>(&mut Self, &mut [i16]) -> Result<()>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a sequence of signed 16 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of signed 16 bit integers from the underlying","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":127666,"byte_end":127732,"line_start":724,"line_end":724,"column_start":5,"column_end":71}},{"value":"/ reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":127737,"byte_end":127748,"line_start":725,"line_end":725,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":127753,"byte_end":127756,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":127761,"byte_end":127834,"line_start":727,"line_end":727,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":127839,"byte_end":127906,"line_start":728,"line_end":728,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":127911,"byte_end":127914,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":127919,"byte_end":127931,"line_start":730,"line_end":730,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":127936,"byte_end":127939,"line_start":731,"line_end":731,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":127944,"byte_end":128008,"line_start":732,"line_end":732,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":128013,"byte_end":128016,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":128021,"byte_end":128113,"line_start":734,"line_end":734,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":128118,"byte_end":128121,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":128126,"byte_end":128140,"line_start":736,"line_end":736,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":128145,"byte_end":128148,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of signed 16 bit big-endian integers from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":128153,"byte_end":128224,"line_start":738,"line_end":738,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":128229,"byte_end":128232,"line_start":739,"line_end":739,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":128237,"byte_end":128248,"line_start":740,"line_end":740,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":128253,"byte_end":128277,"line_start":741,"line_end":741,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":128282,"byte_end":128327,"line_start":742,"line_end":742,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":128332,"byte_end":128335,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5, 3, 0]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":128340,"byte_end":128388,"line_start":744,"line_end":744,"column_start":5,"column_end":53}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":128393,"byte_end":128418,"line_start":745,"line_end":745,"column_start":5,"column_end":30}},{"value":"/ rdr.read_i16_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":128423,"byte_end":128477,"line_start":746,"line_end":746,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":128482,"byte_end":128514,"line_start":747,"line_end":747,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":128519,"byte_end":128526,"line_start":748,"line_end":748,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":128531,"byte_end":128540,"line_start":749,"line_end":749,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":129687,"byte_end":129700,"line_start":785,"line_end":785,"column_start":8,"column_end":21},"name":"read_i32_into","qualname":"::io::ReadBytesExt::read_i32_into","value":"pub fn read_i32_into<T: ByteOrder>(&mut Self, &mut [i32]) -> Result<()>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a sequence of signed 32 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of signed 32 bit integers from the underlying","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":128793,"byte_end":128859,"line_start":759,"line_end":759,"column_start":5,"column_end":71}},{"value":"/ reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":128864,"byte_end":128875,"line_start":760,"line_end":760,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":128880,"byte_end":128883,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":128888,"byte_end":128961,"line_start":762,"line_end":762,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":128966,"byte_end":129033,"line_start":763,"line_end":763,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":129038,"byte_end":129041,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":129046,"byte_end":129058,"line_start":765,"line_end":765,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":129063,"byte_end":129066,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":129071,"byte_end":129135,"line_start":767,"line_end":767,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":129140,"byte_end":129143,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":129148,"byte_end":129240,"line_start":769,"line_end":769,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":129245,"byte_end":129248,"line_start":770,"line_end":770,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":129253,"byte_end":129267,"line_start":771,"line_end":771,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":129272,"byte_end":129275,"line_start":772,"line_end":772,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of signed 32 bit big-endian integers from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":129280,"byte_end":129351,"line_start":773,"line_end":773,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":129356,"byte_end":129359,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":129364,"byte_end":129375,"line_start":775,"line_end":775,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":129380,"byte_end":129404,"line_start":776,"line_end":776,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":129409,"byte_end":129454,"line_start":777,"line_end":777,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":129459,"byte_end":129462,"line_start":778,"line_end":778,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":129467,"byte_end":129527,"line_start":779,"line_end":779,"column_start":5,"column_end":65}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":129532,"byte_end":129557,"line_start":780,"line_end":780,"column_start":5,"column_end":30}},{"value":"/ rdr.read_i32_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":129562,"byte_end":129616,"line_start":781,"line_end":781,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":129621,"byte_end":129653,"line_start":782,"line_end":782,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":129658,"byte_end":129665,"line_start":783,"line_end":783,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":129670,"byte_end":129679,"line_start":784,"line_end":784,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":130885,"byte_end":130898,"line_start":823,"line_end":823,"column_start":8,"column_end":21},"name":"read_i64_into","qualname":"::io::ReadBytesExt::read_i64_into","value":"pub fn read_i64_into<T: ByteOrder>(&mut Self, &mut [i64]) -> Result<()>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a sequence of signed 64 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of signed 64 bit integers from the underlying","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":129932,"byte_end":129998,"line_start":794,"line_end":794,"column_start":5,"column_end":71}},{"value":"/ reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":130003,"byte_end":130014,"line_start":795,"line_end":795,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":130019,"byte_end":130022,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":130027,"byte_end":130100,"line_start":797,"line_end":797,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":130105,"byte_end":130172,"line_start":798,"line_end":798,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":130177,"byte_end":130180,"line_start":799,"line_end":799,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":130185,"byte_end":130197,"line_start":800,"line_end":800,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":130202,"byte_end":130205,"line_start":801,"line_end":801,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":130210,"byte_end":130274,"line_start":802,"line_end":802,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":130279,"byte_end":130282,"line_start":803,"line_end":803,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":130287,"byte_end":130379,"line_start":804,"line_end":804,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":130384,"byte_end":130387,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":130392,"byte_end":130406,"line_start":806,"line_end":806,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":130411,"byte_end":130414,"line_start":807,"line_end":807,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of signed 64 bit big-endian integers from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":130419,"byte_end":130490,"line_start":808,"line_end":808,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":130495,"byte_end":130498,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":130503,"byte_end":130514,"line_start":810,"line_end":810,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":130519,"byte_end":130543,"line_start":811,"line_end":811,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":130548,"byte_end":130593,"line_start":812,"line_end":812,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":130598,"byte_end":130601,"line_start":813,"line_end":813,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":130606,"byte_end":130641,"line_start":814,"line_end":814,"column_start":5,"column_end":40}},{"value":"/     0, 0, 0, 0, 0, 0, 2, 5,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":130646,"byte_end":130677,"line_start":815,"line_end":815,"column_start":5,"column_end":36}},{"value":"/     0, 0, 0, 0, 0, 0, 3, 0,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":130682,"byte_end":130713,"line_start":816,"line_end":816,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":130718,"byte_end":130725,"line_start":817,"line_end":817,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":130730,"byte_end":130755,"line_start":818,"line_end":818,"column_start":5,"column_end":30}},{"value":"/ rdr.read_i64_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":130760,"byte_end":130814,"line_start":819,"line_end":819,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":130819,"byte_end":130851,"line_start":820,"line_end":820,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":130856,"byte_end":130863,"line_start":821,"line_end":821,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":130868,"byte_end":130877,"line_start":822,"line_end":822,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":132161,"byte_end":132175,"line_start":862,"line_end":862,"column_start":8,"column_end":22},"name":"read_i128_into","qualname":"::io::ReadBytesExt::read_i128_into","value":"pub fn read_i128_into<T: ByteOrder>(&mut Self, &mut [i128]) -> Result<()>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a sequence of signed 128 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of signed 128 bit integers from the underlying","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":131130,"byte_end":131197,"line_start":832,"line_end":832,"column_start":5,"column_end":72}},{"value":"/ reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":131202,"byte_end":131213,"line_start":833,"line_end":833,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":131218,"byte_end":131221,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":131226,"byte_end":131299,"line_start":835,"line_end":835,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":131304,"byte_end":131371,"line_start":836,"line_end":836,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":131376,"byte_end":131379,"line_start":837,"line_end":837,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":131384,"byte_end":131396,"line_start":838,"line_end":838,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":131401,"byte_end":131404,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":131409,"byte_end":131473,"line_start":840,"line_end":840,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":131478,"byte_end":131481,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":131486,"byte_end":131578,"line_start":842,"line_end":842,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":131583,"byte_end":131586,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":131591,"byte_end":131605,"line_start":844,"line_end":844,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":131610,"byte_end":131613,"line_start":845,"line_end":845,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of signed 128 bit big-endian integers from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":131618,"byte_end":131690,"line_start":846,"line_end":846,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":131695,"byte_end":131698,"line_start":847,"line_end":847,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":131703,"byte_end":131714,"line_start":848,"line_end":848,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":131719,"byte_end":131743,"line_start":849,"line_end":849,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":131748,"byte_end":131793,"line_start":850,"line_end":850,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":131798,"byte_end":131801,"line_start":851,"line_end":851,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":131806,"byte_end":131841,"line_start":852,"line_end":852,"column_start":5,"column_end":40}},{"value":"/     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":131846,"byte_end":131901,"line_start":853,"line_end":853,"column_start":5,"column_end":60}},{"value":"/     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":131906,"byte_end":131961,"line_start":854,"line_end":854,"column_start":5,"column_end":60}},{"value":"/ ]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":131966,"byte_end":131973,"line_start":855,"line_end":855,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":131978,"byte_end":132003,"line_start":856,"line_end":856,"column_start":5,"column_end":30}},{"value":"/ rdr.read_i128_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":132008,"byte_end":132063,"line_start":857,"line_end":857,"column_start":5,"column_end":60}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":132068,"byte_end":132100,"line_start":858,"line_end":858,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":132105,"byte_end":132112,"line_start":859,"line_end":859,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":132117,"byte_end":132139,"line_start":860,"line_end":860,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":132144,"byte_end":132153,"line_start":861,"line_end":861,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":133488,"byte_end":133501,"line_start":906,"line_end":906,"column_start":8,"column_end":21},"name":"read_f32_into","qualname":"::io::ReadBytesExt::read_f32_into","value":"pub fn read_f32_into<T: ByteOrder>(&mut Self, &mut [f32]) -> Result<()>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a sequence of IEEE754 single-precision (4 bytes) floating\n point numbers from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of IEEE754 single-precision (4 bytes) floating","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":132432,"byte_end":132499,"line_start":874,"line_end":874,"column_start":5,"column_end":72}},{"value":"/ point numbers from the underlying reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":132504,"byte_end":132549,"line_start":875,"line_end":875,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":132554,"byte_end":132557,"line_start":876,"line_end":876,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":132562,"byte_end":132635,"line_start":877,"line_end":877,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":132640,"byte_end":132707,"line_start":878,"line_end":878,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":132712,"byte_end":132715,"line_start":879,"line_end":879,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":132720,"byte_end":132732,"line_start":880,"line_end":880,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":132737,"byte_end":132740,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":132745,"byte_end":132809,"line_start":882,"line_end":882,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":132814,"byte_end":132817,"line_start":883,"line_end":883,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":132822,"byte_end":132914,"line_start":884,"line_end":884,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":132919,"byte_end":132922,"line_start":885,"line_end":885,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":132927,"byte_end":132941,"line_start":886,"line_end":886,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":132946,"byte_end":132949,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of big-endian single-precision floating point number","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":132954,"byte_end":133026,"line_start":888,"line_end":888,"column_start":5,"column_end":77}},{"value":"/ from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":133031,"byte_end":133049,"line_start":889,"line_end":889,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":133054,"byte_end":133057,"line_start":890,"line_end":890,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":133062,"byte_end":133073,"line_start":891,"line_end":891,"column_start":5,"column_end":16}},{"value":"/ use std::f32;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":133078,"byte_end":133095,"line_start":892,"line_end":892,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":133100,"byte_end":133124,"line_start":893,"line_end":893,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":133129,"byte_end":133132,"line_start":894,"line_end":894,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":133137,"byte_end":133182,"line_start":895,"line_end":895,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":133187,"byte_end":133190,"line_start":896,"line_end":896,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":133195,"byte_end":133230,"line_start":897,"line_end":897,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x49, 0x0f, 0xdb,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":133235,"byte_end":133266,"line_start":898,"line_end":898,"column_start":5,"column_end":36}},{"value":"/     0x3f, 0x80, 0x00, 0x00,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":133271,"byte_end":133302,"line_start":899,"line_end":899,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":133307,"byte_end":133314,"line_start":900,"line_end":900,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0.0; 2];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":133319,"byte_end":133346,"line_start":901,"line_end":901,"column_start":5,"column_end":32}},{"value":"/ rdr.read_f32_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":133351,"byte_end":133405,"line_start":902,"line_end":902,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([f32::consts::PI, 1.0], dst);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":133410,"byte_end":133454,"line_start":903,"line_end":903,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":133459,"byte_end":133466,"line_start":904,"line_end":904,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":133471,"byte_end":133480,"line_start":905,"line_end":905,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":135002,"byte_end":135025,"line_start":955,"line_end":955,"column_start":8,"column_end":31},"name":"read_f32_into_unchecked","qualname":"::io::ReadBytesExt::read_f32_into_unchecked","value":"pub fn read_f32_into_unchecked<T: ByteOrder>(&mut Self, &mut [f32])\n-> Result<()>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" **DEPRECATED**.","sig":null,"attributes":[{"value":"/ **DEPRECATED**.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":133756,"byte_end":133775,"line_start":918,"line_end":918,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":133780,"byte_end":133783,"line_start":919,"line_end":919,"column_start":5,"column_end":8}},{"value":"/ This method is deprecated. Use `read_f32_into` instead.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":133788,"byte_end":133847,"line_start":920,"line_end":920,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":133852,"byte_end":133855,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ Reads a sequence of IEEE754 single-precision (4 bytes) floating","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":133860,"byte_end":133927,"line_start":922,"line_end":922,"column_start":5,"column_end":72}},{"value":"/ point numbers from the underlying reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":133932,"byte_end":133977,"line_start":923,"line_end":923,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":133982,"byte_end":133985,"line_start":924,"line_end":924,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":133990,"byte_end":134063,"line_start":925,"line_end":925,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":134068,"byte_end":134135,"line_start":926,"line_end":926,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":134140,"byte_end":134143,"line_start":927,"line_end":927,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":134148,"byte_end":134160,"line_start":928,"line_end":928,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":134165,"byte_end":134168,"line_start":929,"line_end":929,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":134173,"byte_end":134237,"line_start":930,"line_end":930,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":134242,"byte_end":134245,"line_start":931,"line_end":931,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":134250,"byte_end":134342,"line_start":932,"line_end":932,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":134347,"byte_end":134350,"line_start":933,"line_end":933,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":134355,"byte_end":134369,"line_start":934,"line_end":934,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":134374,"byte_end":134377,"line_start":935,"line_end":935,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of big-endian single-precision floating point number","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":134382,"byte_end":134454,"line_start":936,"line_end":936,"column_start":5,"column_end":77}},{"value":"/ from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":134459,"byte_end":134477,"line_start":937,"line_end":937,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":134482,"byte_end":134485,"line_start":938,"line_end":938,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":134490,"byte_end":134501,"line_start":939,"line_end":939,"column_start":5,"column_end":16}},{"value":"/ use std::f32;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":134506,"byte_end":134523,"line_start":940,"line_end":940,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":134528,"byte_end":134552,"line_start":941,"line_end":941,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":134557,"byte_end":134560,"line_start":942,"line_end":942,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":134565,"byte_end":134610,"line_start":943,"line_end":943,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":134615,"byte_end":134618,"line_start":944,"line_end":944,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":134623,"byte_end":134658,"line_start":945,"line_end":945,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x49, 0x0f, 0xdb,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":134663,"byte_end":134694,"line_start":946,"line_end":946,"column_start":5,"column_end":36}},{"value":"/     0x3f, 0x80, 0x00, 0x00,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":134699,"byte_end":134730,"line_start":947,"line_end":947,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":134735,"byte_end":134742,"line_start":948,"line_end":948,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0.0; 2];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":134747,"byte_end":134774,"line_start":949,"line_end":949,"column_start":5,"column_end":32}},{"value":"/ rdr.read_f32_into_unchecked::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":134779,"byte_end":134843,"line_start":950,"line_end":950,"column_start":5,"column_end":69}},{"value":"/ assert_eq!([f32::consts::PI, 1.0], dst);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":134848,"byte_end":134892,"line_start":951,"line_end":951,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":134897,"byte_end":134904,"line_start":952,"line_end":952,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":134909,"byte_end":134918,"line_start":953,"line_end":953,"column_start":5,"column_end":14}},{"value":"deprecated(since = \"1.2.0\", note = \"please use `read_f32_into` instead\")","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":134923,"byte_end":134994,"line_start":954,"line_end":954,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":136259,"byte_end":136272,"line_start":994,"line_end":994,"column_start":8,"column_end":21},"name":"read_f64_into","qualname":"::io::ReadBytesExt::read_f64_into","value":"pub fn read_f64_into<T: ByteOrder>(&mut Self, &mut [f64]) -> Result<()>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Reads a sequence of IEEE754 double-precision (8 bytes) floating\n point numbers from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of IEEE754 double-precision (8 bytes) floating","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":135155,"byte_end":135222,"line_start":962,"line_end":962,"column_start":5,"column_end":72}},{"value":"/ point numbers from the underlying reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":135227,"byte_end":135272,"line_start":963,"line_end":963,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":135277,"byte_end":135280,"line_start":964,"line_end":964,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":135285,"byte_end":135358,"line_start":965,"line_end":965,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":135363,"byte_end":135430,"line_start":966,"line_end":966,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":135435,"byte_end":135438,"line_start":967,"line_end":967,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":135443,"byte_end":135455,"line_start":968,"line_end":968,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":135460,"byte_end":135463,"line_start":969,"line_end":969,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":135468,"byte_end":135532,"line_start":970,"line_end":970,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":135537,"byte_end":135540,"line_start":971,"line_end":971,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":135545,"byte_end":135637,"line_start":972,"line_end":972,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":135642,"byte_end":135645,"line_start":973,"line_end":973,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":135650,"byte_end":135664,"line_start":974,"line_end":974,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":135669,"byte_end":135672,"line_start":975,"line_end":975,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of big-endian single-precision floating point number","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":135677,"byte_end":135749,"line_start":976,"line_end":976,"column_start":5,"column_end":77}},{"value":"/ from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":135754,"byte_end":135772,"line_start":977,"line_end":977,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":135777,"byte_end":135780,"line_start":978,"line_end":978,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":135785,"byte_end":135796,"line_start":979,"line_end":979,"column_start":5,"column_end":16}},{"value":"/ use std::f64;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":135801,"byte_end":135818,"line_start":980,"line_end":980,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":135823,"byte_end":135847,"line_start":981,"line_end":981,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":135852,"byte_end":135855,"line_start":982,"line_end":982,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":135860,"byte_end":135905,"line_start":983,"line_end":983,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":135910,"byte_end":135913,"line_start":984,"line_end":984,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":135918,"byte_end":135953,"line_start":985,"line_end":985,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":135958,"byte_end":136013,"line_start":986,"line_end":986,"column_start":5,"column_end":60}},{"value":"/     0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":136018,"byte_end":136073,"line_start":987,"line_end":987,"column_start":5,"column_end":60}},{"value":"/ ]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":136078,"byte_end":136085,"line_start":988,"line_end":988,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0.0; 2];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":136090,"byte_end":136117,"line_start":989,"line_end":989,"column_start":5,"column_end":32}},{"value":"/ rdr.read_f64_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":136122,"byte_end":136176,"line_start":990,"line_end":990,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([f64::consts::PI, 1.0], dst);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":136181,"byte_end":136225,"line_start":991,"line_end":991,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":136230,"byte_end":136237,"line_start":992,"line_end":992,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":136242,"byte_end":136251,"line_start":993,"line_end":993,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":138072,"byte_end":138095,"line_start":1049,"line_end":1049,"column_start":8,"column_end":31},"name":"read_f64_into_unchecked","qualname":"::io::ReadBytesExt::read_f64_into_unchecked","value":"pub fn read_f64_into_unchecked<T: ByteOrder>(&mut Self, &mut [f64])\n-> Result<()>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" **DEPRECATED**.","sig":null,"attributes":[{"value":"/ **DEPRECATED**.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":136527,"byte_end":136546,"line_start":1006,"line_end":1006,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":136551,"byte_end":136554,"line_start":1007,"line_end":1007,"column_start":5,"column_end":8}},{"value":"/ This method is deprecated. Use `read_f64_into` instead.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":136559,"byte_end":136618,"line_start":1008,"line_end":1008,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":136623,"byte_end":136626,"line_start":1009,"line_end":1009,"column_start":5,"column_end":8}},{"value":"/ Reads a sequence of IEEE754 double-precision (8 bytes) floating","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":136631,"byte_end":136698,"line_start":1010,"line_end":1010,"column_start":5,"column_end":72}},{"value":"/ point numbers from the underlying reader.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":136703,"byte_end":136748,"line_start":1011,"line_end":1011,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":136753,"byte_end":136756,"line_start":1012,"line_end":1012,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":136761,"byte_end":136834,"line_start":1013,"line_end":1013,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":136839,"byte_end":136906,"line_start":1014,"line_end":1014,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":136911,"byte_end":136914,"line_start":1015,"line_end":1015,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":136919,"byte_end":136931,"line_start":1016,"line_end":1016,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":136936,"byte_end":136939,"line_start":1017,"line_end":1017,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because there are no guarantees made about the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":136944,"byte_end":137016,"line_start":1018,"line_end":1018,"column_start":5,"column_end":77}},{"value":"/ floating point values. In particular, this method does not check for","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137021,"byte_end":137093,"line_start":1019,"line_end":1019,"column_start":5,"column_end":77}},{"value":"/ signaling NaNs, which may result in undefined behavior.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137098,"byte_end":137157,"line_start":1020,"line_end":1020,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137162,"byte_end":137165,"line_start":1021,"line_end":1021,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137170,"byte_end":137182,"line_start":1022,"line_end":1022,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137187,"byte_end":137190,"line_start":1023,"line_end":1023,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137195,"byte_end":137259,"line_start":1024,"line_end":1024,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137264,"byte_end":137267,"line_start":1025,"line_end":1025,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137272,"byte_end":137364,"line_start":1026,"line_end":1026,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137369,"byte_end":137372,"line_start":1027,"line_end":1027,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137377,"byte_end":137391,"line_start":1028,"line_end":1028,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137396,"byte_end":137399,"line_start":1029,"line_end":1029,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of big-endian single-precision floating point number","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137404,"byte_end":137476,"line_start":1030,"line_end":1030,"column_start":5,"column_end":77}},{"value":"/ from a `Read`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137481,"byte_end":137499,"line_start":1031,"line_end":1031,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137504,"byte_end":137507,"line_start":1032,"line_end":1032,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137512,"byte_end":137523,"line_start":1033,"line_end":1033,"column_start":5,"column_end":16}},{"value":"/ use std::f64;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137528,"byte_end":137545,"line_start":1034,"line_end":1034,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137550,"byte_end":137574,"line_start":1035,"line_end":1035,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137579,"byte_end":137582,"line_start":1036,"line_end":1036,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137587,"byte_end":137632,"line_start":1037,"line_end":1037,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137637,"byte_end":137640,"line_start":1038,"line_end":1038,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137645,"byte_end":137680,"line_start":1039,"line_end":1039,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137685,"byte_end":137740,"line_start":1040,"line_end":1040,"column_start":5,"column_end":60}},{"value":"/     0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137745,"byte_end":137800,"line_start":1041,"line_end":1041,"column_start":5,"column_end":60}},{"value":"/ ]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137805,"byte_end":137812,"line_start":1042,"line_end":1042,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0.0; 2];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137817,"byte_end":137844,"line_start":1043,"line_end":1043,"column_start":5,"column_end":32}},{"value":"/ rdr.read_f64_into_unchecked::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137849,"byte_end":137913,"line_start":1044,"line_end":1044,"column_start":5,"column_end":69}},{"value":"/ assert_eq!([f64::consts::PI, 1.0], dst);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137918,"byte_end":137962,"line_start":1045,"line_end":1045,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137967,"byte_end":137974,"line_start":1046,"line_end":1046,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137979,"byte_end":137988,"line_start":1047,"line_end":1047,"column_start":5,"column_end":14}},{"value":"deprecated(since = \"1.2.0\", note = \"please use `read_f64_into` instead\")","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":137993,"byte_end":138064,"line_start":1048,"line_end":1048,"column_start":5,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":123},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139147,"byte_end":139160,"line_start":1083,"line_end":1083,"column_start":11,"column_end":24},"name":"WriteBytesExt","qualname":"::io::WriteBytesExt","value":"WriteBytesExt: io::Write","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":132},{"krate":0,"index":135},{"krate":0,"index":138},{"krate":0,"index":141},{"krate":0,"index":144},{"krate":0,"index":147},{"krate":0,"index":150},{"krate":0,"index":153},{"krate":0,"index":156},{"krate":0,"index":159},{"krate":0,"index":162},{"krate":0,"index":165},{"krate":0,"index":168},{"krate":0,"index":171},{"krate":0,"index":174},{"krate":0,"index":177}],"decl_id":null,"docs":" Extends [`Write`] with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[{"value":"/ Extends [`Write`] with methods for writing numbers. (For `std::io`.)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":138361,"byte_end":138433,"line_start":1061,"line_end":1061,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":138434,"byte_end":138437,"line_start":1062,"line_end":1062,"column_start":1,"column_end":4}},{"value":"/ Most of the methods defined here have an unconstrained type parameter that","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":138438,"byte_end":138516,"line_start":1063,"line_end":1063,"column_start":1,"column_end":79}},{"value":"/ must be explicitly instantiated. Typically, it is instantiated with either","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":138517,"byte_end":138595,"line_start":1064,"line_end":1064,"column_start":1,"column_end":79}},{"value":"/ the [`BigEndian`] or [`LittleEndian`] types defined in this crate.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":138596,"byte_end":138666,"line_start":1065,"line_end":1065,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":138667,"byte_end":138670,"line_start":1066,"line_end":1066,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":138671,"byte_end":138685,"line_start":1067,"line_end":1067,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":138686,"byte_end":138689,"line_start":1068,"line_end":1068,"column_start":1,"column_end":4}},{"value":"/ Write unsigned 16 bit big-endian integers to a [`Write`]:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":138690,"byte_end":138751,"line_start":1069,"line_end":1069,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":138752,"byte_end":138755,"line_start":1070,"line_end":1070,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":138756,"byte_end":138767,"line_start":1071,"line_end":1071,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":138768,"byte_end":138814,"line_start":1072,"line_end":1072,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":138815,"byte_end":138818,"line_start":1073,"line_end":1073,"column_start":1,"column_end":4}},{"value":"/ let mut wtr = vec![];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":138819,"byte_end":138844,"line_start":1074,"line_end":1074,"column_start":1,"column_end":26}},{"value":"/ wtr.write_u16::<BigEndian>(517).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":138845,"byte_end":138890,"line_start":1075,"line_end":1075,"column_start":1,"column_end":46}},{"value":"/ wtr.write_u16::<BigEndian>(768).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":138891,"byte_end":138936,"line_start":1076,"line_end":1076,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(wtr, vec![2, 5, 3, 0]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":138937,"byte_end":138975,"line_start":1077,"line_end":1077,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":138976,"byte_end":138983,"line_start":1078,"line_end":1078,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":138984,"byte_end":138987,"line_start":1079,"line_end":1079,"column_start":1,"column_end":4}},{"value":"/ [`BigEndian`]: enum.BigEndian.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":138988,"byte_end":139026,"line_start":1080,"line_end":1080,"column_start":1,"column_end":39}},{"value":"/ [`LittleEndian`]: enum.LittleEndian.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139027,"byte_end":139071,"line_start":1081,"line_end":1081,"column_start":1,"column_end":45}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139072,"byte_end":139136,"line_start":1082,"line_end":1082,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139914,"byte_end":139922,"line_start":1108,"line_end":1108,"column_start":8,"column_end":16},"name":"write_u8","qualname":"::io::WriteBytesExt::write_u8","value":"pub fn write_u8(&mut Self, u8) -> Result<()>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Writes an unsigned 8 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 8 bit integer to the underlying writer.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139178,"byte_end":139240,"line_start":1084,"line_end":1084,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139245,"byte_end":139248,"line_start":1085,"line_end":1085,"column_start":5,"column_end":8}},{"value":"/ Note that since this writes a single byte, no byte order conversions","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139253,"byte_end":139325,"line_start":1086,"line_end":1086,"column_start":5,"column_end":77}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139330,"byte_end":139376,"line_start":1087,"line_end":1087,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139381,"byte_end":139384,"line_start":1088,"line_end":1088,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139389,"byte_end":139401,"line_start":1089,"line_end":1089,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139406,"byte_end":139409,"line_start":1090,"line_end":1090,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139414,"byte_end":139478,"line_start":1091,"line_end":1091,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139483,"byte_end":139486,"line_start":1092,"line_end":1092,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139491,"byte_end":139583,"line_start":1093,"line_end":1093,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139588,"byte_end":139591,"line_start":1094,"line_end":1094,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139596,"byte_end":139610,"line_start":1095,"line_end":1095,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139615,"byte_end":139618,"line_start":1096,"line_end":1096,"column_start":5,"column_end":8}},{"value":"/ Write unsigned 8 bit integers to a `Write`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139623,"byte_end":139670,"line_start":1097,"line_end":1097,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139675,"byte_end":139678,"line_start":1098,"line_end":1098,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139683,"byte_end":139694,"line_start":1099,"line_end":1099,"column_start":5,"column_end":16}},{"value":"/ use byteorder::WriteBytesExt;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139699,"byte_end":139732,"line_start":1100,"line_end":1100,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139737,"byte_end":139740,"line_start":1101,"line_end":1101,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139745,"byte_end":139774,"line_start":1102,"line_end":1102,"column_start":5,"column_end":34}},{"value":"/ wtr.write_u8(2).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139779,"byte_end":139808,"line_start":1103,"line_end":1103,"column_start":5,"column_end":34}},{"value":"/ wtr.write_u8(5).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139813,"byte_end":139842,"line_start":1104,"line_end":1104,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(wtr, b\"\\x02\\x05\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139847,"byte_end":139880,"line_start":1105,"line_end":1105,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139885,"byte_end":139892,"line_start":1106,"line_end":1106,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139897,"byte_end":139906,"line_start":1107,"line_end":1107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140729,"byte_end":140737,"line_start":1136,"line_end":1136,"column_start":8,"column_end":16},"name":"write_i8","qualname":"::io::WriteBytesExt::write_i8","value":"pub fn write_i8(&mut Self, i8) -> Result<()>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Writes a signed 8 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 8 bit integer to the underlying writer.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139997,"byte_end":140056,"line_start":1112,"line_end":1112,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140061,"byte_end":140064,"line_start":1113,"line_end":1113,"column_start":5,"column_end":8}},{"value":"/ Note that since this writes a single byte, no byte order conversions","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140069,"byte_end":140141,"line_start":1114,"line_end":1114,"column_start":5,"column_end":77}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140146,"byte_end":140192,"line_start":1115,"line_end":1115,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140197,"byte_end":140200,"line_start":1116,"line_end":1116,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140205,"byte_end":140217,"line_start":1117,"line_end":1117,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140222,"byte_end":140225,"line_start":1118,"line_end":1118,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140230,"byte_end":140294,"line_start":1119,"line_end":1119,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140299,"byte_end":140302,"line_start":1120,"line_end":1120,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140307,"byte_end":140399,"line_start":1121,"line_end":1121,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140404,"byte_end":140407,"line_start":1122,"line_end":1122,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140412,"byte_end":140426,"line_start":1123,"line_end":1123,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140431,"byte_end":140434,"line_start":1124,"line_end":1124,"column_start":5,"column_end":8}},{"value":"/ Write signed 8 bit integers to a `Write`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140439,"byte_end":140484,"line_start":1125,"line_end":1125,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140489,"byte_end":140492,"line_start":1126,"line_end":1126,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140497,"byte_end":140508,"line_start":1127,"line_end":1127,"column_start":5,"column_end":16}},{"value":"/ use byteorder::WriteBytesExt;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140513,"byte_end":140546,"line_start":1128,"line_end":1128,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140551,"byte_end":140554,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140559,"byte_end":140588,"line_start":1130,"line_end":1130,"column_start":5,"column_end":34}},{"value":"/ wtr.write_i8(2).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140593,"byte_end":140622,"line_start":1131,"line_end":1131,"column_start":5,"column_end":34}},{"value":"/ wtr.write_i8(-5).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140627,"byte_end":140657,"line_start":1132,"line_end":1132,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(wtr, b\"\\x02\\xfb\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140662,"byte_end":140695,"line_start":1133,"line_end":1133,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140700,"byte_end":140707,"line_start":1134,"line_end":1134,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140712,"byte_end":140721,"line_start":1135,"line_end":1135,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":141484,"byte_end":141493,"line_start":1161,"line_end":1161,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::io::WriteBytesExt::write_u16","value":"pub fn write_u16<T: ByteOrder>(&mut Self, u16) -> Result<()>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Writes an unsigned 16 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 16 bit integer to the underlying writer.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140818,"byte_end":140881,"line_start":1140,"line_end":1140,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140886,"byte_end":140889,"line_start":1141,"line_end":1141,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140894,"byte_end":140906,"line_start":1142,"line_end":1142,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140911,"byte_end":140914,"line_start":1143,"line_end":1143,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140919,"byte_end":140983,"line_start":1144,"line_end":1144,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140988,"byte_end":140991,"line_start":1145,"line_end":1145,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":140996,"byte_end":141088,"line_start":1146,"line_end":1146,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":141093,"byte_end":141096,"line_start":1147,"line_end":1147,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":141101,"byte_end":141115,"line_start":1148,"line_end":1148,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":141120,"byte_end":141123,"line_start":1149,"line_end":1149,"column_start":5,"column_end":8}},{"value":"/ Write unsigned 16 bit big-endian integers to a `Write`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":141128,"byte_end":141187,"line_start":1150,"line_end":1150,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":141192,"byte_end":141195,"line_start":1151,"line_end":1151,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":141200,"byte_end":141211,"line_start":1152,"line_end":1152,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":141216,"byte_end":141262,"line_start":1153,"line_end":1153,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":141267,"byte_end":141270,"line_start":1154,"line_end":1154,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":141275,"byte_end":141304,"line_start":1155,"line_end":1155,"column_start":5,"column_end":34}},{"value":"/ wtr.write_u16::<BigEndian>(517).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":141309,"byte_end":141354,"line_start":1156,"line_end":1156,"column_start":5,"column_end":50}},{"value":"/ wtr.write_u16::<BigEndian>(768).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":141359,"byte_end":141404,"line_start":1157,"line_end":1157,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(wtr, b\"\\x02\\x05\\x03\\x00\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":141409,"byte_end":141450,"line_start":1158,"line_end":1158,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":141455,"byte_end":141462,"line_start":1159,"line_end":1159,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":141467,"byte_end":141476,"line_start":1160,"line_end":1160,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":142310,"byte_end":142319,"line_start":1188,"line_end":1188,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::io::WriteBytesExt::write_i16","value":"pub fn write_i16<T: ByteOrder>(&mut Self, i16) -> Result<()>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Writes a signed 16 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 16 bit integer to the underlying writer.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":141648,"byte_end":141708,"line_start":1167,"line_end":1167,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":141713,"byte_end":141716,"line_start":1168,"line_end":1168,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":141721,"byte_end":141733,"line_start":1169,"line_end":1169,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":141738,"byte_end":141741,"line_start":1170,"line_end":1170,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":141746,"byte_end":141810,"line_start":1171,"line_end":1171,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":141815,"byte_end":141818,"line_start":1172,"line_end":1172,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":141823,"byte_end":141915,"line_start":1173,"line_end":1173,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":141920,"byte_end":141923,"line_start":1174,"line_end":1174,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":141928,"byte_end":141942,"line_start":1175,"line_end":1175,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":141947,"byte_end":141950,"line_start":1176,"line_end":1176,"column_start":5,"column_end":8}},{"value":"/ Write signed 16 bit big-endian integers to a `Write`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":141955,"byte_end":142012,"line_start":1177,"line_end":1177,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":142017,"byte_end":142020,"line_start":1178,"line_end":1178,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":142025,"byte_end":142036,"line_start":1179,"line_end":1179,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":142041,"byte_end":142087,"line_start":1180,"line_end":1180,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":142092,"byte_end":142095,"line_start":1181,"line_end":1181,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":142100,"byte_end":142129,"line_start":1182,"line_end":1182,"column_start":5,"column_end":34}},{"value":"/ wtr.write_i16::<BigEndian>(193).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":142134,"byte_end":142179,"line_start":1183,"line_end":1183,"column_start":5,"column_end":50}},{"value":"/ wtr.write_i16::<BigEndian>(-132).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":142184,"byte_end":142230,"line_start":1184,"line_end":1184,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(wtr, b\"\\x00\\xc1\\xff\\x7c\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":142235,"byte_end":142276,"line_start":1185,"line_end":1185,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":142281,"byte_end":142288,"line_start":1186,"line_end":1186,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":142293,"byte_end":142302,"line_start":1187,"line_end":1187,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":143151,"byte_end":143160,"line_start":1215,"line_end":1215,"column_start":8,"column_end":17},"name":"write_u24","qualname":"::io::WriteBytesExt::write_u24","value":"pub fn write_u24<T: ByteOrder>(&mut Self, u32) -> Result<()>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Writes an unsigned 24 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 24 bit integer to the underlying writer.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":142474,"byte_end":142537,"line_start":1194,"line_end":1194,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":142542,"byte_end":142545,"line_start":1195,"line_end":1195,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":142550,"byte_end":142562,"line_start":1196,"line_end":1196,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":142567,"byte_end":142570,"line_start":1197,"line_end":1197,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":142575,"byte_end":142639,"line_start":1198,"line_end":1198,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":142644,"byte_end":142647,"line_start":1199,"line_end":1199,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":142652,"byte_end":142744,"line_start":1200,"line_end":1200,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":142749,"byte_end":142752,"line_start":1201,"line_end":1201,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":142757,"byte_end":142771,"line_start":1202,"line_end":1202,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":142776,"byte_end":142779,"line_start":1203,"line_end":1203,"column_start":5,"column_end":8}},{"value":"/ Write unsigned 24 bit big-endian integers to a `Write`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":142784,"byte_end":142843,"line_start":1204,"line_end":1204,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":142848,"byte_end":142851,"line_start":1205,"line_end":1205,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":142856,"byte_end":142867,"line_start":1206,"line_end":1206,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":142872,"byte_end":142918,"line_start":1207,"line_end":1207,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":142923,"byte_end":142926,"line_start":1208,"line_end":1208,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":142931,"byte_end":142960,"line_start":1209,"line_end":1209,"column_start":5,"column_end":34}},{"value":"/ wtr.write_u24::<BigEndian>(267).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":142965,"byte_end":143010,"line_start":1210,"line_end":1210,"column_start":5,"column_end":50}},{"value":"/ wtr.write_u24::<BigEndian>(120111).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":143015,"byte_end":143063,"line_start":1211,"line_end":1211,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(wtr, b\"\\x00\\x01\\x0b\\x01\\xd5\\x2f\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":143068,"byte_end":143117,"line_start":1212,"line_end":1212,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":143122,"byte_end":143129,"line_start":1213,"line_end":1213,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":143134,"byte_end":143143,"line_start":1214,"line_end":1214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":143990,"byte_end":143999,"line_start":1242,"line_end":1242,"column_start":8,"column_end":17},"name":"write_i24","qualname":"::io::WriteBytesExt::write_i24","value":"pub fn write_i24<T: ByteOrder>(&mut Self, i32) -> Result<()>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Writes a signed 24 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 24 bit integer to the underlying writer.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":143315,"byte_end":143375,"line_start":1221,"line_end":1221,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":143380,"byte_end":143383,"line_start":1222,"line_end":1222,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":143388,"byte_end":143400,"line_start":1223,"line_end":1223,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":143405,"byte_end":143408,"line_start":1224,"line_end":1224,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":143413,"byte_end":143477,"line_start":1225,"line_end":1225,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":143482,"byte_end":143485,"line_start":1226,"line_end":1226,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":143490,"byte_end":143582,"line_start":1227,"line_end":1227,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":143587,"byte_end":143590,"line_start":1228,"line_end":1228,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":143595,"byte_end":143609,"line_start":1229,"line_end":1229,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":143614,"byte_end":143617,"line_start":1230,"line_end":1230,"column_start":5,"column_end":8}},{"value":"/ Write signed 24 bit big-endian integers to a `Write`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":143622,"byte_end":143679,"line_start":1231,"line_end":1231,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":143684,"byte_end":143687,"line_start":1232,"line_end":1232,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":143692,"byte_end":143703,"line_start":1233,"line_end":1233,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":143708,"byte_end":143754,"line_start":1234,"line_end":1234,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":143759,"byte_end":143762,"line_start":1235,"line_end":1235,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":143767,"byte_end":143796,"line_start":1236,"line_end":1236,"column_start":5,"column_end":34}},{"value":"/ wtr.write_i24::<BigEndian>(-34253).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":143801,"byte_end":143849,"line_start":1237,"line_end":1237,"column_start":5,"column_end":53}},{"value":"/ wtr.write_i24::<BigEndian>(120111).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":143854,"byte_end":143902,"line_start":1238,"line_end":1238,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(wtr, b\"\\xff\\x7a\\x33\\x01\\xd5\\x2f\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":143907,"byte_end":143956,"line_start":1239,"line_end":1239,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":143961,"byte_end":143968,"line_start":1240,"line_end":1240,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":143973,"byte_end":143982,"line_start":1241,"line_end":1241,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":144843,"byte_end":144852,"line_start":1269,"line_end":1269,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::io::WriteBytesExt::write_u32","value":"pub fn write_u32<T: ByteOrder>(&mut Self, u32) -> Result<()>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Writes an unsigned 32 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 32 bit integer to the underlying writer.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":144154,"byte_end":144217,"line_start":1248,"line_end":1248,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":144222,"byte_end":144225,"line_start":1249,"line_end":1249,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":144230,"byte_end":144242,"line_start":1250,"line_end":1250,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":144247,"byte_end":144250,"line_start":1251,"line_end":1251,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":144255,"byte_end":144319,"line_start":1252,"line_end":1252,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":144324,"byte_end":144327,"line_start":1253,"line_end":1253,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":144332,"byte_end":144424,"line_start":1254,"line_end":1254,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":144429,"byte_end":144432,"line_start":1255,"line_end":1255,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":144437,"byte_end":144451,"line_start":1256,"line_end":1256,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":144456,"byte_end":144459,"line_start":1257,"line_end":1257,"column_start":5,"column_end":8}},{"value":"/ Write unsigned 32 bit big-endian integers to a `Write`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":144464,"byte_end":144523,"line_start":1258,"line_end":1258,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":144528,"byte_end":144531,"line_start":1259,"line_end":1259,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":144536,"byte_end":144547,"line_start":1260,"line_end":1260,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":144552,"byte_end":144598,"line_start":1261,"line_end":1261,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":144603,"byte_end":144606,"line_start":1262,"line_end":1262,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":144611,"byte_end":144640,"line_start":1263,"line_end":1263,"column_start":5,"column_end":34}},{"value":"/ wtr.write_u32::<BigEndian>(267).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":144645,"byte_end":144690,"line_start":1264,"line_end":1264,"column_start":5,"column_end":50}},{"value":"/ wtr.write_u32::<BigEndian>(1205419366).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":144695,"byte_end":144747,"line_start":1265,"line_end":1265,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(wtr, b\"\\x00\\x00\\x01\\x0b\\x47\\xd9\\x3d\\x66\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":144752,"byte_end":144809,"line_start":1266,"line_end":1266,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":144814,"byte_end":144821,"line_start":1267,"line_end":1267,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":144826,"byte_end":144835,"line_start":1268,"line_end":1268,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":145694,"byte_end":145703,"line_start":1296,"line_end":1296,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::io::WriteBytesExt::write_i32","value":"pub fn write_i32<T: ByteOrder>(&mut Self, i32) -> Result<()>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Writes a signed 32 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 32 bit integer to the underlying writer.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":145007,"byte_end":145067,"line_start":1275,"line_end":1275,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":145072,"byte_end":145075,"line_start":1276,"line_end":1276,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":145080,"byte_end":145092,"line_start":1277,"line_end":1277,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":145097,"byte_end":145100,"line_start":1278,"line_end":1278,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":145105,"byte_end":145169,"line_start":1279,"line_end":1279,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":145174,"byte_end":145177,"line_start":1280,"line_end":1280,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":145182,"byte_end":145274,"line_start":1281,"line_end":1281,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":145279,"byte_end":145282,"line_start":1282,"line_end":1282,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":145287,"byte_end":145301,"line_start":1283,"line_end":1283,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":145306,"byte_end":145309,"line_start":1284,"line_end":1284,"column_start":5,"column_end":8}},{"value":"/ Write signed 32 bit big-endian integers to a `Write`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":145314,"byte_end":145371,"line_start":1285,"line_end":1285,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":145376,"byte_end":145379,"line_start":1286,"line_end":1286,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":145384,"byte_end":145395,"line_start":1287,"line_end":1287,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":145400,"byte_end":145446,"line_start":1288,"line_end":1288,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":145451,"byte_end":145454,"line_start":1289,"line_end":1289,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":145459,"byte_end":145488,"line_start":1290,"line_end":1290,"column_start":5,"column_end":34}},{"value":"/ wtr.write_i32::<BigEndian>(-34253).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":145493,"byte_end":145541,"line_start":1291,"line_end":1291,"column_start":5,"column_end":53}},{"value":"/ wtr.write_i32::<BigEndian>(1205419366).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":145546,"byte_end":145598,"line_start":1292,"line_end":1292,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(wtr, b\"\\xff\\xff\\x7a\\x33\\x47\\xd9\\x3d\\x66\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":145603,"byte_end":145660,"line_start":1293,"line_end":1293,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":145665,"byte_end":145672,"line_start":1294,"line_end":1294,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":145677,"byte_end":145686,"line_start":1295,"line_end":1295,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":146567,"byte_end":146576,"line_start":1323,"line_end":1323,"column_start":8,"column_end":17},"name":"write_u48","qualname":"::io::WriteBytesExt::write_u48","value":"pub fn write_u48<T: ByteOrder>(&mut Self, u64) -> Result<()>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Writes an unsigned 48 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 48 bit integer to the underlying writer.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":145858,"byte_end":145921,"line_start":1302,"line_end":1302,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":145926,"byte_end":145929,"line_start":1303,"line_end":1303,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":145934,"byte_end":145946,"line_start":1304,"line_end":1304,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":145951,"byte_end":145954,"line_start":1305,"line_end":1305,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":145959,"byte_end":146023,"line_start":1306,"line_end":1306,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":146028,"byte_end":146031,"line_start":1307,"line_end":1307,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":146036,"byte_end":146128,"line_start":1308,"line_end":1308,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":146133,"byte_end":146136,"line_start":1309,"line_end":1309,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":146141,"byte_end":146155,"line_start":1310,"line_end":1310,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":146160,"byte_end":146163,"line_start":1311,"line_end":1311,"column_start":5,"column_end":8}},{"value":"/ Write unsigned 48 bit big-endian integers to a `Write`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":146168,"byte_end":146227,"line_start":1312,"line_end":1312,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":146232,"byte_end":146235,"line_start":1313,"line_end":1313,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":146240,"byte_end":146251,"line_start":1314,"line_end":1314,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":146256,"byte_end":146302,"line_start":1315,"line_end":1315,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":146307,"byte_end":146310,"line_start":1316,"line_end":1316,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":146315,"byte_end":146344,"line_start":1317,"line_end":1317,"column_start":5,"column_end":34}},{"value":"/ wtr.write_u48::<BigEndian>(52360336390828).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":146349,"byte_end":146405,"line_start":1318,"line_end":1318,"column_start":5,"column_end":61}},{"value":"/ wtr.write_u48::<BigEndian>(541).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":146410,"byte_end":146455,"line_start":1319,"line_end":1319,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(wtr, b\"\\x2f\\x9f\\x17\\x40\\x3a\\xac\\x00\\x00\\x00\\x00\\x02\\x1d\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":146460,"byte_end":146533,"line_start":1320,"line_end":1320,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":146538,"byte_end":146545,"line_start":1321,"line_end":1321,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":146550,"byte_end":146559,"line_start":1322,"line_end":1322,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":147436,"byte_end":147445,"line_start":1350,"line_end":1350,"column_start":8,"column_end":17},"name":"write_i48","qualname":"::io::WriteBytesExt::write_i48","value":"pub fn write_i48<T: ByteOrder>(&mut Self, i64) -> Result<()>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Writes a signed 48 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 48 bit integer to the underlying writer.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":146731,"byte_end":146791,"line_start":1329,"line_end":1329,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":146796,"byte_end":146799,"line_start":1330,"line_end":1330,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":146804,"byte_end":146816,"line_start":1331,"line_end":1331,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":146821,"byte_end":146824,"line_start":1332,"line_end":1332,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":146829,"byte_end":146893,"line_start":1333,"line_end":1333,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":146898,"byte_end":146901,"line_start":1334,"line_end":1334,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":146906,"byte_end":146998,"line_start":1335,"line_end":1335,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":147003,"byte_end":147006,"line_start":1336,"line_end":1336,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":147011,"byte_end":147025,"line_start":1337,"line_end":1337,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":147030,"byte_end":147033,"line_start":1338,"line_end":1338,"column_start":5,"column_end":8}},{"value":"/ Write signed 48 bit big-endian integers to a `Write`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":147038,"byte_end":147095,"line_start":1339,"line_end":1339,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":147100,"byte_end":147103,"line_start":1340,"line_end":1340,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":147108,"byte_end":147119,"line_start":1341,"line_end":1341,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":147124,"byte_end":147170,"line_start":1342,"line_end":1342,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":147175,"byte_end":147178,"line_start":1343,"line_end":1343,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":147183,"byte_end":147212,"line_start":1344,"line_end":1344,"column_start":5,"column_end":34}},{"value":"/ wtr.write_i48::<BigEndian>(-108363435763825).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":147217,"byte_end":147275,"line_start":1345,"line_end":1345,"column_start":5,"column_end":63}},{"value":"/ wtr.write_i48::<BigEndian>(77).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":147280,"byte_end":147324,"line_start":1346,"line_end":1346,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(wtr, b\"\\x9d\\x71\\xab\\xe7\\x97\\x8f\\x00\\x00\\x00\\x00\\x00\\x4d\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":147329,"byte_end":147402,"line_start":1347,"line_end":1347,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":147407,"byte_end":147414,"line_start":1348,"line_end":1348,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":147419,"byte_end":147428,"line_start":1349,"line_end":1349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":148326,"byte_end":148335,"line_start":1377,"line_end":1377,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::io::WriteBytesExt::write_u64","value":"pub fn write_u64<T: ByteOrder>(&mut Self, u64) -> Result<()>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Writes an unsigned 64 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 64 bit integer to the underlying writer.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":147600,"byte_end":147663,"line_start":1356,"line_end":1356,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":147668,"byte_end":147671,"line_start":1357,"line_end":1357,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":147676,"byte_end":147688,"line_start":1358,"line_end":1358,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":147693,"byte_end":147696,"line_start":1359,"line_end":1359,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":147701,"byte_end":147765,"line_start":1360,"line_end":1360,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":147770,"byte_end":147773,"line_start":1361,"line_end":1361,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":147778,"byte_end":147870,"line_start":1362,"line_end":1362,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":147875,"byte_end":147878,"line_start":1363,"line_end":1363,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":147883,"byte_end":147897,"line_start":1364,"line_end":1364,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":147902,"byte_end":147905,"line_start":1365,"line_end":1365,"column_start":5,"column_end":8}},{"value":"/ Write unsigned 64 bit big-endian integers to a `Write`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":147910,"byte_end":147969,"line_start":1366,"line_end":1366,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":147974,"byte_end":147977,"line_start":1367,"line_end":1367,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":147982,"byte_end":147993,"line_start":1368,"line_end":1368,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":147998,"byte_end":148044,"line_start":1369,"line_end":1369,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":148049,"byte_end":148052,"line_start":1370,"line_end":1370,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":148057,"byte_end":148086,"line_start":1371,"line_end":1371,"column_start":5,"column_end":34}},{"value":"/ wtr.write_u64::<BigEndian>(918733457491587).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":148091,"byte_end":148148,"line_start":1372,"line_end":1372,"column_start":5,"column_end":62}},{"value":"/ wtr.write_u64::<BigEndian>(143).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":148153,"byte_end":148198,"line_start":1373,"line_end":1373,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(wtr, b\"\\x00\\x03\\x43\\x95\\x4d\\x60\\x86\\x83\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8f\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":148203,"byte_end":148292,"line_start":1374,"line_end":1374,"column_start":5,"column_end":94}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":148297,"byte_end":148304,"line_start":1375,"line_end":1375,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":148309,"byte_end":148318,"line_start":1376,"line_end":1376,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":149225,"byte_end":149234,"line_start":1404,"line_end":1404,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::io::WriteBytesExt::write_i64","value":"pub fn write_i64<T: ByteOrder>(&mut Self, i64) -> Result<()>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Writes a signed 64 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 64 bit integer to the underlying writer.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":148490,"byte_end":148550,"line_start":1383,"line_end":1383,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":148555,"byte_end":148558,"line_start":1384,"line_end":1384,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":148563,"byte_end":148575,"line_start":1385,"line_end":1385,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":148580,"byte_end":148583,"line_start":1386,"line_end":1386,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":148588,"byte_end":148652,"line_start":1387,"line_end":1387,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":148657,"byte_end":148660,"line_start":1388,"line_end":1388,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":148665,"byte_end":148757,"line_start":1389,"line_end":1389,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":148762,"byte_end":148765,"line_start":1390,"line_end":1390,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":148770,"byte_end":148784,"line_start":1391,"line_end":1391,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":148789,"byte_end":148792,"line_start":1392,"line_end":1392,"column_start":5,"column_end":8}},{"value":"/ Write signed 64 bit big-endian integers to a `Write`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":148797,"byte_end":148854,"line_start":1393,"line_end":1393,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":148859,"byte_end":148862,"line_start":1394,"line_end":1394,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":148867,"byte_end":148878,"line_start":1395,"line_end":1395,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":148883,"byte_end":148929,"line_start":1396,"line_end":1396,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":148934,"byte_end":148937,"line_start":1397,"line_end":1397,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":148942,"byte_end":148971,"line_start":1398,"line_end":1398,"column_start":5,"column_end":34}},{"value":"/ wtr.write_i64::<BigEndian>(i64::min_value()).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":148976,"byte_end":149034,"line_start":1399,"line_end":1399,"column_start":5,"column_end":63}},{"value":"/ wtr.write_i64::<BigEndian>(i64::max_value()).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":149039,"byte_end":149097,"line_start":1400,"line_end":1400,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(wtr, b\"\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":149102,"byte_end":149191,"line_start":1401,"line_end":1401,"column_start":5,"column_end":94}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":149196,"byte_end":149203,"line_start":1402,"line_end":1402,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":149208,"byte_end":149217,"line_start":1403,"line_end":1403,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":149502,"byte_end":149512,"line_start":1413,"line_end":1413,"column_start":8,"column_end":18},"name":"write_u128","qualname":"::io::WriteBytesExt::write_u128","value":"pub fn write_u128<T: ByteOrder>(&mut Self, u128) -> Result<()>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Writes an unsigned 128 bit integer to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Writes an unsigned 128 bit integer to the underlying writer.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":149389,"byte_end":149453,"line_start":1410,"line_end":1410,"column_start":5,"column_end":69}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":149458,"byte_end":149480,"line_start":1411,"line_end":1411,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":149485,"byte_end":149494,"line_start":1412,"line_end":1412,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":149780,"byte_end":149790,"line_start":1422,"line_end":1422,"column_start":8,"column_end":18},"name":"write_i128","qualname":"::io::WriteBytesExt::write_i128","value":"pub fn write_i128<T: ByteOrder>(&mut Self, i128) -> Result<()>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Writes a signed 128 bit integer to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Writes a signed 128 bit integer to the underlying writer.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":149670,"byte_end":149731,"line_start":1419,"line_end":1419,"column_start":5,"column_end":66}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":149736,"byte_end":149758,"line_start":1420,"line_end":1420,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":149763,"byte_end":149772,"line_start":1421,"line_end":1421,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":150833,"byte_end":150843,"line_start":1454,"line_end":1454,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::io::WriteBytesExt::write_uint","value":"pub fn write_uint<T: ByteOrder>(&mut Self, u64, usize) -> Result<()>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Writes an unsigned n-bytes integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned n-bytes integer to the underlying writer.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":149948,"byte_end":150012,"line_start":1428,"line_end":1428,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":150017,"byte_end":150020,"line_start":1429,"line_end":1429,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":150025,"byte_end":150037,"line_start":1430,"line_end":1430,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":150042,"byte_end":150045,"line_start":1431,"line_end":1431,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":150050,"byte_end":150114,"line_start":1432,"line_end":1432,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":150119,"byte_end":150122,"line_start":1433,"line_end":1433,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":150127,"byte_end":150219,"line_start":1434,"line_end":1434,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":150224,"byte_end":150227,"line_start":1435,"line_end":1435,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":150232,"byte_end":150244,"line_start":1436,"line_end":1436,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":150249,"byte_end":150252,"line_start":1437,"line_end":1437,"column_start":5,"column_end":8}},{"value":"/ If the given integer is not representable in the given number of bytes,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":150257,"byte_end":150332,"line_start":1438,"line_end":1438,"column_start":5,"column_end":80}},{"value":"/ this method panics. If `nbytes > 8`, this method panics.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":150337,"byte_end":150397,"line_start":1439,"line_end":1439,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":150402,"byte_end":150405,"line_start":1440,"line_end":1440,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":150410,"byte_end":150424,"line_start":1441,"line_end":1441,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":150429,"byte_end":150432,"line_start":1442,"line_end":1442,"column_start":5,"column_end":8}},{"value":"/ Write unsigned 40 bit big-endian integers to a `Write`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":150437,"byte_end":150496,"line_start":1443,"line_end":1443,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":150501,"byte_end":150504,"line_start":1444,"line_end":1444,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":150509,"byte_end":150520,"line_start":1445,"line_end":1445,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":150525,"byte_end":150571,"line_start":1446,"line_end":1446,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":150576,"byte_end":150579,"line_start":1447,"line_end":1447,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":150584,"byte_end":150613,"line_start":1448,"line_end":1448,"column_start":5,"column_end":34}},{"value":"/ wtr.write_uint::<BigEndian>(312550384361, 5).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":150618,"byte_end":150676,"line_start":1449,"line_end":1449,"column_start":5,"column_end":63}},{"value":"/ wtr.write_uint::<BigEndian>(43, 5).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":150681,"byte_end":150729,"line_start":1450,"line_end":1450,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(wtr, b\"\\x48\\xc5\\x74\\x62\\xe9\\x00\\x00\\x00\\x00\\x2b\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":150734,"byte_end":150799,"line_start":1451,"line_end":1451,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":150804,"byte_end":150811,"line_start":1452,"line_end":1452,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":150816,"byte_end":150825,"line_start":1453,"line_end":1453,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":151963,"byte_end":151972,"line_start":1490,"line_end":1490,"column_start":8,"column_end":17},"name":"write_int","qualname":"::io::WriteBytesExt::write_int","value":"pub fn write_int<T: ByteOrder>(&mut Self, i64, usize) -> Result<()>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Writes a signed n-bytes integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed n-bytes integer to the underlying writer.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":151064,"byte_end":151125,"line_start":1464,"line_end":1464,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":151130,"byte_end":151133,"line_start":1465,"line_end":1465,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":151138,"byte_end":151150,"line_start":1466,"line_end":1466,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":151155,"byte_end":151158,"line_start":1467,"line_end":1467,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":151163,"byte_end":151227,"line_start":1468,"line_end":1468,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":151232,"byte_end":151235,"line_start":1469,"line_end":1469,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":151240,"byte_end":151332,"line_start":1470,"line_end":1470,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":151337,"byte_end":151340,"line_start":1471,"line_end":1471,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":151345,"byte_end":151357,"line_start":1472,"line_end":1472,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":151362,"byte_end":151365,"line_start":1473,"line_end":1473,"column_start":5,"column_end":8}},{"value":"/ If the given integer is not representable in the given number of bytes,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":151370,"byte_end":151445,"line_start":1474,"line_end":1474,"column_start":5,"column_end":80}},{"value":"/ this method panics. If `nbytes > 8`, this method panics.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":151450,"byte_end":151510,"line_start":1475,"line_end":1475,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":151515,"byte_end":151518,"line_start":1476,"line_end":1476,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":151523,"byte_end":151537,"line_start":1477,"line_end":1477,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":151542,"byte_end":151545,"line_start":1478,"line_end":1478,"column_start":5,"column_end":8}},{"value":"/ Write signed 56 bit big-endian integers to a `Write`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":151550,"byte_end":151607,"line_start":1479,"line_end":1479,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":151612,"byte_end":151615,"line_start":1480,"line_end":1480,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":151620,"byte_end":151631,"line_start":1481,"line_end":1481,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":151636,"byte_end":151682,"line_start":1482,"line_end":1482,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":151687,"byte_end":151690,"line_start":1483,"line_end":1483,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":151695,"byte_end":151724,"line_start":1484,"line_end":1484,"column_start":5,"column_end":34}},{"value":"/ wtr.write_int::<BigEndian>(-3548172039376767, 7).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":151729,"byte_end":151791,"line_start":1485,"line_end":1485,"column_start":5,"column_end":67}},{"value":"/ wtr.write_int::<BigEndian>(43, 7).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":151796,"byte_end":151843,"line_start":1486,"line_end":1486,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(wtr, b\"\\xf3\\x64\\xf4\\xd1\\xfd\\xb0\\x81\\x00\\x00\\x00\\x00\\x00\\x00\\x2b\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":151848,"byte_end":151929,"line_start":1487,"line_end":1487,"column_start":5,"column_end":86}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":151934,"byte_end":151941,"line_start":1488,"line_end":1488,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":151946,"byte_end":151955,"line_start":1489,"line_end":1489,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":152459,"byte_end":152472,"line_start":1506,"line_end":1506,"column_start":8,"column_end":21},"name":"write_uint128","qualname":"::io::WriteBytesExt::write_uint128","value":"pub fn write_uint128<T: ByteOrder>(&mut Self, u128, usize) -> Result<()>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Writes an unsigned n-bytes integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned n-bytes integer to the underlying writer.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":152192,"byte_end":152256,"line_start":1500,"line_end":1500,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":152261,"byte_end":152264,"line_start":1501,"line_end":1501,"column_start":5,"column_end":8}},{"value":"/ If the given integer is not representable in the given number of bytes,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":152269,"byte_end":152344,"line_start":1502,"line_end":1502,"column_start":5,"column_end":80}},{"value":"/ this method panics. If `nbytes > 16`, this method panics.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":152349,"byte_end":152410,"line_start":1503,"line_end":1503,"column_start":5,"column_end":66}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":152415,"byte_end":152437,"line_start":1504,"line_end":1504,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":152442,"byte_end":152451,"line_start":1505,"line_end":1505,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":152962,"byte_end":152974,"line_start":1522,"line_end":1522,"column_start":8,"column_end":20},"name":"write_int128","qualname":"::io::WriteBytesExt::write_int128","value":"pub fn write_int128<T: ByteOrder>(&mut Self, i128, usize) -> Result<()>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Writes a signed n-bytes integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed n-bytes integer to the underlying writer.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":152698,"byte_end":152759,"line_start":1516,"line_end":1516,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":152764,"byte_end":152767,"line_start":1517,"line_end":1517,"column_start":5,"column_end":8}},{"value":"/ If the given integer is not representable in the given number of bytes,","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":152772,"byte_end":152847,"line_start":1518,"line_end":1518,"column_start":5,"column_end":80}},{"value":"/ this method panics. If `nbytes > 16`, this method panics.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":152852,"byte_end":152913,"line_start":1519,"line_end":1519,"column_start":5,"column_end":66}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":152918,"byte_end":152940,"line_start":1520,"line_end":1520,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":152945,"byte_end":152954,"line_start":1521,"line_end":1521,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":153913,"byte_end":153922,"line_start":1555,"line_end":1555,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::io::WriteBytesExt::write_f32","value":"pub fn write_f32<T: ByteOrder>(&mut Self, f32) -> Result<()>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Writes a IEEE754 single-precision (4 bytes) floating point number to\n the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a IEEE754 single-precision (4 bytes) floating point number to","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":153199,"byte_end":153271,"line_start":1532,"line_end":1532,"column_start":5,"column_end":77}},{"value":"/ the underlying writer.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":153276,"byte_end":153302,"line_start":1533,"line_end":1533,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":153307,"byte_end":153310,"line_start":1534,"line_end":1534,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":153315,"byte_end":153327,"line_start":1535,"line_end":1535,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":153332,"byte_end":153335,"line_start":1536,"line_end":1536,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":153340,"byte_end":153404,"line_start":1537,"line_end":1537,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":153409,"byte_end":153412,"line_start":1538,"line_end":1538,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":153417,"byte_end":153509,"line_start":1539,"line_end":1539,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":153514,"byte_end":153517,"line_start":1540,"line_end":1540,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":153522,"byte_end":153536,"line_start":1541,"line_end":1541,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":153541,"byte_end":153544,"line_start":1542,"line_end":1542,"column_start":5,"column_end":8}},{"value":"/ Write a big-endian single-precision floating point number to a `Write`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":153549,"byte_end":153624,"line_start":1543,"line_end":1543,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":153629,"byte_end":153632,"line_start":1544,"line_end":1544,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":153637,"byte_end":153648,"line_start":1545,"line_end":1545,"column_start":5,"column_end":16}},{"value":"/ use std::f32;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":153653,"byte_end":153670,"line_start":1546,"line_end":1546,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":153675,"byte_end":153678,"line_start":1547,"line_end":1547,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":153683,"byte_end":153729,"line_start":1548,"line_end":1548,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":153734,"byte_end":153737,"line_start":1549,"line_end":1549,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":153742,"byte_end":153771,"line_start":1550,"line_end":1550,"column_start":5,"column_end":34}},{"value":"/ wtr.write_f32::<BigEndian>(f32::consts::PI).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":153776,"byte_end":153833,"line_start":1551,"line_end":1551,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(wtr, b\"\\x40\\x49\\x0f\\xdb\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":153838,"byte_end":153879,"line_start":1552,"line_end":1552,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":153884,"byte_end":153891,"line_start":1553,"line_end":1553,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":153896,"byte_end":153905,"line_start":1554,"line_end":1554,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":154807,"byte_end":154816,"line_start":1584,"line_end":1584,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::io::WriteBytesExt::write_f64","value":"pub fn write_f64<T: ByteOrder>(&mut Self, f64) -> Result<()>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Writes a IEEE754 double-precision (8 bytes) floating point number to\n the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a IEEE754 double-precision (8 bytes) floating point number to","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":154077,"byte_end":154149,"line_start":1561,"line_end":1561,"column_start":5,"column_end":77}},{"value":"/ the underlying writer.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":154154,"byte_end":154180,"line_start":1562,"line_end":1562,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":154185,"byte_end":154188,"line_start":1563,"line_end":1563,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":154193,"byte_end":154205,"line_start":1564,"line_end":1564,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":154210,"byte_end":154213,"line_start":1565,"line_end":1565,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":154218,"byte_end":154282,"line_start":1566,"line_end":1566,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":154287,"byte_end":154290,"line_start":1567,"line_end":1567,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":154295,"byte_end":154387,"line_start":1568,"line_end":1568,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":154392,"byte_end":154395,"line_start":1569,"line_end":1569,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":154400,"byte_end":154414,"line_start":1570,"line_end":1570,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":154419,"byte_end":154422,"line_start":1571,"line_end":1571,"column_start":5,"column_end":8}},{"value":"/ Write a big-endian double-precision floating point number to a `Write`:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":154427,"byte_end":154502,"line_start":1572,"line_end":1572,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":154507,"byte_end":154510,"line_start":1573,"line_end":1573,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":154515,"byte_end":154526,"line_start":1574,"line_end":1574,"column_start":5,"column_end":16}},{"value":"/ use std::f64;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":154531,"byte_end":154548,"line_start":1575,"line_end":1575,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":154553,"byte_end":154556,"line_start":1576,"line_end":1576,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":154561,"byte_end":154607,"line_start":1577,"line_end":1577,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":154612,"byte_end":154615,"line_start":1578,"line_end":1578,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":154620,"byte_end":154649,"line_start":1579,"line_end":1579,"column_start":5,"column_end":34}},{"value":"/ wtr.write_f64::<BigEndian>(f64::consts::PI).unwrap();","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":154654,"byte_end":154711,"line_start":1580,"line_end":1580,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(wtr, b\"\\x40\\x09\\x21\\xfb\\x54\\x44\\x2d\\x18\");","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":154716,"byte_end":154773,"line_start":1581,"line_end":1581,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":154778,"byte_end":154785,"line_start":1582,"line_end":1582,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":154790,"byte_end":154799,"line_start":1583,"line_end":1583,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":194},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":4550,"byte_end":4556,"line_start":185,"line_end":185,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::private::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":" Sealed stops crates other than byteorder from implementing any traits\n that use it.\n","sig":null,"attributes":[{"value":"/ Sealed stops crates other than byteorder from implementing any traits","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":4441,"byte_end":4514,"line_start":183,"line_end":183,"column_start":5,"column_end":78}},{"value":"/ that use it.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":4519,"byte_end":4535,"line_start":184,"line_end":184,"column_start":5,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":197},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5802,"byte_end":5811,"line_start":225,"line_end":225,"column_start":11,"column_end":20},"name":"ByteOrder","qualname":"::ByteOrder","value":"ByteOrder: Clone + Copy + Debug + Default + Eq + Hash + Ord + PartialEq + PartialOrd +\nprivate::Sealed","parent":null,"children":[{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266}],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[{"value":"/ `ByteOrder` describes types that can serialize integers as bytes.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":4645,"byte_end":4714,"line_start":190,"line_end":190,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":4715,"byte_end":4718,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ Note that `Self` does not appear anywhere in this trait's definition!","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":4719,"byte_end":4792,"line_start":192,"line_end":192,"column_start":1,"column_end":74}},{"value":"/ Therefore, in order to use it, you'll need to use syntax like","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":4793,"byte_end":4858,"line_start":193,"line_end":193,"column_start":1,"column_end":66}},{"value":"/ `T::read_u16(&[0, 1])` where `T` implements `ByteOrder`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":4859,"byte_end":4919,"line_start":194,"line_end":194,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":4920,"byte_end":4923,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ This crate provides two types that implement `ByteOrder`: [`BigEndian`]","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":4924,"byte_end":4999,"line_start":196,"line_end":196,"column_start":1,"column_end":76}},{"value":"/ and [`LittleEndian`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5000,"byte_end":5025,"line_start":197,"line_end":197,"column_start":1,"column_end":26}},{"value":"/ This trait is sealed and cannot be implemented for callers to avoid","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5026,"byte_end":5097,"line_start":198,"line_end":198,"column_start":1,"column_end":72}},{"value":"/ breaking backwards compatibility when adding new derived traits.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5098,"byte_end":5166,"line_start":199,"line_end":199,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5167,"byte_end":5170,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5171,"byte_end":5185,"line_start":201,"line_end":201,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5186,"byte_end":5189,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5190,"byte_end":5246,"line_start":203,"line_end":203,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5247,"byte_end":5250,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5251,"byte_end":5262,"line_start":205,"line_end":205,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5263,"byte_end":5308,"line_start":206,"line_end":206,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5309,"byte_end":5312,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5313,"byte_end":5338,"line_start":208,"line_end":208,"column_start":1,"column_end":26}},{"value":"/ LittleEndian::write_u32(&mut buf, 1_000_000);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5339,"byte_end":5388,"line_start":209,"line_end":209,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u32(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5389,"byte_end":5445,"line_start":210,"line_end":210,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5446,"byte_end":5453,"line_start":211,"line_end":211,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5454,"byte_end":5457,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ Write and read `i16` numbers in big endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5458,"byte_end":5511,"line_start":213,"line_end":213,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5512,"byte_end":5515,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5516,"byte_end":5527,"line_start":215,"line_end":215,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5528,"byte_end":5570,"line_start":216,"line_end":216,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5571,"byte_end":5574,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 2];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5575,"byte_end":5600,"line_start":218,"line_end":218,"column_start":1,"column_end":26}},{"value":"/ BigEndian::write_i16(&mut buf, -5_000);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5601,"byte_end":5644,"line_start":219,"line_end":219,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(-5_000, BigEndian::read_i16(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5645,"byte_end":5695,"line_start":220,"line_end":220,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5696,"byte_end":5703,"line_start":221,"line_end":221,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5704,"byte_end":5707,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ [`BigEndian`]: enum.BigEndian.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5708,"byte_end":5746,"line_start":223,"line_end":223,"column_start":1,"column_end":39}},{"value":"/ [`LittleEndian`]: enum.LittleEndian.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5747,"byte_end":5791,"line_start":224,"line_end":224,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6046,"byte_end":6054,"line_start":234,"line_end":234,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::ByteOrder::read_u16","value":"pub fn read_u16(&[u8]) -> u16","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Reads an unsigned 16 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 16 bit integer from `buf`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5920,"byte_end":5968,"line_start":229,"line_end":229,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5973,"byte_end":5976,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5981,"byte_end":5993,"line_start":231,"line_end":231,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5998,"byte_end":6001,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6006,"byte_end":6038,"line_start":233,"line_end":233,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6563,"byte_end":6571,"line_start":253,"line_end":253,"column_start":8,"column_end":16},"name":"read_u24","qualname":"::ByteOrder::read_u24","value":"pub fn read_u24(&[u8]) -> u32","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Reads an unsigned 24 bit integer from `buf`, stored in u32.","sig":null,"attributes":[{"value":"/ Reads an unsigned 24 bit integer from `buf`, stored in u32.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6080,"byte_end":6143,"line_start":236,"line_end":236,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6148,"byte_end":6151,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6156,"byte_end":6168,"line_start":238,"line_end":238,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6173,"byte_end":6176,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 3`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6181,"byte_end":6213,"line_start":240,"line_end":240,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6218,"byte_end":6221,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6226,"byte_end":6240,"line_start":242,"line_end":242,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6245,"byte_end":6248,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ Write and read 24 bit `u32` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6253,"byte_end":6316,"line_start":244,"line_end":244,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6321,"byte_end":6324,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6329,"byte_end":6340,"line_start":246,"line_end":246,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6345,"byte_end":6390,"line_start":247,"line_end":247,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6395,"byte_end":6398,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6403,"byte_end":6428,"line_start":249,"line_end":249,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u24(&mut buf, 1_000_000);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6433,"byte_end":6482,"line_start":250,"line_end":250,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u24(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6487,"byte_end":6543,"line_start":251,"line_end":251,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6548,"byte_end":6555,"line_start":252,"line_end":252,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7104,"byte_end":7112,"line_start":274,"line_end":274,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::ByteOrder::read_u32","value":"pub fn read_u32(&[u8]) -> u32","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Reads an unsigned 32 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 32 bit integer from `buf`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6643,"byte_end":6691,"line_start":257,"line_end":257,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6696,"byte_end":6699,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6704,"byte_end":6716,"line_start":259,"line_end":259,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6721,"byte_end":6724,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6729,"byte_end":6761,"line_start":261,"line_end":261,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6766,"byte_end":6769,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6774,"byte_end":6788,"line_start":263,"line_end":263,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6793,"byte_end":6796,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6801,"byte_end":6857,"line_start":265,"line_end":265,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6862,"byte_end":6865,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6870,"byte_end":6881,"line_start":267,"line_end":267,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6886,"byte_end":6931,"line_start":268,"line_end":268,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6936,"byte_end":6939,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6944,"byte_end":6969,"line_start":270,"line_end":270,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u32(&mut buf, 1_000_000);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":6974,"byte_end":7023,"line_start":271,"line_end":271,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u32(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7028,"byte_end":7084,"line_start":272,"line_end":272,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7089,"byte_end":7096,"line_start":273,"line_end":273,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7637,"byte_end":7645,"line_start":293,"line_end":293,"column_start":8,"column_end":16},"name":"read_u48","qualname":"::ByteOrder::read_u48","value":"pub fn read_u48(&[u8]) -> u64","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Reads an unsigned 48 bit integer from `buf`, stored in u64.","sig":null,"attributes":[{"value":"/ Reads an unsigned 48 bit integer from `buf`, stored in u64.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7138,"byte_end":7201,"line_start":276,"line_end":276,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7206,"byte_end":7209,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7214,"byte_end":7226,"line_start":278,"line_end":278,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7231,"byte_end":7234,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 6`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7239,"byte_end":7271,"line_start":280,"line_end":280,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7276,"byte_end":7279,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7284,"byte_end":7298,"line_start":282,"line_end":282,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7303,"byte_end":7306,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ Write and read 48 bit `u64` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7311,"byte_end":7374,"line_start":284,"line_end":284,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7379,"byte_end":7382,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7387,"byte_end":7398,"line_start":286,"line_end":286,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7403,"byte_end":7448,"line_start":287,"line_end":287,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7453,"byte_end":7456,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 6];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7461,"byte_end":7486,"line_start":289,"line_end":289,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u48(&mut buf, 1_000_000_000_000);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7491,"byte_end":7548,"line_start":290,"line_end":290,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(1_000_000_000_000, LittleEndian::read_u48(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7553,"byte_end":7617,"line_start":291,"line_end":291,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7622,"byte_end":7629,"line_start":292,"line_end":292,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8178,"byte_end":8186,"line_start":314,"line_end":314,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::ByteOrder::read_u64","value":"pub fn read_u64(&[u8]) -> u64","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Reads an unsigned 64 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 64 bit integer from `buf`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7717,"byte_end":7765,"line_start":297,"line_end":297,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7770,"byte_end":7773,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7778,"byte_end":7790,"line_start":299,"line_end":299,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7795,"byte_end":7798,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7803,"byte_end":7835,"line_start":301,"line_end":301,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7840,"byte_end":7843,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7848,"byte_end":7862,"line_start":303,"line_end":303,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7867,"byte_end":7870,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ Write and read `u64` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7875,"byte_end":7931,"line_start":305,"line_end":305,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7936,"byte_end":7939,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7944,"byte_end":7955,"line_start":307,"line_end":307,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":7960,"byte_end":8005,"line_start":308,"line_end":308,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8010,"byte_end":8013,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8018,"byte_end":8043,"line_start":310,"line_end":310,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u64(&mut buf, 1_000_000);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8048,"byte_end":8097,"line_start":311,"line_end":311,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u64(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8102,"byte_end":8158,"line_start":312,"line_end":312,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8163,"byte_end":8170,"line_start":313,"line_end":313,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8706,"byte_end":8715,"line_start":334,"line_end":334,"column_start":8,"column_end":17},"name":"read_u128","qualname":"::ByteOrder::read_u128","value":"pub fn read_u128(&[u8]) -> u128","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Reads an unsigned 128 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 128 bit integer from `buf`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8212,"byte_end":8261,"line_start":316,"line_end":316,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8266,"byte_end":8269,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8274,"byte_end":8286,"line_start":318,"line_end":318,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8291,"byte_end":8294,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 16`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8299,"byte_end":8332,"line_start":320,"line_end":320,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8337,"byte_end":8340,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8345,"byte_end":8359,"line_start":322,"line_end":322,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8364,"byte_end":8367,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ Write and read `u128` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8372,"byte_end":8429,"line_start":324,"line_end":324,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8434,"byte_end":8437,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8442,"byte_end":8453,"line_start":326,"line_end":326,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8458,"byte_end":8503,"line_start":327,"line_end":327,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8508,"byte_end":8511,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 16];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8516,"byte_end":8542,"line_start":329,"line_end":329,"column_start":5,"column_end":31}},{"value":"/ LittleEndian::write_u128(&mut buf, 1_000_000);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8547,"byte_end":8597,"line_start":330,"line_end":330,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u128(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8602,"byte_end":8659,"line_start":331,"line_end":331,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8664,"byte_end":8671,"line_start":332,"line_end":332,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8676,"byte_end":8698,"line_start":333,"line_end":333,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9259,"byte_end":9268,"line_start":354,"line_end":354,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::ByteOrder::read_uint","value":"pub fn read_uint(&[u8], usize) -> u64","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned n-bytes integer from `buf`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8742,"byte_end":8791,"line_start":336,"line_end":336,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8796,"byte_end":8799,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8804,"byte_end":8816,"line_start":338,"line_end":338,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8821,"byte_end":8824,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ Panics when `nbytes < 1` or `nbytes > 8` or","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8829,"byte_end":8876,"line_start":340,"line_end":340,"column_start":5,"column_end":52}},{"value":"/ `buf.len() < nbytes`","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8881,"byte_end":8905,"line_start":341,"line_end":341,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8910,"byte_end":8913,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8918,"byte_end":8932,"line_start":343,"line_end":343,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8937,"byte_end":8940,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ Write and read an n-byte number in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":8945,"byte_end":9004,"line_start":345,"line_end":345,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9009,"byte_end":9012,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9017,"byte_end":9028,"line_start":347,"line_end":347,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9033,"byte_end":9078,"line_start":348,"line_end":348,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9083,"byte_end":9086,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9091,"byte_end":9116,"line_start":350,"line_end":350,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_uint(&mut buf, 1_000_000, 3);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9121,"byte_end":9174,"line_start":351,"line_end":351,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9179,"byte_end":9239,"line_start":352,"line_end":352,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9244,"byte_end":9251,"line_start":353,"line_end":353,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9860,"byte_end":9872,"line_start":375,"line_end":375,"column_start":8,"column_end":20},"name":"read_uint128","qualname":"::ByteOrder::read_uint128","value":"pub fn read_uint128(&[u8], usize) -> u128","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned n-bytes integer from `buf`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9309,"byte_end":9358,"line_start":356,"line_end":356,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9363,"byte_end":9366,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9371,"byte_end":9383,"line_start":358,"line_end":358,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9388,"byte_end":9391,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ Panics when `nbytes < 1` or `nbytes > 16` or","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9396,"byte_end":9444,"line_start":360,"line_end":360,"column_start":5,"column_end":53}},{"value":"/ `buf.len() < nbytes`","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9449,"byte_end":9473,"line_start":361,"line_end":361,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9478,"byte_end":9481,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9486,"byte_end":9500,"line_start":363,"line_end":363,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9505,"byte_end":9508,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ Write and read an n-byte number in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9513,"byte_end":9572,"line_start":365,"line_end":365,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9577,"byte_end":9580,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9585,"byte_end":9596,"line_start":367,"line_end":367,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9601,"byte_end":9646,"line_start":368,"line_end":368,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9651,"byte_end":9654,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9659,"byte_end":9684,"line_start":370,"line_end":370,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_uint128(&mut buf, 1_000_000, 3);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9689,"byte_end":9745,"line_start":371,"line_end":371,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_uint128(&buf, 3));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9750,"byte_end":9813,"line_start":372,"line_end":372,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9818,"byte_end":9825,"line_start":373,"line_end":373,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9830,"byte_end":9852,"line_start":374,"line_end":374,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10370,"byte_end":10379,"line_start":394,"line_end":394,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::ByteOrder::write_u16","value":"pub fn write_u16(&mut [u8], u16)","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Writes an unsigned 16 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 16 bit integer `n` to `buf`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9914,"byte_end":9965,"line_start":377,"line_end":377,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9970,"byte_end":9973,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9978,"byte_end":9990,"line_start":379,"line_end":379,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":9995,"byte_end":9998,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10003,"byte_end":10035,"line_start":381,"line_end":381,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10040,"byte_end":10043,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10048,"byte_end":10062,"line_start":383,"line_end":383,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10067,"byte_end":10070,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ Write and read `u16` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10075,"byte_end":10131,"line_start":385,"line_end":385,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10136,"byte_end":10139,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10144,"byte_end":10155,"line_start":387,"line_end":387,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10160,"byte_end":10205,"line_start":388,"line_end":388,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10210,"byte_end":10213,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 2];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10218,"byte_end":10243,"line_start":390,"line_end":390,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u16(&mut buf, 1_000);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10248,"byte_end":10293,"line_start":391,"line_end":391,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(1_000, LittleEndian::read_u16(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10298,"byte_end":10350,"line_start":392,"line_end":392,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10355,"byte_end":10362,"line_start":393,"line_end":393,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10896,"byte_end":10905,"line_start":413,"line_end":413,"column_start":8,"column_end":17},"name":"write_u24","qualname":"::ByteOrder::write_u24","value":"pub fn write_u24(&mut [u8], u32)","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.","sig":null,"attributes":[{"value":"/ Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10410,"byte_end":10476,"line_start":396,"line_end":396,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10481,"byte_end":10484,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10489,"byte_end":10501,"line_start":398,"line_end":398,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10506,"byte_end":10509,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 3`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10514,"byte_end":10546,"line_start":400,"line_end":400,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10551,"byte_end":10554,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10559,"byte_end":10573,"line_start":402,"line_end":402,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10578,"byte_end":10581,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ Write and read 24 bit `u32` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10586,"byte_end":10649,"line_start":404,"line_end":404,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10654,"byte_end":10657,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10662,"byte_end":10673,"line_start":406,"line_end":406,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10678,"byte_end":10723,"line_start":407,"line_end":407,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10728,"byte_end":10731,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10736,"byte_end":10761,"line_start":409,"line_end":409,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u24(&mut buf, 1_000_000);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10766,"byte_end":10815,"line_start":410,"line_end":410,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u24(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10820,"byte_end":10876,"line_start":411,"line_end":411,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10881,"byte_end":10888,"line_start":412,"line_end":412,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11450,"byte_end":11459,"line_start":434,"line_end":434,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::ByteOrder::write_u32","value":"pub fn write_u32(&mut [u8], u32)","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Writes an unsigned 32 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 32 bit integer `n` to `buf`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":10986,"byte_end":11037,"line_start":417,"line_end":417,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11042,"byte_end":11045,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11050,"byte_end":11062,"line_start":419,"line_end":419,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11067,"byte_end":11070,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11075,"byte_end":11107,"line_start":421,"line_end":421,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11112,"byte_end":11115,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11120,"byte_end":11134,"line_start":423,"line_end":423,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11139,"byte_end":11142,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11147,"byte_end":11203,"line_start":425,"line_end":425,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11208,"byte_end":11211,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11216,"byte_end":11227,"line_start":427,"line_end":427,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11232,"byte_end":11277,"line_start":428,"line_end":428,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11282,"byte_end":11285,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11290,"byte_end":11315,"line_start":430,"line_end":430,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u32(&mut buf, 1_000_000);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11320,"byte_end":11369,"line_start":431,"line_end":431,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u32(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11374,"byte_end":11430,"line_start":432,"line_end":432,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11435,"byte_end":11442,"line_start":433,"line_end":433,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11992,"byte_end":12001,"line_start":453,"line_end":453,"column_start":8,"column_end":17},"name":"write_u48","qualname":"::ByteOrder::write_u48","value":"pub fn write_u48(&mut [u8], u64)","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.","sig":null,"attributes":[{"value":"/ Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11490,"byte_end":11556,"line_start":436,"line_end":436,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11561,"byte_end":11564,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11569,"byte_end":11581,"line_start":438,"line_end":438,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11586,"byte_end":11589,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 6`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11594,"byte_end":11626,"line_start":440,"line_end":440,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11631,"byte_end":11634,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11639,"byte_end":11653,"line_start":442,"line_end":442,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11658,"byte_end":11661,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ Write and read 48 bit `u64` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11666,"byte_end":11729,"line_start":444,"line_end":444,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11734,"byte_end":11737,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11742,"byte_end":11753,"line_start":446,"line_end":446,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11758,"byte_end":11803,"line_start":447,"line_end":447,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11808,"byte_end":11811,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 6];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11816,"byte_end":11841,"line_start":449,"line_end":449,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u48(&mut buf, 1_000_000_000_000);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11846,"byte_end":11903,"line_start":450,"line_end":450,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(1_000_000_000_000, LittleEndian::read_u48(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11908,"byte_end":11972,"line_start":451,"line_end":451,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":11977,"byte_end":11984,"line_start":452,"line_end":452,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12546,"byte_end":12555,"line_start":474,"line_end":474,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::ByteOrder::write_u64","value":"pub fn write_u64(&mut [u8], u64)","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Writes an unsigned 64 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 64 bit integer `n` to `buf`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12082,"byte_end":12133,"line_start":457,"line_end":457,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12138,"byte_end":12141,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12146,"byte_end":12158,"line_start":459,"line_end":459,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12163,"byte_end":12166,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12171,"byte_end":12203,"line_start":461,"line_end":461,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12208,"byte_end":12211,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12216,"byte_end":12230,"line_start":463,"line_end":463,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12235,"byte_end":12238,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ Write and read `u64` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12243,"byte_end":12299,"line_start":465,"line_end":465,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12304,"byte_end":12307,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12312,"byte_end":12323,"line_start":467,"line_end":467,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12328,"byte_end":12373,"line_start":468,"line_end":468,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12378,"byte_end":12381,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12386,"byte_end":12411,"line_start":470,"line_end":470,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u64(&mut buf, 1_000_000);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12416,"byte_end":12465,"line_start":471,"line_end":471,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u64(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12470,"byte_end":12526,"line_start":472,"line_end":472,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12531,"byte_end":12538,"line_start":473,"line_end":473,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13083,"byte_end":13093,"line_start":494,"line_end":494,"column_start":8,"column_end":18},"name":"write_u128","qualname":"::ByteOrder::write_u128","value":"pub fn write_u128(&mut [u8], u128)","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Writes an unsigned 128 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 128 bit integer `n` to `buf`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12586,"byte_end":12638,"line_start":476,"line_end":476,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12643,"byte_end":12646,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12651,"byte_end":12663,"line_start":478,"line_end":478,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12668,"byte_end":12671,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 16`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12676,"byte_end":12709,"line_start":480,"line_end":480,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12714,"byte_end":12717,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12722,"byte_end":12736,"line_start":482,"line_end":482,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12741,"byte_end":12744,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ Write and read `u128` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12749,"byte_end":12806,"line_start":484,"line_end":484,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12811,"byte_end":12814,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12819,"byte_end":12830,"line_start":486,"line_end":486,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12835,"byte_end":12880,"line_start":487,"line_end":487,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12885,"byte_end":12888,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 16];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12893,"byte_end":12919,"line_start":489,"line_end":489,"column_start":5,"column_end":31}},{"value":"/ LittleEndian::write_u128(&mut buf, 1_000_000);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12924,"byte_end":12974,"line_start":490,"line_end":490,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u128(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":12979,"byte_end":13036,"line_start":491,"line_end":491,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13041,"byte_end":13048,"line_start":492,"line_end":492,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13053,"byte_end":13075,"line_start":493,"line_end":493,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13683,"byte_end":13693,"line_start":514,"line_end":514,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::ByteOrder::write_uint","value":"pub fn write_uint(&mut [u8], u64, usize)","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Writes an unsigned integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"/ Writes an unsigned integer `n` to `buf` using only `nbytes`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13125,"byte_end":13189,"line_start":496,"line_end":496,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13194,"byte_end":13197,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13202,"byte_end":13214,"line_start":498,"line_end":498,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13219,"byte_end":13222,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ If `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13227,"byte_end":13301,"line_start":500,"line_end":500,"column_start":5,"column_end":79}},{"value":"/ this method panics.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13306,"byte_end":13329,"line_start":501,"line_end":501,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13334,"byte_end":13337,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13342,"byte_end":13356,"line_start":503,"line_end":503,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13361,"byte_end":13364,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ Write and read an n-byte number in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13369,"byte_end":13428,"line_start":505,"line_end":505,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13433,"byte_end":13436,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13441,"byte_end":13452,"line_start":507,"line_end":507,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13457,"byte_end":13502,"line_start":508,"line_end":508,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13507,"byte_end":13510,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13515,"byte_end":13540,"line_start":510,"line_end":510,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_uint(&mut buf, 1_000_000, 3);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13545,"byte_end":13598,"line_start":511,"line_end":511,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13603,"byte_end":13663,"line_start":512,"line_end":512,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13668,"byte_end":13675,"line_start":513,"line_end":513,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14331,"byte_end":14344,"line_start":535,"line_end":535,"column_start":8,"column_end":21},"name":"write_uint128","qualname":"::ByteOrder::write_uint128","value":"pub fn write_uint128(&mut [u8], u128, usize)","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Writes an unsigned integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"/ Writes an unsigned integer `n` to `buf` using only `nbytes`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13739,"byte_end":13803,"line_start":516,"line_end":516,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13808,"byte_end":13811,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13816,"byte_end":13828,"line_start":518,"line_end":518,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13833,"byte_end":13836,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ If `n` is not representable in `nbytes`, or if `nbytes` is `> 16`, then","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13841,"byte_end":13916,"line_start":520,"line_end":520,"column_start":5,"column_end":80}},{"value":"/ this method panics.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13921,"byte_end":13944,"line_start":521,"line_end":521,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13949,"byte_end":13952,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13957,"byte_end":13971,"line_start":523,"line_end":523,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13976,"byte_end":13979,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ Write and read an n-byte number in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":13984,"byte_end":14043,"line_start":525,"line_end":525,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14048,"byte_end":14051,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14056,"byte_end":14067,"line_start":527,"line_end":527,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14072,"byte_end":14117,"line_start":528,"line_end":528,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14122,"byte_end":14125,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14130,"byte_end":14155,"line_start":530,"line_end":530,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_uint128(&mut buf, 1_000_000, 3);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14160,"byte_end":14216,"line_start":531,"line_end":531,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_uint128(&buf, 3));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14221,"byte_end":14284,"line_start":532,"line_end":532,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14289,"byte_end":14296,"line_start":533,"line_end":533,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14301,"byte_end":14323,"line_start":534,"line_end":534,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14857,"byte_end":14865,"line_start":555,"line_end":555,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::ByteOrder::read_i16","value":"pub fn read_i16(&[u8]) -> i16","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Reads a signed 16 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 16 bit integer from `buf`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14391,"byte_end":14436,"line_start":537,"line_end":537,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14441,"byte_end":14444,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14449,"byte_end":14461,"line_start":539,"line_end":539,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14466,"byte_end":14469,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14474,"byte_end":14506,"line_start":541,"line_end":541,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14511,"byte_end":14514,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14519,"byte_end":14533,"line_start":543,"line_end":543,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14538,"byte_end":14541,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ Write and read `i16` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14546,"byte_end":14602,"line_start":545,"line_end":545,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14607,"byte_end":14610,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14615,"byte_end":14626,"line_start":547,"line_end":547,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14631,"byte_end":14676,"line_start":548,"line_end":548,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14681,"byte_end":14684,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 2];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14689,"byte_end":14714,"line_start":550,"line_end":550,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i16(&mut buf, -1_000);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14719,"byte_end":14765,"line_start":551,"line_end":551,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(-1_000, LittleEndian::read_i16(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14770,"byte_end":14823,"line_start":552,"line_end":552,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14828,"byte_end":14835,"line_start":553,"line_end":553,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14840,"byte_end":14849,"line_start":554,"line_end":554,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15429,"byte_end":15437,"line_start":577,"line_end":577,"column_start":8,"column_end":16},"name":"read_i24","qualname":"::ByteOrder::read_i24","value":"pub fn read_i24(&[u8]) -> i32","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Reads a signed 24 bit integer from `buf`, stored in i32.","sig":null,"attributes":[{"value":"/ Reads a signed 24 bit integer from `buf`, stored in i32.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14933,"byte_end":14993,"line_start":559,"line_end":559,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":14998,"byte_end":15001,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15006,"byte_end":15018,"line_start":561,"line_end":561,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15023,"byte_end":15026,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 3`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15031,"byte_end":15063,"line_start":563,"line_end":563,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15068,"byte_end":15071,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15076,"byte_end":15090,"line_start":565,"line_end":565,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15095,"byte_end":15098,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ Write and read 24 bit `i32` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15103,"byte_end":15166,"line_start":567,"line_end":567,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15171,"byte_end":15174,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15179,"byte_end":15190,"line_start":569,"line_end":569,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15195,"byte_end":15240,"line_start":570,"line_end":570,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15245,"byte_end":15248,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15253,"byte_end":15278,"line_start":572,"line_end":572,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i24(&mut buf, -1_000_000);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15283,"byte_end":15333,"line_start":573,"line_end":573,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(-1_000_000, LittleEndian::read_i24(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15338,"byte_end":15395,"line_start":574,"line_end":574,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15400,"byte_end":15407,"line_start":575,"line_end":575,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15412,"byte_end":15421,"line_start":576,"line_end":576,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15982,"byte_end":15990,"line_start":599,"line_end":599,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::ByteOrder::read_i32","value":"pub fn read_i32(&[u8]) -> i32","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Reads a signed 32 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 32 bit integer from `buf`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15508,"byte_end":15553,"line_start":581,"line_end":581,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15558,"byte_end":15561,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15566,"byte_end":15578,"line_start":583,"line_end":583,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15583,"byte_end":15586,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15591,"byte_end":15623,"line_start":585,"line_end":585,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15628,"byte_end":15631,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15636,"byte_end":15650,"line_start":587,"line_end":587,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15655,"byte_end":15658,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ Write and read `i32` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15663,"byte_end":15719,"line_start":589,"line_end":589,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15724,"byte_end":15727,"line_start":590,"line_end":590,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15732,"byte_end":15743,"line_start":591,"line_end":591,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15748,"byte_end":15793,"line_start":592,"line_end":592,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15798,"byte_end":15801,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15806,"byte_end":15831,"line_start":594,"line_end":594,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i32(&mut buf, -1_000_000);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15836,"byte_end":15886,"line_start":595,"line_end":595,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(-1_000_000, LittleEndian::read_i32(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15891,"byte_end":15948,"line_start":596,"line_end":596,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15953,"byte_end":15960,"line_start":597,"line_end":597,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":15965,"byte_end":15974,"line_start":598,"line_end":598,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16570,"byte_end":16578,"line_start":621,"line_end":621,"column_start":8,"column_end":16},"name":"read_i48","qualname":"::ByteOrder::read_i48","value":"pub fn read_i48(&[u8]) -> i64","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Reads a signed 48 bit integer from `buf`, stored in i64.","sig":null,"attributes":[{"value":"/ Reads a signed 48 bit integer from `buf`, stored in i64.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16058,"byte_end":16118,"line_start":603,"line_end":603,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16123,"byte_end":16126,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16131,"byte_end":16143,"line_start":605,"line_end":605,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16148,"byte_end":16151,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 6`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16156,"byte_end":16188,"line_start":607,"line_end":607,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16193,"byte_end":16196,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16201,"byte_end":16215,"line_start":609,"line_end":609,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16220,"byte_end":16223,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ Write and read 48 bit `i64` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16228,"byte_end":16291,"line_start":611,"line_end":611,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16296,"byte_end":16299,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16304,"byte_end":16315,"line_start":613,"line_end":613,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16320,"byte_end":16365,"line_start":614,"line_end":614,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16370,"byte_end":16373,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 6];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16378,"byte_end":16403,"line_start":616,"line_end":616,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i48(&mut buf, -1_000_000_000_000);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16408,"byte_end":16466,"line_start":617,"line_end":617,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(-1_000_000_000_000, LittleEndian::read_i48(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16471,"byte_end":16536,"line_start":618,"line_end":618,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16541,"byte_end":16548,"line_start":619,"line_end":619,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16553,"byte_end":16562,"line_start":620,"line_end":620,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17131,"byte_end":17139,"line_start":643,"line_end":643,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::ByteOrder::read_i64","value":"pub fn read_i64(&[u8]) -> i64","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Reads a signed 64 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 64 bit integer from `buf`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16649,"byte_end":16694,"line_start":625,"line_end":625,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16699,"byte_end":16702,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16707,"byte_end":16719,"line_start":627,"line_end":627,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16724,"byte_end":16727,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16732,"byte_end":16764,"line_start":629,"line_end":629,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16769,"byte_end":16772,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16777,"byte_end":16791,"line_start":631,"line_end":631,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16796,"byte_end":16799,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ Write and read `i64` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16804,"byte_end":16860,"line_start":633,"line_end":633,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16865,"byte_end":16868,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16873,"byte_end":16884,"line_start":635,"line_end":635,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16889,"byte_end":16934,"line_start":636,"line_end":636,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16939,"byte_end":16942,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16947,"byte_end":16972,"line_start":638,"line_end":638,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i64(&mut buf, -1_000_000_000);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":16977,"byte_end":17031,"line_start":639,"line_end":639,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17036,"byte_end":17097,"line_start":640,"line_end":640,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17102,"byte_end":17109,"line_start":641,"line_end":641,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17114,"byte_end":17123,"line_start":642,"line_end":642,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17722,"byte_end":17731,"line_start":666,"line_end":666,"column_start":8,"column_end":17},"name":"read_i128","qualname":"::ByteOrder::read_i128","value":"pub fn read_i128(&[u8]) -> i128","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Reads a signed 128 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 128 bit integer from `buf`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17207,"byte_end":17253,"line_start":647,"line_end":647,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17258,"byte_end":17261,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17266,"byte_end":17278,"line_start":649,"line_end":649,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17283,"byte_end":17286,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 16`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17291,"byte_end":17324,"line_start":651,"line_end":651,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17329,"byte_end":17332,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17337,"byte_end":17351,"line_start":653,"line_end":653,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17356,"byte_end":17359,"line_start":654,"line_end":654,"column_start":5,"column_end":8}},{"value":"/ Write and read `i128` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17364,"byte_end":17421,"line_start":655,"line_end":655,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17426,"byte_end":17429,"line_start":656,"line_end":656,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17434,"byte_end":17445,"line_start":657,"line_end":657,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17450,"byte_end":17495,"line_start":658,"line_end":658,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17500,"byte_end":17503,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 16];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17508,"byte_end":17534,"line_start":660,"line_end":660,"column_start":5,"column_end":31}},{"value":"/ LittleEndian::write_i128(&mut buf, -1_000_000_000);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17539,"byte_end":17594,"line_start":661,"line_end":661,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(-1_000_000_000, LittleEndian::read_i128(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17599,"byte_end":17661,"line_start":662,"line_end":662,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17666,"byte_end":17673,"line_start":663,"line_end":663,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17678,"byte_end":17700,"line_start":664,"line_end":664,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17705,"byte_end":17714,"line_start":665,"line_end":665,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18329,"byte_end":18337,"line_start":689,"line_end":689,"column_start":8,"column_end":16},"name":"read_int","qualname":"::ByteOrder::read_int","value":"pub fn read_int(&[u8], usize) -> i64","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed n-bytes integer from `buf`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17802,"byte_end":17848,"line_start":670,"line_end":670,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17853,"byte_end":17856,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17861,"byte_end":17873,"line_start":672,"line_end":672,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17878,"byte_end":17881,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ Panics when `nbytes < 1` or `nbytes > 8` or","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17886,"byte_end":17933,"line_start":674,"line_end":674,"column_start":5,"column_end":52}},{"value":"/ `buf.len() < nbytes`","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17938,"byte_end":17962,"line_start":675,"line_end":675,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17967,"byte_end":17970,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17975,"byte_end":17989,"line_start":677,"line_end":677,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":17994,"byte_end":17997,"line_start":678,"line_end":678,"column_start":5,"column_end":8}},{"value":"/ Write and read n-length signed numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18002,"byte_end":18068,"line_start":679,"line_end":679,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18073,"byte_end":18076,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18081,"byte_end":18092,"line_start":681,"line_end":681,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18097,"byte_end":18142,"line_start":682,"line_end":682,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18147,"byte_end":18150,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18155,"byte_end":18180,"line_start":684,"line_end":684,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_int(&mut buf, -1_000, 3);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18185,"byte_end":18234,"line_start":685,"line_end":685,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(-1_000, LittleEndian::read_int(&buf, 3));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18239,"byte_end":18295,"line_start":686,"line_end":686,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18300,"byte_end":18307,"line_start":687,"line_end":687,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18312,"byte_end":18321,"line_start":688,"line_end":688,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19004,"byte_end":19015,"line_start":713,"line_end":713,"column_start":8,"column_end":19},"name":"read_int128","qualname":"::ByteOrder::read_int128","value":"pub fn read_int128(&[u8], usize) -> i128","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed n-bytes integer from `buf`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18443,"byte_end":18489,"line_start":693,"line_end":693,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18494,"byte_end":18497,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18502,"byte_end":18514,"line_start":695,"line_end":695,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18519,"byte_end":18522,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/ Panics when `nbytes < 1` or `nbytes > 16` or","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18527,"byte_end":18575,"line_start":697,"line_end":697,"column_start":5,"column_end":53}},{"value":"/ `buf.len() < nbytes`","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18580,"byte_end":18604,"line_start":698,"line_end":698,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18609,"byte_end":18612,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18617,"byte_end":18631,"line_start":700,"line_end":700,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18636,"byte_end":18639,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ Write and read n-length signed numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18644,"byte_end":18710,"line_start":702,"line_end":702,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18715,"byte_end":18718,"line_start":703,"line_end":703,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18723,"byte_end":18734,"line_start":704,"line_end":704,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18739,"byte_end":18784,"line_start":705,"line_end":705,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18789,"byte_end":18792,"line_start":706,"line_end":706,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18797,"byte_end":18822,"line_start":707,"line_end":707,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_int128(&mut buf, -1_000, 3);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18827,"byte_end":18879,"line_start":708,"line_end":708,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(-1_000, LittleEndian::read_int128(&buf, 3));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18884,"byte_end":18943,"line_start":709,"line_end":709,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18948,"byte_end":18955,"line_start":710,"line_end":710,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18960,"byte_end":18982,"line_start":711,"line_end":711,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":18987,"byte_end":18996,"line_start":712,"line_end":712,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19633,"byte_end":19641,"line_start":736,"line_end":736,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::ByteOrder::read_f32","value":"pub fn read_f32(&[u8]) -> f32","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Reads a IEEE754 single-precision (4 bytes) floating point number.","sig":null,"attributes":[{"value":"/ Reads a IEEE754 single-precision (4 bytes) floating point number.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19128,"byte_end":19197,"line_start":717,"line_end":717,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19202,"byte_end":19205,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19210,"byte_end":19222,"line_start":719,"line_end":719,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19227,"byte_end":19230,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19235,"byte_end":19267,"line_start":721,"line_end":721,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19272,"byte_end":19275,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19280,"byte_end":19294,"line_start":723,"line_end":723,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19299,"byte_end":19302,"line_start":724,"line_end":724,"column_start":5,"column_end":8}},{"value":"/ Write and read `f32` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19307,"byte_end":19363,"line_start":725,"line_end":725,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19368,"byte_end":19371,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19376,"byte_end":19387,"line_start":727,"line_end":727,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19392,"byte_end":19437,"line_start":728,"line_end":728,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19442,"byte_end":19445,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ let e = 2.71828;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19450,"byte_end":19470,"line_start":730,"line_end":730,"column_start":5,"column_end":25}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19475,"byte_end":19500,"line_start":731,"line_end":731,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_f32(&mut buf, e);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19505,"byte_end":19546,"line_start":732,"line_end":732,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(e, LittleEndian::read_f32(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19551,"byte_end":19599,"line_start":733,"line_end":733,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19604,"byte_end":19611,"line_start":734,"line_end":734,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19616,"byte_end":19625,"line_start":735,"line_end":735,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20261,"byte_end":20269,"line_start":759,"line_end":759,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::ByteOrder::read_f64","value":"pub fn read_f64(&[u8]) -> f64","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Reads a IEEE754 double-precision (8 bytes) floating point number.","sig":null,"attributes":[{"value":"/ Reads a IEEE754 double-precision (8 bytes) floating point number.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19745,"byte_end":19814,"line_start":740,"line_end":740,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19819,"byte_end":19822,"line_start":741,"line_end":741,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19827,"byte_end":19839,"line_start":742,"line_end":742,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19844,"byte_end":19847,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19852,"byte_end":19884,"line_start":744,"line_end":744,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19889,"byte_end":19892,"line_start":745,"line_end":745,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19897,"byte_end":19911,"line_start":746,"line_end":746,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19916,"byte_end":19919,"line_start":747,"line_end":747,"column_start":5,"column_end":8}},{"value":"/ Write and read `f64` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19924,"byte_end":19980,"line_start":748,"line_end":748,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19985,"byte_end":19988,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":19993,"byte_end":20004,"line_start":750,"line_end":750,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20009,"byte_end":20054,"line_start":751,"line_end":751,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20059,"byte_end":20062,"line_start":752,"line_end":752,"column_start":5,"column_end":8}},{"value":"/ let phi = 1.6180339887;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20067,"byte_end":20094,"line_start":753,"line_end":753,"column_start":5,"column_end":32}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20099,"byte_end":20124,"line_start":754,"line_end":754,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_f64(&mut buf, phi);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20129,"byte_end":20172,"line_start":755,"line_end":755,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(phi, LittleEndian::read_f64(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20177,"byte_end":20227,"line_start":756,"line_end":756,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20232,"byte_end":20239,"line_start":757,"line_end":757,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20244,"byte_end":20253,"line_start":758,"line_end":758,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20842,"byte_end":20851,"line_start":781,"line_end":781,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::ByteOrder::write_i16","value":"pub fn write_i16(&mut [u8], i16)","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Writes a signed 16 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes a signed 16 bit integer `n` to `buf`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20373,"byte_end":20421,"line_start":763,"line_end":763,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20426,"byte_end":20429,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20434,"byte_end":20446,"line_start":765,"line_end":765,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20451,"byte_end":20454,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20459,"byte_end":20491,"line_start":767,"line_end":767,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20496,"byte_end":20499,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20504,"byte_end":20518,"line_start":769,"line_end":769,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20523,"byte_end":20526,"line_start":770,"line_end":770,"column_start":5,"column_end":8}},{"value":"/ Write and read `i16` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20531,"byte_end":20587,"line_start":771,"line_end":771,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20592,"byte_end":20595,"line_start":772,"line_end":772,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20600,"byte_end":20611,"line_start":773,"line_end":773,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20616,"byte_end":20661,"line_start":774,"line_end":774,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20666,"byte_end":20669,"line_start":775,"line_end":775,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 2];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20674,"byte_end":20699,"line_start":776,"line_end":776,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i16(&mut buf, -1_000);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20704,"byte_end":20750,"line_start":777,"line_end":777,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(-1_000, LittleEndian::read_i16(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20755,"byte_end":20808,"line_start":778,"line_end":778,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20813,"byte_end":20820,"line_start":779,"line_end":779,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20825,"byte_end":20834,"line_start":780,"line_end":780,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21427,"byte_end":21436,"line_start":803,"line_end":803,"column_start":8,"column_end":17},"name":"write_i24","qualname":"::ByteOrder::write_i24","value":"pub fn write_i24(&mut [u8], i32)","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Writes a signed 24 bit integer `n` to `buf`, stored in i32.","sig":null,"attributes":[{"value":"/ Writes a signed 24 bit integer `n` to `buf`, stored in i32.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20928,"byte_end":20991,"line_start":785,"line_end":785,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":20996,"byte_end":20999,"line_start":786,"line_end":786,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21004,"byte_end":21016,"line_start":787,"line_end":787,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21021,"byte_end":21024,"line_start":788,"line_end":788,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 3`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21029,"byte_end":21061,"line_start":789,"line_end":789,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21066,"byte_end":21069,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21074,"byte_end":21088,"line_start":791,"line_end":791,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21093,"byte_end":21096,"line_start":792,"line_end":792,"column_start":5,"column_end":8}},{"value":"/ Write and read 24 bit `i32` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21101,"byte_end":21164,"line_start":793,"line_end":793,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21169,"byte_end":21172,"line_start":794,"line_end":794,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21177,"byte_end":21188,"line_start":795,"line_end":795,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21193,"byte_end":21238,"line_start":796,"line_end":796,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21243,"byte_end":21246,"line_start":797,"line_end":797,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21251,"byte_end":21276,"line_start":798,"line_end":798,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i24(&mut buf, -1_000_000);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21281,"byte_end":21331,"line_start":799,"line_end":799,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(-1_000_000, LittleEndian::read_i24(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21336,"byte_end":21393,"line_start":800,"line_end":800,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21398,"byte_end":21405,"line_start":801,"line_end":801,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21410,"byte_end":21419,"line_start":802,"line_end":802,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21993,"byte_end":22002,"line_start":825,"line_end":825,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::ByteOrder::write_i32","value":"pub fn write_i32(&mut [u8], i32)","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Writes a signed 32 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes a signed 32 bit integer `n` to `buf`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21516,"byte_end":21564,"line_start":807,"line_end":807,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21569,"byte_end":21572,"line_start":808,"line_end":808,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21577,"byte_end":21589,"line_start":809,"line_end":809,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21594,"byte_end":21597,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21602,"byte_end":21634,"line_start":811,"line_end":811,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21639,"byte_end":21642,"line_start":812,"line_end":812,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21647,"byte_end":21661,"line_start":813,"line_end":813,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21666,"byte_end":21669,"line_start":814,"line_end":814,"column_start":5,"column_end":8}},{"value":"/ Write and read `i32` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21674,"byte_end":21730,"line_start":815,"line_end":815,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21735,"byte_end":21738,"line_start":816,"line_end":816,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21743,"byte_end":21754,"line_start":817,"line_end":817,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21759,"byte_end":21804,"line_start":818,"line_end":818,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21809,"byte_end":21812,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21817,"byte_end":21842,"line_start":820,"line_end":820,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i32(&mut buf, -1_000_000);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21847,"byte_end":21897,"line_start":821,"line_end":821,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(-1_000_000, LittleEndian::read_i32(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21902,"byte_end":21959,"line_start":822,"line_end":822,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21964,"byte_end":21971,"line_start":823,"line_end":823,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":21976,"byte_end":21985,"line_start":824,"line_end":824,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22594,"byte_end":22603,"line_start":847,"line_end":847,"column_start":8,"column_end":17},"name":"write_i48","qualname":"::ByteOrder::write_i48","value":"pub fn write_i48(&mut [u8], i64)","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Writes a signed 48 bit integer `n` to `buf`, stored in i64.","sig":null,"attributes":[{"value":"/ Writes a signed 48 bit integer `n` to `buf`, stored in i64.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22079,"byte_end":22142,"line_start":829,"line_end":829,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22147,"byte_end":22150,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22155,"byte_end":22167,"line_start":831,"line_end":831,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22172,"byte_end":22175,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 6`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22180,"byte_end":22212,"line_start":833,"line_end":833,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22217,"byte_end":22220,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22225,"byte_end":22239,"line_start":835,"line_end":835,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22244,"byte_end":22247,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ Write and read 48 bit `i64` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22252,"byte_end":22315,"line_start":837,"line_end":837,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22320,"byte_end":22323,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22328,"byte_end":22339,"line_start":839,"line_end":839,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22344,"byte_end":22389,"line_start":840,"line_end":840,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22394,"byte_end":22397,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 6];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22402,"byte_end":22427,"line_start":842,"line_end":842,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i48(&mut buf, -1_000_000_000_000);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22432,"byte_end":22490,"line_start":843,"line_end":843,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(-1_000_000_000_000, LittleEndian::read_i48(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22495,"byte_end":22560,"line_start":844,"line_end":844,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22565,"byte_end":22572,"line_start":845,"line_end":845,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22577,"byte_end":22586,"line_start":846,"line_end":846,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23168,"byte_end":23177,"line_start":869,"line_end":869,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::ByteOrder::write_i64","value":"pub fn write_i64(&mut [u8], i64)","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Writes a signed 64 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes a signed 64 bit integer `n` to `buf`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22683,"byte_end":22731,"line_start":851,"line_end":851,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22736,"byte_end":22739,"line_start":852,"line_end":852,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22744,"byte_end":22756,"line_start":853,"line_end":853,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22761,"byte_end":22764,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22769,"byte_end":22801,"line_start":855,"line_end":855,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22806,"byte_end":22809,"line_start":856,"line_end":856,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22814,"byte_end":22828,"line_start":857,"line_end":857,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22833,"byte_end":22836,"line_start":858,"line_end":858,"column_start":5,"column_end":8}},{"value":"/ Write and read `i64` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22841,"byte_end":22897,"line_start":859,"line_end":859,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22902,"byte_end":22905,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22910,"byte_end":22921,"line_start":861,"line_end":861,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22926,"byte_end":22971,"line_start":862,"line_end":862,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22976,"byte_end":22979,"line_start":863,"line_end":863,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":22984,"byte_end":23009,"line_start":864,"line_end":864,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i64(&mut buf, -1_000_000_000);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23014,"byte_end":23068,"line_start":865,"line_end":865,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23073,"byte_end":23134,"line_start":866,"line_end":866,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23139,"byte_end":23146,"line_start":867,"line_end":867,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23151,"byte_end":23160,"line_start":868,"line_end":868,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23779,"byte_end":23789,"line_start":892,"line_end":892,"column_start":8,"column_end":18},"name":"write_i128","qualname":"::ByteOrder::write_i128","value":"pub fn write_i128(&mut [u8], i128)","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Writes a signed 128 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes a signed 128 bit integer `n` to `buf`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23254,"byte_end":23303,"line_start":873,"line_end":873,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23308,"byte_end":23311,"line_start":874,"line_end":874,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23316,"byte_end":23328,"line_start":875,"line_end":875,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23333,"byte_end":23336,"line_start":876,"line_end":876,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 16`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23341,"byte_end":23374,"line_start":877,"line_end":877,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23379,"byte_end":23382,"line_start":878,"line_end":878,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23387,"byte_end":23401,"line_start":879,"line_end":879,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23406,"byte_end":23409,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ Write and read n-byte `i128` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23414,"byte_end":23478,"line_start":881,"line_end":881,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23483,"byte_end":23486,"line_start":882,"line_end":882,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23491,"byte_end":23502,"line_start":883,"line_end":883,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23507,"byte_end":23552,"line_start":884,"line_end":884,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23557,"byte_end":23560,"line_start":885,"line_end":885,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 16];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23565,"byte_end":23591,"line_start":886,"line_end":886,"column_start":5,"column_end":31}},{"value":"/ LittleEndian::write_i128(&mut buf, -1_000_000_000);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23596,"byte_end":23651,"line_start":887,"line_end":887,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(-1_000_000_000, LittleEndian::read_i128(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23656,"byte_end":23718,"line_start":888,"line_end":888,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23723,"byte_end":23730,"line_start":889,"line_end":889,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23735,"byte_end":23757,"line_start":890,"line_end":890,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23762,"byte_end":23771,"line_start":891,"line_end":891,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24430,"byte_end":24439,"line_start":915,"line_end":915,"column_start":8,"column_end":17},"name":"write_int","qualname":"::ByteOrder::write_int","value":"pub fn write_int(&mut [u8], i64, usize)","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Writes a signed integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"/ Writes a signed integer `n` to `buf` using only `nbytes`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23869,"byte_end":23930,"line_start":896,"line_end":896,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23935,"byte_end":23938,"line_start":897,"line_end":897,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23943,"byte_end":23955,"line_start":898,"line_end":898,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23960,"byte_end":23963,"line_start":899,"line_end":899,"column_start":5,"column_end":8}},{"value":"/ If `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":23968,"byte_end":24042,"line_start":900,"line_end":900,"column_start":5,"column_end":79}},{"value":"/ this method panics.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24047,"byte_end":24070,"line_start":901,"line_end":901,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24075,"byte_end":24078,"line_start":902,"line_end":902,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24083,"byte_end":24097,"line_start":903,"line_end":903,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24102,"byte_end":24105,"line_start":904,"line_end":904,"column_start":5,"column_end":8}},{"value":"/ Write and read an n-byte number in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24110,"byte_end":24169,"line_start":905,"line_end":905,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24174,"byte_end":24177,"line_start":906,"line_end":906,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24182,"byte_end":24193,"line_start":907,"line_end":907,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24198,"byte_end":24243,"line_start":908,"line_end":908,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24248,"byte_end":24251,"line_start":909,"line_end":909,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24256,"byte_end":24281,"line_start":910,"line_end":910,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_int(&mut buf, -1_000, 3);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24286,"byte_end":24335,"line_start":911,"line_end":911,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(-1_000, LittleEndian::read_int(&buf, 3));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24340,"byte_end":24396,"line_start":912,"line_end":912,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24401,"byte_end":24408,"line_start":913,"line_end":913,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24413,"byte_end":24422,"line_start":914,"line_end":914,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":25158,"byte_end":25170,"line_start":939,"line_end":939,"column_start":8,"column_end":20},"name":"write_int128","qualname":"::ByteOrder::write_int128","value":"pub fn write_int128(&mut [u8], i128, usize)","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Writes a signed integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"/ Writes a signed integer `n` to `buf` using only `nbytes`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24556,"byte_end":24617,"line_start":919,"line_end":919,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24622,"byte_end":24625,"line_start":920,"line_end":920,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24630,"byte_end":24642,"line_start":921,"line_end":921,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24647,"byte_end":24650,"line_start":922,"line_end":922,"column_start":5,"column_end":8}},{"value":"/ If `n` is not representable in `nbytes`, or if `nbytes` is `> 16`, then","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24655,"byte_end":24730,"line_start":923,"line_end":923,"column_start":5,"column_end":80}},{"value":"/ this method panics.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24735,"byte_end":24758,"line_start":924,"line_end":924,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24763,"byte_end":24766,"line_start":925,"line_end":925,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24771,"byte_end":24785,"line_start":926,"line_end":926,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24790,"byte_end":24793,"line_start":927,"line_end":927,"column_start":5,"column_end":8}},{"value":"/ Write and read n-length signed numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24798,"byte_end":24864,"line_start":928,"line_end":928,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24869,"byte_end":24872,"line_start":929,"line_end":929,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24877,"byte_end":24888,"line_start":930,"line_end":930,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24893,"byte_end":24938,"line_start":931,"line_end":931,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24943,"byte_end":24946,"line_start":932,"line_end":932,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24951,"byte_end":24976,"line_start":933,"line_end":933,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_int128(&mut buf, -1_000, 3);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":24981,"byte_end":25033,"line_start":934,"line_end":934,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(-1_000, LittleEndian::read_int128(&buf, 3));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":25038,"byte_end":25097,"line_start":935,"line_end":935,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":25102,"byte_end":25109,"line_start":936,"line_end":936,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":25114,"byte_end":25136,"line_start":937,"line_end":937,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":25141,"byte_end":25150,"line_start":938,"line_end":938,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":25800,"byte_end":25809,"line_start":962,"line_end":962,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::ByteOrder::write_f32","value":"pub fn write_f32(&mut [u8], f32)","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Writes a IEEE754 single-precision (4 bytes) floating point number.","sig":null,"attributes":[{"value":"/ Writes a IEEE754 single-precision (4 bytes) floating point number.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":25294,"byte_end":25364,"line_start":943,"line_end":943,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":25369,"byte_end":25372,"line_start":944,"line_end":944,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":25377,"byte_end":25389,"line_start":945,"line_end":945,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":25394,"byte_end":25397,"line_start":946,"line_end":946,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":25402,"byte_end":25434,"line_start":947,"line_end":947,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":25439,"byte_end":25442,"line_start":948,"line_end":948,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":25447,"byte_end":25461,"line_start":949,"line_end":949,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":25466,"byte_end":25469,"line_start":950,"line_end":950,"column_start":5,"column_end":8}},{"value":"/ Write and read `f32` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":25474,"byte_end":25530,"line_start":951,"line_end":951,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":25535,"byte_end":25538,"line_start":952,"line_end":952,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":25543,"byte_end":25554,"line_start":953,"line_end":953,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":25559,"byte_end":25604,"line_start":954,"line_end":954,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":25609,"byte_end":25612,"line_start":955,"line_end":955,"column_start":5,"column_end":8}},{"value":"/ let e = 2.71828;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":25617,"byte_end":25637,"line_start":956,"line_end":956,"column_start":5,"column_end":25}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":25642,"byte_end":25667,"line_start":957,"line_end":957,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_f32(&mut buf, e);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":25672,"byte_end":25713,"line_start":958,"line_end":958,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(e, LittleEndian::read_f32(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":25718,"byte_end":25766,"line_start":959,"line_end":959,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":25771,"byte_end":25778,"line_start":960,"line_end":960,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":25783,"byte_end":25792,"line_start":961,"line_end":961,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26458,"byte_end":26467,"line_start":986,"line_end":986,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::ByteOrder::write_f64","value":"pub fn write_f64(&mut [u8], f64)","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Writes a IEEE754 double-precision (8 bytes) floating point number.","sig":null,"attributes":[{"value":"/ Writes a IEEE754 double-precision (8 bytes) floating point number.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":25941,"byte_end":26011,"line_start":967,"line_end":967,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26016,"byte_end":26019,"line_start":968,"line_end":968,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26024,"byte_end":26036,"line_start":969,"line_end":969,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26041,"byte_end":26044,"line_start":970,"line_end":970,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26049,"byte_end":26081,"line_start":971,"line_end":971,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26086,"byte_end":26089,"line_start":972,"line_end":972,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26094,"byte_end":26108,"line_start":973,"line_end":973,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26113,"byte_end":26116,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ Write and read `f64` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26121,"byte_end":26177,"line_start":975,"line_end":975,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26182,"byte_end":26185,"line_start":976,"line_end":976,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26190,"byte_end":26201,"line_start":977,"line_end":977,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26206,"byte_end":26251,"line_start":978,"line_end":978,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26256,"byte_end":26259,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ let phi = 1.6180339887;","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26264,"byte_end":26291,"line_start":980,"line_end":980,"column_start":5,"column_end":32}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26296,"byte_end":26321,"line_start":981,"line_end":981,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_f64(&mut buf, phi);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26326,"byte_end":26369,"line_start":982,"line_end":982,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(phi, LittleEndian::read_f64(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26374,"byte_end":26424,"line_start":983,"line_end":983,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26429,"byte_end":26436,"line_start":984,"line_end":984,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26441,"byte_end":26450,"line_start":985,"line_end":985,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27242,"byte_end":27255,"line_start":1012,"line_end":1012,"column_start":8,"column_end":21},"name":"read_u16_into","qualname":"::ByteOrder::read_u16_into","value":"pub fn read_u16_into(&[u8], &mut [u16])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Reads unsigned 16 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads unsigned 16 bit integers from `src` into `dst`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26599,"byte_end":26656,"line_start":991,"line_end":991,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26661,"byte_end":26664,"line_start":992,"line_end":992,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26669,"byte_end":26681,"line_start":993,"line_end":993,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26686,"byte_end":26689,"line_start":994,"line_end":994,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 2*dst.len()`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26694,"byte_end":26737,"line_start":995,"line_end":995,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26742,"byte_end":26745,"line_start":996,"line_end":996,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26750,"byte_end":26764,"line_start":997,"line_end":997,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26769,"byte_end":26772,"line_start":998,"line_end":998,"column_start":5,"column_end":8}},{"value":"/ Write and read `u16` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26777,"byte_end":26833,"line_start":999,"line_end":999,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26838,"byte_end":26841,"line_start":1000,"line_end":1000,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26846,"byte_end":26857,"line_start":1001,"line_end":1001,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26862,"byte_end":26907,"line_start":1002,"line_end":1002,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26912,"byte_end":26915,"line_start":1003,"line_end":1003,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 8];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26920,"byte_end":26947,"line_start":1004,"line_end":1004,"column_start":5,"column_end":32}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":26952,"byte_end":26999,"line_start":1005,"line_end":1005,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u16_into(&numbers_given, &mut bytes);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27004,"byte_end":27065,"line_start":1006,"line_end":1006,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27070,"byte_end":27073,"line_start":1007,"line_end":1007,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27078,"byte_end":27111,"line_start":1008,"line_end":1008,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u16_into(&bytes, &mut numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27116,"byte_end":27174,"line_start":1009,"line_end":1009,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27179,"byte_end":27222,"line_start":1010,"line_end":1010,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27227,"byte_end":27234,"line_start":1011,"line_end":1011,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27935,"byte_end":27948,"line_start":1035,"line_end":1035,"column_start":8,"column_end":21},"name":"read_u32_into","qualname":"::ByteOrder::read_u32_into","value":"pub fn read_u32_into(&[u8], &mut [u32])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Reads unsigned 32 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads unsigned 32 bit integers from `src` into `dst`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27291,"byte_end":27348,"line_start":1014,"line_end":1014,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27353,"byte_end":27356,"line_start":1015,"line_end":1015,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27361,"byte_end":27373,"line_start":1016,"line_end":1016,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27378,"byte_end":27381,"line_start":1017,"line_end":1017,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 4*dst.len()`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27386,"byte_end":27429,"line_start":1018,"line_end":1018,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27434,"byte_end":27437,"line_start":1019,"line_end":1019,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27442,"byte_end":27456,"line_start":1020,"line_end":1020,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27461,"byte_end":27464,"line_start":1021,"line_end":1021,"column_start":5,"column_end":8}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27469,"byte_end":27525,"line_start":1022,"line_end":1022,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27530,"byte_end":27533,"line_start":1023,"line_end":1023,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27538,"byte_end":27549,"line_start":1024,"line_end":1024,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27554,"byte_end":27599,"line_start":1025,"line_end":1025,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27604,"byte_end":27607,"line_start":1026,"line_end":1026,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27612,"byte_end":27640,"line_start":1027,"line_end":1027,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27645,"byte_end":27692,"line_start":1028,"line_end":1028,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u32_into(&numbers_given, &mut bytes);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27697,"byte_end":27758,"line_start":1029,"line_end":1029,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27763,"byte_end":27766,"line_start":1030,"line_end":1030,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27771,"byte_end":27804,"line_start":1031,"line_end":1031,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u32_into(&bytes, &mut numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27809,"byte_end":27867,"line_start":1032,"line_end":1032,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27872,"byte_end":27915,"line_start":1033,"line_end":1033,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27920,"byte_end":27927,"line_start":1034,"line_end":1034,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28628,"byte_end":28641,"line_start":1058,"line_end":1058,"column_start":8,"column_end":21},"name":"read_u64_into","qualname":"::ByteOrder::read_u64_into","value":"pub fn read_u64_into(&[u8], &mut [u64])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Reads unsigned 64 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads unsigned 64 bit integers from `src` into `dst`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":27984,"byte_end":28041,"line_start":1037,"line_end":1037,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28046,"byte_end":28049,"line_start":1038,"line_end":1038,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28054,"byte_end":28066,"line_start":1039,"line_end":1039,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28071,"byte_end":28074,"line_start":1040,"line_end":1040,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 8*dst.len()`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28079,"byte_end":28122,"line_start":1041,"line_end":1041,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28127,"byte_end":28130,"line_start":1042,"line_end":1042,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28135,"byte_end":28149,"line_start":1043,"line_end":1043,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28154,"byte_end":28157,"line_start":1044,"line_end":1044,"column_start":5,"column_end":8}},{"value":"/ Write and read `u64` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28162,"byte_end":28218,"line_start":1045,"line_end":1045,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28223,"byte_end":28226,"line_start":1046,"line_end":1046,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28231,"byte_end":28242,"line_start":1047,"line_end":1047,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28247,"byte_end":28292,"line_start":1048,"line_end":1048,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28297,"byte_end":28300,"line_start":1049,"line_end":1049,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28305,"byte_end":28333,"line_start":1050,"line_end":1050,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28338,"byte_end":28385,"line_start":1051,"line_end":1051,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u64_into(&numbers_given, &mut bytes);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28390,"byte_end":28451,"line_start":1052,"line_end":1052,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28456,"byte_end":28459,"line_start":1053,"line_end":1053,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28464,"byte_end":28497,"line_start":1054,"line_end":1054,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u64_into(&bytes, &mut numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28502,"byte_end":28560,"line_start":1055,"line_end":1055,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28565,"byte_end":28608,"line_start":1056,"line_end":1056,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28613,"byte_end":28620,"line_start":1057,"line_end":1057,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29353,"byte_end":29367,"line_start":1082,"line_end":1082,"column_start":8,"column_end":22},"name":"read_u128_into","qualname":"::ByteOrder::read_u128_into","value":"pub fn read_u128_into(&[u8], &mut [u128])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Reads unsigned 128 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads unsigned 128 bit integers from `src` into `dst`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28677,"byte_end":28735,"line_start":1060,"line_end":1060,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28740,"byte_end":28743,"line_start":1061,"line_end":1061,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28748,"byte_end":28760,"line_start":1062,"line_end":1062,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28765,"byte_end":28768,"line_start":1063,"line_end":1063,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 16*dst.len()`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28773,"byte_end":28817,"line_start":1064,"line_end":1064,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28822,"byte_end":28825,"line_start":1065,"line_end":1065,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28830,"byte_end":28844,"line_start":1066,"line_end":1066,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28849,"byte_end":28852,"line_start":1067,"line_end":1067,"column_start":5,"column_end":8}},{"value":"/ Write and read `u128` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28857,"byte_end":28914,"line_start":1068,"line_end":1068,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28919,"byte_end":28922,"line_start":1069,"line_end":1069,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28927,"byte_end":28938,"line_start":1070,"line_end":1070,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28943,"byte_end":28988,"line_start":1071,"line_end":1071,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":28993,"byte_end":28996,"line_start":1072,"line_end":1072,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 64];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29001,"byte_end":29029,"line_start":1073,"line_end":1073,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29034,"byte_end":29081,"line_start":1074,"line_end":1074,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u128_into(&numbers_given, &mut bytes);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29086,"byte_end":29148,"line_start":1075,"line_end":1075,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29153,"byte_end":29156,"line_start":1076,"line_end":1076,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29161,"byte_end":29194,"line_start":1077,"line_end":1077,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u128_into(&bytes, &mut numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29199,"byte_end":29258,"line_start":1078,"line_end":1078,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29263,"byte_end":29306,"line_start":1079,"line_end":1079,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29311,"byte_end":29318,"line_start":1080,"line_end":1080,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29323,"byte_end":29345,"line_start":1081,"line_end":1081,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":30053,"byte_end":30066,"line_start":1106,"line_end":1106,"column_start":8,"column_end":21},"name":"read_i16_into","qualname":"::ByteOrder::read_i16_into","value":"pub fn read_i16_into(&[u8], &mut [i16])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Reads signed 16 bit integers from `src` to `dst`.","sig":null,"attributes":[{"value":"/ Reads signed 16 bit integers from `src` to `dst`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29404,"byte_end":29457,"line_start":1084,"line_end":1084,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29462,"byte_end":29465,"line_start":1085,"line_end":1085,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29470,"byte_end":29482,"line_start":1086,"line_end":1086,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29487,"byte_end":29490,"line_start":1087,"line_end":1087,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() != 2*dst.len()`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29495,"byte_end":29538,"line_start":1088,"line_end":1088,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29543,"byte_end":29546,"line_start":1089,"line_end":1089,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29551,"byte_end":29565,"line_start":1090,"line_end":1090,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29570,"byte_end":29573,"line_start":1091,"line_end":1091,"column_start":5,"column_end":8}},{"value":"/ Write and read `i16` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29578,"byte_end":29634,"line_start":1092,"line_end":1092,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29639,"byte_end":29642,"line_start":1093,"line_end":1093,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29647,"byte_end":29658,"line_start":1094,"line_end":1094,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29663,"byte_end":29708,"line_start":1095,"line_end":1095,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29713,"byte_end":29716,"line_start":1096,"line_end":1096,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 8];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29721,"byte_end":29748,"line_start":1097,"line_end":1097,"column_start":5,"column_end":32}},{"value":"/ let numbers_given = [1, 2, 0x0f, 0xee];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29753,"byte_end":29796,"line_start":1098,"line_end":1098,"column_start":5,"column_end":48}},{"value":"/ LittleEndian::write_i16_into(&numbers_given, &mut bytes);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29801,"byte_end":29862,"line_start":1099,"line_end":1099,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29867,"byte_end":29870,"line_start":1100,"line_end":1100,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29875,"byte_end":29908,"line_start":1101,"line_end":1101,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i16_into(&bytes, &mut numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29913,"byte_end":29971,"line_start":1102,"line_end":1102,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":29976,"byte_end":30019,"line_start":1103,"line_end":1103,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":30024,"byte_end":30031,"line_start":1104,"line_end":1104,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":30036,"byte_end":30045,"line_start":1105,"line_end":1105,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":30920,"byte_end":30933,"line_start":1135,"line_end":1135,"column_start":8,"column_end":21},"name":"read_i32_into","qualname":"::ByteOrder::read_i32_into","value":"pub fn read_i32_into(&[u8], &mut [i32])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Reads signed 32 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads signed 32 bit integers from `src` into `dst`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":30264,"byte_end":30319,"line_start":1113,"line_end":1113,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":30324,"byte_end":30327,"line_start":1114,"line_end":1114,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":30332,"byte_end":30344,"line_start":1115,"line_end":1115,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":30349,"byte_end":30352,"line_start":1116,"line_end":1116,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 4*dst.len()`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":30357,"byte_end":30400,"line_start":1117,"line_end":1117,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":30405,"byte_end":30408,"line_start":1118,"line_end":1118,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":30413,"byte_end":30427,"line_start":1119,"line_end":1119,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":30432,"byte_end":30435,"line_start":1120,"line_end":1120,"column_start":5,"column_end":8}},{"value":"/ Write and read `i32` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":30440,"byte_end":30496,"line_start":1121,"line_end":1121,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":30501,"byte_end":30504,"line_start":1122,"line_end":1122,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":30509,"byte_end":30520,"line_start":1123,"line_end":1123,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":30525,"byte_end":30570,"line_start":1124,"line_end":1124,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":30575,"byte_end":30578,"line_start":1125,"line_end":1125,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":30583,"byte_end":30611,"line_start":1126,"line_end":1126,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":30616,"byte_end":30663,"line_start":1127,"line_end":1127,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i32_into(&numbers_given, &mut bytes);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":30668,"byte_end":30729,"line_start":1128,"line_end":1128,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":30734,"byte_end":30737,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":30742,"byte_end":30775,"line_start":1130,"line_end":1130,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i32_into(&bytes, &mut numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":30780,"byte_end":30838,"line_start":1131,"line_end":1131,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":30843,"byte_end":30886,"line_start":1132,"line_end":1132,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":30891,"byte_end":30898,"line_start":1133,"line_end":1133,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":30903,"byte_end":30912,"line_start":1134,"line_end":1134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":31788,"byte_end":31801,"line_start":1164,"line_end":1164,"column_start":8,"column_end":21},"name":"read_i64_into","qualname":"::ByteOrder::read_i64_into","value":"pub fn read_i64_into(&[u8], &mut [i64])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Reads signed 64 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads signed 64 bit integers from `src` into `dst`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":31132,"byte_end":31187,"line_start":1142,"line_end":1142,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":31192,"byte_end":31195,"line_start":1143,"line_end":1143,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":31200,"byte_end":31212,"line_start":1144,"line_end":1144,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":31217,"byte_end":31220,"line_start":1145,"line_end":1145,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 8*dst.len()`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":31225,"byte_end":31268,"line_start":1146,"line_end":1146,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":31273,"byte_end":31276,"line_start":1147,"line_end":1147,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":31281,"byte_end":31295,"line_start":1148,"line_end":1148,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":31300,"byte_end":31303,"line_start":1149,"line_end":1149,"column_start":5,"column_end":8}},{"value":"/ Write and read `i64` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":31308,"byte_end":31364,"line_start":1150,"line_end":1150,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":31369,"byte_end":31372,"line_start":1151,"line_end":1151,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":31377,"byte_end":31388,"line_start":1152,"line_end":1152,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":31393,"byte_end":31438,"line_start":1153,"line_end":1153,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":31443,"byte_end":31446,"line_start":1154,"line_end":1154,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":31451,"byte_end":31479,"line_start":1155,"line_end":1155,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":31484,"byte_end":31531,"line_start":1156,"line_end":1156,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i64_into(&numbers_given, &mut bytes);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":31536,"byte_end":31597,"line_start":1157,"line_end":1157,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":31602,"byte_end":31605,"line_start":1158,"line_end":1158,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":31610,"byte_end":31643,"line_start":1159,"line_end":1159,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i64_into(&bytes, &mut numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":31648,"byte_end":31706,"line_start":1160,"line_end":1160,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":31711,"byte_end":31754,"line_start":1161,"line_end":1161,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":31759,"byte_end":31766,"line_start":1162,"line_end":1162,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":31771,"byte_end":31780,"line_start":1163,"line_end":1163,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":32688,"byte_end":32702,"line_start":1194,"line_end":1194,"column_start":8,"column_end":22},"name":"read_i128_into","qualname":"::ByteOrder::read_i128_into","value":"pub fn read_i128_into(&[u8], &mut [i128])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Reads signed 128 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads signed 128 bit integers from `src` into `dst`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":32000,"byte_end":32056,"line_start":1171,"line_end":1171,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":32061,"byte_end":32064,"line_start":1172,"line_end":1172,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":32069,"byte_end":32081,"line_start":1173,"line_end":1173,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":32086,"byte_end":32089,"line_start":1174,"line_end":1174,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 16*dst.len()`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":32094,"byte_end":32138,"line_start":1175,"line_end":1175,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":32143,"byte_end":32146,"line_start":1176,"line_end":1176,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":32151,"byte_end":32165,"line_start":1177,"line_end":1177,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":32170,"byte_end":32173,"line_start":1178,"line_end":1178,"column_start":5,"column_end":8}},{"value":"/ Write and read `i128` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":32178,"byte_end":32235,"line_start":1179,"line_end":1179,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":32240,"byte_end":32243,"line_start":1180,"line_end":1180,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":32248,"byte_end":32259,"line_start":1181,"line_end":1181,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":32264,"byte_end":32309,"line_start":1182,"line_end":1182,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":32314,"byte_end":32317,"line_start":1183,"line_end":1183,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 64];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":32322,"byte_end":32350,"line_start":1184,"line_end":1184,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":32355,"byte_end":32402,"line_start":1185,"line_end":1185,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i128_into(&numbers_given, &mut bytes);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":32407,"byte_end":32469,"line_start":1186,"line_end":1186,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":32474,"byte_end":32477,"line_start":1187,"line_end":1187,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":32482,"byte_end":32515,"line_start":1188,"line_end":1188,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i128_into(&bytes, &mut numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":32520,"byte_end":32579,"line_start":1189,"line_end":1189,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":32584,"byte_end":32627,"line_start":1190,"line_end":1190,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":32632,"byte_end":32639,"line_start":1191,"line_end":1191,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":32644,"byte_end":32666,"line_start":1192,"line_end":1192,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":32671,"byte_end":32680,"line_start":1193,"line_end":1193,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":33615,"byte_end":33628,"line_start":1224,"line_end":1224,"column_start":8,"column_end":21},"name":"read_f32_into","qualname":"::ByteOrder::read_f32_into","value":"pub fn read_f32_into(&[u8], &mut [f32])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Reads IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads IEEE754 single-precision (4 bytes) floating point numbers from","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":32904,"byte_end":32976,"line_start":1201,"line_end":1201,"column_start":5,"column_end":77}},{"value":"/ `src` into `dst`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":32981,"byte_end":33002,"line_start":1202,"line_end":1202,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":33007,"byte_end":33010,"line_start":1203,"line_end":1203,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":33015,"byte_end":33027,"line_start":1204,"line_end":1204,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":33032,"byte_end":33035,"line_start":1205,"line_end":1205,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 4*dst.len()`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":33040,"byte_end":33083,"line_start":1206,"line_end":1206,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":33088,"byte_end":33091,"line_start":1207,"line_end":1207,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":33096,"byte_end":33110,"line_start":1208,"line_end":1208,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":33115,"byte_end":33118,"line_start":1209,"line_end":1209,"column_start":5,"column_end":8}},{"value":"/ Write and read `f32` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":33123,"byte_end":33179,"line_start":1210,"line_end":1210,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":33184,"byte_end":33187,"line_start":1211,"line_end":1211,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":33192,"byte_end":33203,"line_start":1212,"line_end":1212,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":33208,"byte_end":33253,"line_start":1213,"line_end":1213,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":33258,"byte_end":33261,"line_start":1214,"line_end":1214,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":33266,"byte_end":33294,"line_start":1215,"line_end":1215,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":33299,"byte_end":33356,"line_start":1216,"line_end":1216,"column_start":5,"column_end":62}},{"value":"/ LittleEndian::write_f32_into(&numbers_given, &mut bytes);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":33361,"byte_end":33422,"line_start":1217,"line_end":1217,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":33427,"byte_end":33430,"line_start":1218,"line_end":1218,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0.0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":33435,"byte_end":33470,"line_start":1219,"line_end":1219,"column_start":5,"column_end":40}},{"value":"/ LittleEndian::read_f32_into(&bytes, &mut numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":33475,"byte_end":33533,"line_start":1220,"line_end":1220,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":33538,"byte_end":33581,"line_start":1221,"line_end":1221,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":33586,"byte_end":33593,"line_start":1222,"line_end":1222,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":33598,"byte_end":33607,"line_start":1223,"line_end":1223,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34720,"byte_end":34743,"line_start":1258,"line_end":1258,"column_start":8,"column_end":31},"name":"read_f32_into_unchecked","qualname":"::ByteOrder::read_f32_into_unchecked","value":"pub fn read_f32_into_unchecked(&[u8], &mut [f32])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" **DEPRECATED**.","sig":null,"attributes":[{"value":"/ **DEPRECATED**.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":33827,"byte_end":33846,"line_start":1231,"line_end":1231,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":33851,"byte_end":33854,"line_start":1232,"line_end":1232,"column_start":5,"column_end":8}},{"value":"/ This method is deprecated. Use `read_f32_into` instead.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":33859,"byte_end":33918,"line_start":1233,"line_end":1233,"column_start":5,"column_end":64}},{"value":"/ Reads IEEE754 single-precision (4 bytes) floating point numbers from","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":33923,"byte_end":33995,"line_start":1234,"line_end":1234,"column_start":5,"column_end":77}},{"value":"/ `src` into `dst`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34000,"byte_end":34021,"line_start":1235,"line_end":1235,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34026,"byte_end":34029,"line_start":1236,"line_end":1236,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34034,"byte_end":34046,"line_start":1237,"line_end":1237,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34051,"byte_end":34054,"line_start":1238,"line_end":1238,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 4*dst.len()`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34059,"byte_end":34102,"line_start":1239,"line_end":1239,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34107,"byte_end":34110,"line_start":1240,"line_end":1240,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34115,"byte_end":34129,"line_start":1241,"line_end":1241,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34134,"byte_end":34137,"line_start":1242,"line_end":1242,"column_start":5,"column_end":8}},{"value":"/ Write and read `f32` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34142,"byte_end":34198,"line_start":1243,"line_end":1243,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34203,"byte_end":34206,"line_start":1244,"line_end":1244,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34211,"byte_end":34222,"line_start":1245,"line_end":1245,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34227,"byte_end":34272,"line_start":1246,"line_end":1246,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34277,"byte_end":34280,"line_start":1247,"line_end":1247,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34285,"byte_end":34313,"line_start":1248,"line_end":1248,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34318,"byte_end":34375,"line_start":1249,"line_end":1249,"column_start":5,"column_end":62}},{"value":"/ LittleEndian::write_f32_into(&numbers_given, &mut bytes);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34380,"byte_end":34441,"line_start":1250,"line_end":1250,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34446,"byte_end":34449,"line_start":1251,"line_end":1251,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0.0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34454,"byte_end":34489,"line_start":1252,"line_end":1252,"column_start":5,"column_end":40}},{"value":"/ LittleEndian::read_f32_into_unchecked(&bytes, &mut numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34494,"byte_end":34562,"line_start":1253,"line_end":1253,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34567,"byte_end":34610,"line_start":1254,"line_end":1254,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34615,"byte_end":34622,"line_start":1255,"line_end":1255,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34627,"byte_end":34636,"line_start":1256,"line_end":1256,"column_start":5,"column_end":14}},{"value":"deprecated(since = \"1.3.0\", note = \"please use `read_f32_into` instead\")","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34641,"byte_end":34712,"line_start":1257,"line_end":1257,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":35537,"byte_end":35550,"line_start":1285,"line_end":1285,"column_start":8,"column_end":21},"name":"read_f64_into","qualname":"::ByteOrder::read_f64_into","value":"pub fn read_f64_into(&[u8], &mut [f64])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Reads IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads IEEE754 single-precision (4 bytes) floating point numbers from","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34825,"byte_end":34897,"line_start":1262,"line_end":1262,"column_start":5,"column_end":77}},{"value":"/ `src` into `dst`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34902,"byte_end":34923,"line_start":1263,"line_end":1263,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34928,"byte_end":34931,"line_start":1264,"line_end":1264,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34936,"byte_end":34948,"line_start":1265,"line_end":1265,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34953,"byte_end":34956,"line_start":1266,"line_end":1266,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 8*dst.len()`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":34961,"byte_end":35004,"line_start":1267,"line_end":1267,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":35009,"byte_end":35012,"line_start":1268,"line_end":1268,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":35017,"byte_end":35031,"line_start":1269,"line_end":1269,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":35036,"byte_end":35039,"line_start":1270,"line_end":1270,"column_start":5,"column_end":8}},{"value":"/ Write and read `f64` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":35044,"byte_end":35100,"line_start":1271,"line_end":1271,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":35105,"byte_end":35108,"line_start":1272,"line_end":1272,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":35113,"byte_end":35124,"line_start":1273,"line_end":1273,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":35129,"byte_end":35174,"line_start":1274,"line_end":1274,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":35179,"byte_end":35182,"line_start":1275,"line_end":1275,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":35187,"byte_end":35215,"line_start":1276,"line_end":1276,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":35220,"byte_end":35278,"line_start":1277,"line_end":1277,"column_start":5,"column_end":63}},{"value":"/ LittleEndian::write_f64_into(&numbers_given, &mut bytes);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":35283,"byte_end":35344,"line_start":1278,"line_end":1278,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":35349,"byte_end":35352,"line_start":1279,"line_end":1279,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0.0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":35357,"byte_end":35392,"line_start":1280,"line_end":1280,"column_start":5,"column_end":40}},{"value":"/ LittleEndian::read_f64_into(&bytes, &mut numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":35397,"byte_end":35455,"line_start":1281,"line_end":1281,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":35460,"byte_end":35503,"line_start":1282,"line_end":1282,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":35508,"byte_end":35515,"line_start":1283,"line_end":1283,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":35520,"byte_end":35529,"line_start":1284,"line_end":1284,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":36651,"byte_end":36674,"line_start":1320,"line_end":1320,"column_start":8,"column_end":31},"name":"read_f64_into_unchecked","qualname":"::ByteOrder::read_f64_into_unchecked","value":"pub fn read_f64_into_unchecked(&[u8], &mut [f64])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" **DEPRECATED**.","sig":null,"attributes":[{"value":"/ **DEPRECATED**.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":35749,"byte_end":35768,"line_start":1292,"line_end":1292,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":35773,"byte_end":35776,"line_start":1293,"line_end":1293,"column_start":5,"column_end":8}},{"value":"/ This method is deprecated. Use `read_f64_into` instead.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":35781,"byte_end":35840,"line_start":1294,"line_end":1294,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":35845,"byte_end":35848,"line_start":1295,"line_end":1295,"column_start":5,"column_end":8}},{"value":"/ Reads IEEE754 single-precision (4 bytes) floating point numbers from","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":35853,"byte_end":35925,"line_start":1296,"line_end":1296,"column_start":5,"column_end":77}},{"value":"/ `src` into `dst`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":35930,"byte_end":35951,"line_start":1297,"line_end":1297,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":35956,"byte_end":35959,"line_start":1298,"line_end":1298,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":35964,"byte_end":35976,"line_start":1299,"line_end":1299,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":35981,"byte_end":35984,"line_start":1300,"line_end":1300,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 8*dst.len()`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":35989,"byte_end":36032,"line_start":1301,"line_end":1301,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":36037,"byte_end":36040,"line_start":1302,"line_end":1302,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":36045,"byte_end":36059,"line_start":1303,"line_end":1303,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":36064,"byte_end":36067,"line_start":1304,"line_end":1304,"column_start":5,"column_end":8}},{"value":"/ Write and read `f64` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":36072,"byte_end":36128,"line_start":1305,"line_end":1305,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":36133,"byte_end":36136,"line_start":1306,"line_end":1306,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":36141,"byte_end":36152,"line_start":1307,"line_end":1307,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":36157,"byte_end":36202,"line_start":1308,"line_end":1308,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":36207,"byte_end":36210,"line_start":1309,"line_end":1309,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":36215,"byte_end":36243,"line_start":1310,"line_end":1310,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":36248,"byte_end":36306,"line_start":1311,"line_end":1311,"column_start":5,"column_end":63}},{"value":"/ LittleEndian::write_f64_into(&numbers_given, &mut bytes);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":36311,"byte_end":36372,"line_start":1312,"line_end":1312,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":36377,"byte_end":36380,"line_start":1313,"line_end":1313,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0.0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":36385,"byte_end":36420,"line_start":1314,"line_end":1314,"column_start":5,"column_end":40}},{"value":"/ LittleEndian::read_f64_into_unchecked(&bytes, &mut numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":36425,"byte_end":36493,"line_start":1315,"line_end":1315,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":36498,"byte_end":36541,"line_start":1316,"line_end":1316,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":36546,"byte_end":36553,"line_start":1317,"line_end":1317,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":36558,"byte_end":36567,"line_start":1318,"line_end":1318,"column_start":5,"column_end":14}},{"value":"deprecated(since = \"1.3.0\", note = \"please use `read_f64_into` instead\")","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":36572,"byte_end":36643,"line_start":1319,"line_end":1319,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37400,"byte_end":37414,"line_start":1345,"line_end":1345,"column_start":8,"column_end":22},"name":"write_u16_into","qualname":"::ByteOrder::write_u16_into","value":"pub fn write_u16_into(&[u16], &mut [u8])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Writes unsigned 16 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes unsigned 16 bit integers from `src` into `dst`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":36756,"byte_end":36814,"line_start":1324,"line_end":1324,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":36819,"byte_end":36822,"line_start":1325,"line_end":1325,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":36827,"byte_end":36839,"line_start":1326,"line_end":1326,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":36844,"byte_end":36847,"line_start":1327,"line_end":1327,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 2*src.len()`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":36852,"byte_end":36895,"line_start":1328,"line_end":1328,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":36900,"byte_end":36903,"line_start":1329,"line_end":1329,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":36908,"byte_end":36922,"line_start":1330,"line_end":1330,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":36927,"byte_end":36930,"line_start":1331,"line_end":1331,"column_start":5,"column_end":8}},{"value":"/ Write and read `u16` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":36935,"byte_end":36991,"line_start":1332,"line_end":1332,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":36996,"byte_end":36999,"line_start":1333,"line_end":1333,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37004,"byte_end":37015,"line_start":1334,"line_end":1334,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37020,"byte_end":37065,"line_start":1335,"line_end":1335,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37070,"byte_end":37073,"line_start":1336,"line_end":1336,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 8];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37078,"byte_end":37105,"line_start":1337,"line_end":1337,"column_start":5,"column_end":32}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37110,"byte_end":37157,"line_start":1338,"line_end":1338,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u16_into(&numbers_given, &mut bytes);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37162,"byte_end":37223,"line_start":1339,"line_end":1339,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37228,"byte_end":37231,"line_start":1340,"line_end":1340,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37236,"byte_end":37269,"line_start":1341,"line_end":1341,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u16_into(&bytes, &mut numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37274,"byte_end":37332,"line_start":1342,"line_end":1342,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37337,"byte_end":37380,"line_start":1343,"line_end":1343,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37385,"byte_end":37392,"line_start":1344,"line_end":1344,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38095,"byte_end":38109,"line_start":1368,"line_end":1368,"column_start":8,"column_end":22},"name":"write_u32_into","qualname":"::ByteOrder::write_u32_into","value":"pub fn write_u32_into(&[u32], &mut [u8])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Writes unsigned 32 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes unsigned 32 bit integers from `src` into `dst`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37450,"byte_end":37508,"line_start":1347,"line_end":1347,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37513,"byte_end":37516,"line_start":1348,"line_end":1348,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37521,"byte_end":37533,"line_start":1349,"line_end":1349,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37538,"byte_end":37541,"line_start":1350,"line_end":1350,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 4*src.len()`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37546,"byte_end":37589,"line_start":1351,"line_end":1351,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37594,"byte_end":37597,"line_start":1352,"line_end":1352,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37602,"byte_end":37616,"line_start":1353,"line_end":1353,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37621,"byte_end":37624,"line_start":1354,"line_end":1354,"column_start":5,"column_end":8}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37629,"byte_end":37685,"line_start":1355,"line_end":1355,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37690,"byte_end":37693,"line_start":1356,"line_end":1356,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37698,"byte_end":37709,"line_start":1357,"line_end":1357,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37714,"byte_end":37759,"line_start":1358,"line_end":1358,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37764,"byte_end":37767,"line_start":1359,"line_end":1359,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37772,"byte_end":37800,"line_start":1360,"line_end":1360,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37805,"byte_end":37852,"line_start":1361,"line_end":1361,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u32_into(&numbers_given, &mut bytes);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37857,"byte_end":37918,"line_start":1362,"line_end":1362,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37923,"byte_end":37926,"line_start":1363,"line_end":1363,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37931,"byte_end":37964,"line_start":1364,"line_end":1364,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u32_into(&bytes, &mut numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":37969,"byte_end":38027,"line_start":1365,"line_end":1365,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38032,"byte_end":38075,"line_start":1366,"line_end":1366,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38080,"byte_end":38087,"line_start":1367,"line_end":1367,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38790,"byte_end":38804,"line_start":1391,"line_end":1391,"column_start":8,"column_end":22},"name":"write_u64_into","qualname":"::ByteOrder::write_u64_into","value":"pub fn write_u64_into(&[u64], &mut [u8])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Writes unsigned 64 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes unsigned 64 bit integers from `src` into `dst`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38145,"byte_end":38203,"line_start":1370,"line_end":1370,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38208,"byte_end":38211,"line_start":1371,"line_end":1371,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38216,"byte_end":38228,"line_start":1372,"line_end":1372,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38233,"byte_end":38236,"line_start":1373,"line_end":1373,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 8*src.len()`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38241,"byte_end":38284,"line_start":1374,"line_end":1374,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38289,"byte_end":38292,"line_start":1375,"line_end":1375,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38297,"byte_end":38311,"line_start":1376,"line_end":1376,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38316,"byte_end":38319,"line_start":1377,"line_end":1377,"column_start":5,"column_end":8}},{"value":"/ Write and read `u64` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38324,"byte_end":38380,"line_start":1378,"line_end":1378,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38385,"byte_end":38388,"line_start":1379,"line_end":1379,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38393,"byte_end":38404,"line_start":1380,"line_end":1380,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38409,"byte_end":38454,"line_start":1381,"line_end":1381,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38459,"byte_end":38462,"line_start":1382,"line_end":1382,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38467,"byte_end":38495,"line_start":1383,"line_end":1383,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38500,"byte_end":38547,"line_start":1384,"line_end":1384,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u64_into(&numbers_given, &mut bytes);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38552,"byte_end":38613,"line_start":1385,"line_end":1385,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38618,"byte_end":38621,"line_start":1386,"line_end":1386,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38626,"byte_end":38659,"line_start":1387,"line_end":1387,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u64_into(&bytes, &mut numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38664,"byte_end":38722,"line_start":1388,"line_end":1388,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38727,"byte_end":38770,"line_start":1389,"line_end":1389,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38775,"byte_end":38782,"line_start":1390,"line_end":1390,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":39517,"byte_end":39532,"line_start":1415,"line_end":1415,"column_start":8,"column_end":23},"name":"write_u128_into","qualname":"::ByteOrder::write_u128_into","value":"pub fn write_u128_into(&[u128], &mut [u8])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Writes unsigned 128 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes unsigned 128 bit integers from `src` into `dst`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38840,"byte_end":38899,"line_start":1393,"line_end":1393,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38904,"byte_end":38907,"line_start":1394,"line_end":1394,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38912,"byte_end":38924,"line_start":1395,"line_end":1395,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38929,"byte_end":38932,"line_start":1396,"line_end":1396,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 16*src.len()`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38937,"byte_end":38981,"line_start":1397,"line_end":1397,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38986,"byte_end":38989,"line_start":1398,"line_end":1398,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":38994,"byte_end":39008,"line_start":1399,"line_end":1399,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":39013,"byte_end":39016,"line_start":1400,"line_end":1400,"column_start":5,"column_end":8}},{"value":"/ Write and read `u128` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":39021,"byte_end":39078,"line_start":1401,"line_end":1401,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":39083,"byte_end":39086,"line_start":1402,"line_end":1402,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":39091,"byte_end":39102,"line_start":1403,"line_end":1403,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":39107,"byte_end":39152,"line_start":1404,"line_end":1404,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":39157,"byte_end":39160,"line_start":1405,"line_end":1405,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 64];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":39165,"byte_end":39193,"line_start":1406,"line_end":1406,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":39198,"byte_end":39245,"line_start":1407,"line_end":1407,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u128_into(&numbers_given, &mut bytes);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":39250,"byte_end":39312,"line_start":1408,"line_end":1408,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":39317,"byte_end":39320,"line_start":1409,"line_end":1409,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":39325,"byte_end":39358,"line_start":1410,"line_end":1410,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u128_into(&bytes, &mut numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":39363,"byte_end":39422,"line_start":1411,"line_end":1411,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":39427,"byte_end":39470,"line_start":1412,"line_end":1412,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":39475,"byte_end":39482,"line_start":1413,"line_end":1413,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":39487,"byte_end":39509,"line_start":1414,"line_end":1414,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":40560,"byte_end":40573,"line_start":1444,"line_end":1444,"column_start":8,"column_end":21},"name":"write_i8_into","qualname":"::ByteOrder::write_i8_into","value":"pub fn write_i8_into(&[i8], &mut [u8])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Writes signed 8 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes signed 8 bit integers from `src` into `dst`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":39569,"byte_end":39624,"line_start":1417,"line_end":1417,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":39629,"byte_end":39632,"line_start":1418,"line_end":1418,"column_start":5,"column_end":8}},{"value":"/ Note that since each `i8` is a single byte, no byte order conversions","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":39637,"byte_end":39710,"line_start":1419,"line_end":1419,"column_start":5,"column_end":78}},{"value":"/ are used. This method is included because it provides a safe, simple","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":39715,"byte_end":39787,"line_start":1420,"line_end":1420,"column_start":5,"column_end":77}},{"value":"/ way for the caller to write from a `&[i8]` buffer. (Without this","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":39792,"byte_end":39860,"line_start":1421,"line_end":1421,"column_start":5,"column_end":73}},{"value":"/ method, the caller would have to either use `unsafe` code or convert","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":39865,"byte_end":39937,"line_start":1422,"line_end":1422,"column_start":5,"column_end":77}},{"value":"/ each byte to `u8` individually.)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":39942,"byte_end":39978,"line_start":1423,"line_end":1423,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":39983,"byte_end":39986,"line_start":1424,"line_end":1424,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":39991,"byte_end":40003,"line_start":1425,"line_end":1425,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":40008,"byte_end":40011,"line_start":1426,"line_end":1426,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() != src.len()`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":40016,"byte_end":40057,"line_start":1427,"line_end":1427,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":40062,"byte_end":40065,"line_start":1428,"line_end":1428,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":40070,"byte_end":40084,"line_start":1429,"line_end":1429,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":40089,"byte_end":40092,"line_start":1430,"line_end":1430,"column_start":5,"column_end":8}},{"value":"/ Write and read `i8` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":40097,"byte_end":40152,"line_start":1431,"line_end":1431,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":40157,"byte_end":40160,"line_start":1432,"line_end":1432,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":40165,"byte_end":40176,"line_start":1433,"line_end":1433,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian, ReadBytesExt};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":40181,"byte_end":40240,"line_start":1434,"line_end":1434,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":40245,"byte_end":40248,"line_start":1435,"line_end":1435,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":40253,"byte_end":40280,"line_start":1436,"line_end":1436,"column_start":5,"column_end":32}},{"value":"/ let numbers_given = [1, 2, 0xf, 0xe];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":40285,"byte_end":40326,"line_start":1437,"line_end":1437,"column_start":5,"column_end":46}},{"value":"/ LittleEndian::write_i8_into(&numbers_given, &mut bytes);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":40331,"byte_end":40391,"line_start":1438,"line_end":1438,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":40396,"byte_end":40399,"line_start":1439,"line_end":1439,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":40404,"byte_end":40437,"line_start":1440,"line_end":1440,"column_start":5,"column_end":38}},{"value":"/ bytes.as_ref().read_i8_into(&mut numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":40442,"byte_end":40492,"line_start":1441,"line_end":1441,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":40497,"byte_end":40540,"line_start":1442,"line_end":1442,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":40545,"byte_end":40552,"line_start":1443,"line_end":1443,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":41397,"byte_end":41411,"line_start":1472,"line_end":1472,"column_start":8,"column_end":22},"name":"write_i16_into","qualname":"::ByteOrder::write_i16_into","value":"pub fn write_i16_into(&[i16], &mut [u8])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Writes signed 16 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes signed 16 bit integers from `src` into `dst`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":40759,"byte_end":40815,"line_start":1451,"line_end":1451,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":40820,"byte_end":40823,"line_start":1452,"line_end":1452,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":40828,"byte_end":40840,"line_start":1453,"line_end":1453,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":40845,"byte_end":40848,"line_start":1454,"line_end":1454,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() != 2*src.len()`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":40853,"byte_end":40896,"line_start":1455,"line_end":1455,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":40901,"byte_end":40904,"line_start":1456,"line_end":1456,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":40909,"byte_end":40923,"line_start":1457,"line_end":1457,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":40928,"byte_end":40931,"line_start":1458,"line_end":1458,"column_start":5,"column_end":8}},{"value":"/ Write and read `i16` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":40936,"byte_end":40992,"line_start":1459,"line_end":1459,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":40997,"byte_end":41000,"line_start":1460,"line_end":1460,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":41005,"byte_end":41016,"line_start":1461,"line_end":1461,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":41021,"byte_end":41066,"line_start":1462,"line_end":1462,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":41071,"byte_end":41074,"line_start":1463,"line_end":1463,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 8];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":41079,"byte_end":41106,"line_start":1464,"line_end":1464,"column_start":5,"column_end":32}},{"value":"/ let numbers_given = [1, 2, 0x0f, 0xee];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":41111,"byte_end":41154,"line_start":1465,"line_end":1465,"column_start":5,"column_end":48}},{"value":"/ LittleEndian::write_i16_into(&numbers_given, &mut bytes);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":41159,"byte_end":41220,"line_start":1466,"line_end":1466,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":41225,"byte_end":41228,"line_start":1467,"line_end":1467,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":41233,"byte_end":41266,"line_start":1468,"line_end":1468,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i16_into(&bytes, &mut numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":41271,"byte_end":41329,"line_start":1469,"line_end":1469,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":41334,"byte_end":41377,"line_start":1470,"line_end":1470,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":41382,"byte_end":41389,"line_start":1471,"line_end":1471,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":42248,"byte_end":42262,"line_start":1500,"line_end":1500,"column_start":8,"column_end":22},"name":"write_i32_into","qualname":"::ByteOrder::write_i32_into","value":"pub fn write_i32_into(&[i32], &mut [u8])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Writes signed 32 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes signed 32 bit integers from `src` into `dst`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":41605,"byte_end":41661,"line_start":1479,"line_end":1479,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":41666,"byte_end":41669,"line_start":1480,"line_end":1480,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":41674,"byte_end":41686,"line_start":1481,"line_end":1481,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":41691,"byte_end":41694,"line_start":1482,"line_end":1482,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 4*src.len()`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":41699,"byte_end":41742,"line_start":1483,"line_end":1483,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":41747,"byte_end":41750,"line_start":1484,"line_end":1484,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":41755,"byte_end":41769,"line_start":1485,"line_end":1485,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":41774,"byte_end":41777,"line_start":1486,"line_end":1486,"column_start":5,"column_end":8}},{"value":"/ Write and read `i32` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":41782,"byte_end":41838,"line_start":1487,"line_end":1487,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":41843,"byte_end":41846,"line_start":1488,"line_end":1488,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":41851,"byte_end":41862,"line_start":1489,"line_end":1489,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":41867,"byte_end":41912,"line_start":1490,"line_end":1490,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":41917,"byte_end":41920,"line_start":1491,"line_end":1491,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":41925,"byte_end":41953,"line_start":1492,"line_end":1492,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":41958,"byte_end":42005,"line_start":1493,"line_end":1493,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i32_into(&numbers_given, &mut bytes);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":42010,"byte_end":42071,"line_start":1494,"line_end":1494,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":42076,"byte_end":42079,"line_start":1495,"line_end":1495,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":42084,"byte_end":42117,"line_start":1496,"line_end":1496,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i32_into(&bytes, &mut numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":42122,"byte_end":42180,"line_start":1497,"line_end":1497,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":42185,"byte_end":42228,"line_start":1498,"line_end":1498,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":42233,"byte_end":42240,"line_start":1499,"line_end":1499,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":43099,"byte_end":43113,"line_start":1528,"line_end":1528,"column_start":8,"column_end":22},"name":"write_i64_into","qualname":"::ByteOrder::write_i64_into","value":"pub fn write_i64_into(&[i64], &mut [u8])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Writes signed 64 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes signed 64 bit integers from `src` into `dst`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":42456,"byte_end":42512,"line_start":1507,"line_end":1507,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":42517,"byte_end":42520,"line_start":1508,"line_end":1508,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":42525,"byte_end":42537,"line_start":1509,"line_end":1509,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":42542,"byte_end":42545,"line_start":1510,"line_end":1510,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 8*src.len()`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":42550,"byte_end":42593,"line_start":1511,"line_end":1511,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":42598,"byte_end":42601,"line_start":1512,"line_end":1512,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":42606,"byte_end":42620,"line_start":1513,"line_end":1513,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":42625,"byte_end":42628,"line_start":1514,"line_end":1514,"column_start":5,"column_end":8}},{"value":"/ Write and read `i64` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":42633,"byte_end":42689,"line_start":1515,"line_end":1515,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":42694,"byte_end":42697,"line_start":1516,"line_end":1516,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":42702,"byte_end":42713,"line_start":1517,"line_end":1517,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":42718,"byte_end":42763,"line_start":1518,"line_end":1518,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":42768,"byte_end":42771,"line_start":1519,"line_end":1519,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":42776,"byte_end":42804,"line_start":1520,"line_end":1520,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":42809,"byte_end":42856,"line_start":1521,"line_end":1521,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i64_into(&numbers_given, &mut bytes);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":42861,"byte_end":42922,"line_start":1522,"line_end":1522,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":42927,"byte_end":42930,"line_start":1523,"line_end":1523,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":42935,"byte_end":42968,"line_start":1524,"line_end":1524,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i64_into(&bytes, &mut numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":42973,"byte_end":43031,"line_start":1525,"line_end":1525,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":43036,"byte_end":43079,"line_start":1526,"line_end":1526,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":43084,"byte_end":43091,"line_start":1527,"line_end":1527,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":43982,"byte_end":43997,"line_start":1557,"line_end":1557,"column_start":8,"column_end":23},"name":"write_i128_into","qualname":"::ByteOrder::write_i128_into","value":"pub fn write_i128_into(&[i128], &mut [u8])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Writes signed 128 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes signed 128 bit integers from `src` into `dst`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":43307,"byte_end":43364,"line_start":1535,"line_end":1535,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":43369,"byte_end":43372,"line_start":1536,"line_end":1536,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":43377,"byte_end":43389,"line_start":1537,"line_end":1537,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":43394,"byte_end":43397,"line_start":1538,"line_end":1538,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 16*src.len()`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":43402,"byte_end":43446,"line_start":1539,"line_end":1539,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":43451,"byte_end":43454,"line_start":1540,"line_end":1540,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":43459,"byte_end":43473,"line_start":1541,"line_end":1541,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":43478,"byte_end":43481,"line_start":1542,"line_end":1542,"column_start":5,"column_end":8}},{"value":"/ Write and read `i128` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":43486,"byte_end":43543,"line_start":1543,"line_end":1543,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":43548,"byte_end":43551,"line_start":1544,"line_end":1544,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":43556,"byte_end":43567,"line_start":1545,"line_end":1545,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":43572,"byte_end":43617,"line_start":1546,"line_end":1546,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":43622,"byte_end":43625,"line_start":1547,"line_end":1547,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 64];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":43630,"byte_end":43658,"line_start":1548,"line_end":1548,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":43663,"byte_end":43710,"line_start":1549,"line_end":1549,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i128_into(&numbers_given, &mut bytes);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":43715,"byte_end":43777,"line_start":1550,"line_end":1550,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":43782,"byte_end":43785,"line_start":1551,"line_end":1551,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":43790,"byte_end":43823,"line_start":1552,"line_end":1552,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i128_into(&bytes, &mut numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":43828,"byte_end":43887,"line_start":1553,"line_end":1553,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":43892,"byte_end":43935,"line_start":1554,"line_end":1554,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":43940,"byte_end":43947,"line_start":1555,"line_end":1555,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":43952,"byte_end":43974,"line_start":1556,"line_end":1556,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":44923,"byte_end":44937,"line_start":1588,"line_end":1588,"column_start":8,"column_end":22},"name":"write_f32_into","qualname":"::ByteOrder::write_f32_into","value":"pub fn write_f32_into(&[f32], &mut [u8])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Writes IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes IEEE754 single-precision (4 bytes) floating point numbers from","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":44194,"byte_end":44267,"line_start":1564,"line_end":1564,"column_start":5,"column_end":78}},{"value":"/ `src` into `dst`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":44272,"byte_end":44293,"line_start":1565,"line_end":1565,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":44298,"byte_end":44301,"line_start":1566,"line_end":1566,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":44306,"byte_end":44318,"line_start":1567,"line_end":1567,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":44323,"byte_end":44326,"line_start":1568,"line_end":1568,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 4*dst.len()`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":44331,"byte_end":44374,"line_start":1569,"line_end":1569,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":44379,"byte_end":44382,"line_start":1570,"line_end":1570,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":44387,"byte_end":44401,"line_start":1571,"line_end":1571,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":44406,"byte_end":44409,"line_start":1572,"line_end":1572,"column_start":5,"column_end":8}},{"value":"/ Write and read `f32` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":44414,"byte_end":44470,"line_start":1573,"line_end":1573,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":44475,"byte_end":44478,"line_start":1574,"line_end":1574,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":44483,"byte_end":44494,"line_start":1575,"line_end":1575,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":44499,"byte_end":44544,"line_start":1576,"line_end":1576,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":44549,"byte_end":44552,"line_start":1577,"line_end":1577,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":44557,"byte_end":44585,"line_start":1578,"line_end":1578,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":44590,"byte_end":44647,"line_start":1579,"line_end":1579,"column_start":5,"column_end":62}},{"value":"/ LittleEndian::write_f32_into(&numbers_given, &mut bytes);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":44652,"byte_end":44713,"line_start":1580,"line_end":1580,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":44718,"byte_end":44721,"line_start":1581,"line_end":1581,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0.0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":44726,"byte_end":44761,"line_start":1582,"line_end":1582,"column_start":5,"column_end":40}},{"value":"/ unsafe {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":44766,"byte_end":44778,"line_start":1583,"line_end":1583,"column_start":5,"column_end":17}},{"value":"/     LittleEndian::read_f32_into(&bytes, &mut numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":44783,"byte_end":44845,"line_start":1584,"line_end":1584,"column_start":5,"column_end":67}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":44850,"byte_end":44855,"line_start":1585,"line_end":1585,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":44860,"byte_end":44903,"line_start":1586,"line_end":1586,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":44908,"byte_end":44915,"line_start":1587,"line_end":1587,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":45861,"byte_end":45875,"line_start":1619,"line_end":1619,"column_start":8,"column_end":22},"name":"write_f64_into","qualname":"::ByteOrder::write_f64_into","value":"pub fn write_f64_into(&[f64], &mut [u8])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Writes IEEE754 double-precision (8 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes IEEE754 double-precision (8 bytes) floating point numbers from","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":45131,"byte_end":45204,"line_start":1595,"line_end":1595,"column_start":5,"column_end":78}},{"value":"/ `src` into `dst`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":45209,"byte_end":45230,"line_start":1596,"line_end":1596,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":45235,"byte_end":45238,"line_start":1597,"line_end":1597,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":45243,"byte_end":45255,"line_start":1598,"line_end":1598,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":45260,"byte_end":45263,"line_start":1599,"line_end":1599,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 8*dst.len()`.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":45268,"byte_end":45311,"line_start":1600,"line_end":1600,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":45316,"byte_end":45319,"line_start":1601,"line_end":1601,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":45324,"byte_end":45338,"line_start":1602,"line_end":1602,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":45343,"byte_end":45346,"line_start":1603,"line_end":1603,"column_start":5,"column_end":8}},{"value":"/ Write and read `f64` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":45351,"byte_end":45407,"line_start":1604,"line_end":1604,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":45412,"byte_end":45415,"line_start":1605,"line_end":1605,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":45420,"byte_end":45431,"line_start":1606,"line_end":1606,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":45436,"byte_end":45481,"line_start":1607,"line_end":1607,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":45486,"byte_end":45489,"line_start":1608,"line_end":1608,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":45494,"byte_end":45522,"line_start":1609,"line_end":1609,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":45527,"byte_end":45585,"line_start":1610,"line_end":1610,"column_start":5,"column_end":63}},{"value":"/ LittleEndian::write_f64_into(&numbers_given, &mut bytes);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":45590,"byte_end":45651,"line_start":1611,"line_end":1611,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":45656,"byte_end":45659,"line_start":1612,"line_end":1612,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0.0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":45664,"byte_end":45699,"line_start":1613,"line_end":1613,"column_start":5,"column_end":40}},{"value":"/ unsafe {","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":45704,"byte_end":45716,"line_start":1614,"line_end":1614,"column_start":5,"column_end":17}},{"value":"/     LittleEndian::read_f64_into(&bytes, &mut numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":45721,"byte_end":45783,"line_start":1615,"line_end":1615,"column_start":5,"column_end":67}},{"value":"/ }","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":45788,"byte_end":45793,"line_start":1616,"line_end":1616,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":45798,"byte_end":45841,"line_start":1617,"line_end":1617,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":45846,"byte_end":45853,"line_start":1618,"line_end":1618,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46616,"byte_end":46630,"line_start":1643,"line_end":1643,"column_start":8,"column_end":22},"name":"from_slice_u16","qualname":"::ByteOrder::from_slice_u16","value":"pub fn from_slice_u16(&mut [u16])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 16 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of unsigned 16 bit integers to a particular","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46069,"byte_end":46141,"line_start":1626,"line_end":1626,"column_start":5,"column_end":77}},{"value":"/ endianness.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46146,"byte_end":46161,"line_start":1627,"line_end":1627,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46166,"byte_end":46169,"line_start":1628,"line_end":1628,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46174,"byte_end":46245,"line_start":1629,"line_end":1629,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46250,"byte_end":46270,"line_start":1630,"line_end":1630,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46275,"byte_end":46278,"line_start":1631,"line_end":1631,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46283,"byte_end":46297,"line_start":1632,"line_end":1632,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46302,"byte_end":46305,"line_start":1633,"line_end":1633,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46310,"byte_end":46367,"line_start":1634,"line_end":1634,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46372,"byte_end":46375,"line_start":1635,"line_end":1635,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46380,"byte_end":46391,"line_start":1636,"line_end":1636,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46396,"byte_end":46438,"line_start":1637,"line_end":1637,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46443,"byte_end":46446,"line_start":1638,"line_end":1638,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46451,"byte_end":46484,"line_start":1639,"line_end":1639,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_u16(&mut numbers);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46489,"byte_end":46533,"line_start":1640,"line_end":1640,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(numbers, [5u16.to_be(), 65000u16.to_be()]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46538,"byte_end":46596,"line_start":1641,"line_end":1641,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46601,"byte_end":46608,"line_start":1642,"line_end":1642,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":47205,"byte_end":47219,"line_start":1662,"line_end":1662,"column_start":8,"column_end":22},"name":"from_slice_u32","qualname":"::ByteOrder::from_slice_u32","value":"pub fn from_slice_u32(&mut [u32])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 32 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of unsigned 32 bit integers to a particular","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46658,"byte_end":46730,"line_start":1645,"line_end":1645,"column_start":5,"column_end":77}},{"value":"/ endianness.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46735,"byte_end":46750,"line_start":1646,"line_end":1646,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46755,"byte_end":46758,"line_start":1647,"line_end":1647,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46763,"byte_end":46834,"line_start":1648,"line_end":1648,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46839,"byte_end":46859,"line_start":1649,"line_end":1649,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46864,"byte_end":46867,"line_start":1650,"line_end":1650,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46872,"byte_end":46886,"line_start":1651,"line_end":1651,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46891,"byte_end":46894,"line_start":1652,"line_end":1652,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46899,"byte_end":46956,"line_start":1653,"line_end":1653,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46961,"byte_end":46964,"line_start":1654,"line_end":1654,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46969,"byte_end":46980,"line_start":1655,"line_end":1655,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":46985,"byte_end":47027,"line_start":1656,"line_end":1656,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":47032,"byte_end":47035,"line_start":1657,"line_end":1657,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":47040,"byte_end":47073,"line_start":1658,"line_end":1658,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_u32(&mut numbers);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":47078,"byte_end":47122,"line_start":1659,"line_end":1659,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(numbers, [5u32.to_be(), 65000u32.to_be()]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":47127,"byte_end":47185,"line_start":1660,"line_end":1660,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":47190,"byte_end":47197,"line_start":1661,"line_end":1661,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":47794,"byte_end":47808,"line_start":1681,"line_end":1681,"column_start":8,"column_end":22},"name":"from_slice_u64","qualname":"::ByteOrder::from_slice_u64","value":"pub fn from_slice_u64(&mut [u64])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 64 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of unsigned 64 bit integers to a particular","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":47247,"byte_end":47319,"line_start":1664,"line_end":1664,"column_start":5,"column_end":77}},{"value":"/ endianness.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":47324,"byte_end":47339,"line_start":1665,"line_end":1665,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":47344,"byte_end":47347,"line_start":1666,"line_end":1666,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":47352,"byte_end":47423,"line_start":1667,"line_end":1667,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":47428,"byte_end":47448,"line_start":1668,"line_end":1668,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":47453,"byte_end":47456,"line_start":1669,"line_end":1669,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":47461,"byte_end":47475,"line_start":1670,"line_end":1670,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":47480,"byte_end":47483,"line_start":1671,"line_end":1671,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":47488,"byte_end":47545,"line_start":1672,"line_end":1672,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":47550,"byte_end":47553,"line_start":1673,"line_end":1673,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":47558,"byte_end":47569,"line_start":1674,"line_end":1674,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":47574,"byte_end":47616,"line_start":1675,"line_end":1675,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":47621,"byte_end":47624,"line_start":1676,"line_end":1676,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":47629,"byte_end":47662,"line_start":1677,"line_end":1677,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_u64(&mut numbers);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":47667,"byte_end":47711,"line_start":1678,"line_end":1678,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(numbers, [5u64.to_be(), 65000u64.to_be()]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":47716,"byte_end":47774,"line_start":1679,"line_end":1679,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":47779,"byte_end":47786,"line_start":1680,"line_end":1680,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48414,"byte_end":48429,"line_start":1701,"line_end":1701,"column_start":8,"column_end":23},"name":"from_slice_u128","qualname":"::ByteOrder::from_slice_u128","value":"pub fn from_slice_u128(&mut [u128])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 128 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of unsigned 128 bit integers to a particular","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":47836,"byte_end":47909,"line_start":1683,"line_end":1683,"column_start":5,"column_end":78}},{"value":"/ endianness.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":47914,"byte_end":47929,"line_start":1684,"line_end":1684,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":47934,"byte_end":47937,"line_start":1685,"line_end":1685,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":47942,"byte_end":48013,"line_start":1686,"line_end":1686,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48018,"byte_end":48038,"line_start":1687,"line_end":1687,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48043,"byte_end":48046,"line_start":1688,"line_end":1688,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48051,"byte_end":48065,"line_start":1689,"line_end":1689,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48070,"byte_end":48073,"line_start":1690,"line_end":1690,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48078,"byte_end":48135,"line_start":1691,"line_end":1691,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48140,"byte_end":48143,"line_start":1692,"line_end":1692,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48148,"byte_end":48159,"line_start":1693,"line_end":1693,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48164,"byte_end":48206,"line_start":1694,"line_end":1694,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48211,"byte_end":48214,"line_start":1695,"line_end":1695,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48219,"byte_end":48252,"line_start":1696,"line_end":1696,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_u128(&mut numbers);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48257,"byte_end":48302,"line_start":1697,"line_end":1697,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(numbers, [5u128.to_be(), 65000u128.to_be()]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48307,"byte_end":48367,"line_start":1698,"line_end":1698,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48372,"byte_end":48379,"line_start":1699,"line_end":1699,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48384,"byte_end":48406,"line_start":1700,"line_end":1700,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":49015,"byte_end":49029,"line_start":1721,"line_end":1721,"column_start":8,"column_end":22},"name":"from_slice_i16","qualname":"::ByteOrder::from_slice_i16","value":"pub fn from_slice_i16(&mut [i16])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 16 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of signed 16 bit integers to a particular","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48458,"byte_end":48528,"line_start":1703,"line_end":1703,"column_start":5,"column_end":75}},{"value":"/ endianness.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48533,"byte_end":48548,"line_start":1704,"line_end":1704,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48553,"byte_end":48556,"line_start":1705,"line_end":1705,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48561,"byte_end":48632,"line_start":1706,"line_end":1706,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48637,"byte_end":48657,"line_start":1707,"line_end":1707,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48662,"byte_end":48665,"line_start":1708,"line_end":1708,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48670,"byte_end":48684,"line_start":1709,"line_end":1709,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48689,"byte_end":48692,"line_start":1710,"line_end":1710,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48697,"byte_end":48754,"line_start":1711,"line_end":1711,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48759,"byte_end":48762,"line_start":1712,"line_end":1712,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48767,"byte_end":48778,"line_start":1713,"line_end":1713,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48783,"byte_end":48825,"line_start":1714,"line_end":1714,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48830,"byte_end":48833,"line_start":1715,"line_end":1715,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 6500];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48838,"byte_end":48870,"line_start":1716,"line_end":1716,"column_start":5,"column_end":37}},{"value":"/ BigEndian::from_slice_i16(&mut numbers);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48875,"byte_end":48919,"line_start":1717,"line_end":1717,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(numbers, [5i16.to_be(), 6500i16.to_be()]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48924,"byte_end":48981,"line_start":1718,"line_end":1718,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48986,"byte_end":48993,"line_start":1719,"line_end":1719,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":48998,"byte_end":49007,"line_start":1720,"line_end":1720,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":49767,"byte_end":49781,"line_start":1746,"line_end":1746,"column_start":8,"column_end":22},"name":"from_slice_i32","qualname":"::ByteOrder::from_slice_i32","value":"pub fn from_slice_i32(&mut [i32])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 32 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of signed 32 bit integers to a particular","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":49208,"byte_end":49278,"line_start":1728,"line_end":1728,"column_start":5,"column_end":75}},{"value":"/ endianness.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":49283,"byte_end":49298,"line_start":1729,"line_end":1729,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":49303,"byte_end":49306,"line_start":1730,"line_end":1730,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":49311,"byte_end":49382,"line_start":1731,"line_end":1731,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":49387,"byte_end":49407,"line_start":1732,"line_end":1732,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":49412,"byte_end":49415,"line_start":1733,"line_end":1733,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":49420,"byte_end":49434,"line_start":1734,"line_end":1734,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":49439,"byte_end":49442,"line_start":1735,"line_end":1735,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":49447,"byte_end":49504,"line_start":1736,"line_end":1736,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":49509,"byte_end":49512,"line_start":1737,"line_end":1737,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":49517,"byte_end":49528,"line_start":1738,"line_end":1738,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":49533,"byte_end":49575,"line_start":1739,"line_end":1739,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":49580,"byte_end":49583,"line_start":1740,"line_end":1740,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":49588,"byte_end":49621,"line_start":1741,"line_end":1741,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_i32(&mut numbers);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":49626,"byte_end":49670,"line_start":1742,"line_end":1742,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(numbers, [5i32.to_be(), 65000i32.to_be()]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":49675,"byte_end":49733,"line_start":1743,"line_end":1743,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":49738,"byte_end":49745,"line_start":1744,"line_end":1744,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":49750,"byte_end":49759,"line_start":1745,"line_end":1745,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":50519,"byte_end":50533,"line_start":1771,"line_end":1771,"column_start":8,"column_end":22},"name":"from_slice_i64","qualname":"::ByteOrder::from_slice_i64","value":"pub fn from_slice_i64(&mut [i64])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 64 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of signed 64 bit integers to a particular","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":49960,"byte_end":50030,"line_start":1753,"line_end":1753,"column_start":5,"column_end":75}},{"value":"/ endianness.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":50035,"byte_end":50050,"line_start":1754,"line_end":1754,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":50055,"byte_end":50058,"line_start":1755,"line_end":1755,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":50063,"byte_end":50134,"line_start":1756,"line_end":1756,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":50139,"byte_end":50159,"line_start":1757,"line_end":1757,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":50164,"byte_end":50167,"line_start":1758,"line_end":1758,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":50172,"byte_end":50186,"line_start":1759,"line_end":1759,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":50191,"byte_end":50194,"line_start":1760,"line_end":1760,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":50199,"byte_end":50256,"line_start":1761,"line_end":1761,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":50261,"byte_end":50264,"line_start":1762,"line_end":1762,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":50269,"byte_end":50280,"line_start":1763,"line_end":1763,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":50285,"byte_end":50327,"line_start":1764,"line_end":1764,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":50332,"byte_end":50335,"line_start":1765,"line_end":1765,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":50340,"byte_end":50373,"line_start":1766,"line_end":1766,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_i64(&mut numbers);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":50378,"byte_end":50422,"line_start":1767,"line_end":1767,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(numbers, [5i64.to_be(), 65000i64.to_be()]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":50427,"byte_end":50485,"line_start":1768,"line_end":1768,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":50490,"byte_end":50497,"line_start":1769,"line_end":1769,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":50502,"byte_end":50511,"line_start":1770,"line_end":1770,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":51302,"byte_end":51317,"line_start":1797,"line_end":1797,"column_start":8,"column_end":23},"name":"from_slice_i128","qualname":"::ByteOrder::from_slice_i128","value":"pub fn from_slice_i128(&mut [i128])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 128 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of signed 128 bit integers to a particular","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":50712,"byte_end":50783,"line_start":1778,"line_end":1778,"column_start":5,"column_end":76}},{"value":"/ endianness.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":50788,"byte_end":50803,"line_start":1779,"line_end":1779,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":50808,"byte_end":50811,"line_start":1780,"line_end":1780,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":50816,"byte_end":50887,"line_start":1781,"line_end":1781,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":50892,"byte_end":50912,"line_start":1782,"line_end":1782,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":50917,"byte_end":50920,"line_start":1783,"line_end":1783,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":50925,"byte_end":50939,"line_start":1784,"line_end":1784,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":50944,"byte_end":50947,"line_start":1785,"line_end":1785,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":50952,"byte_end":51009,"line_start":1786,"line_end":1786,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":51014,"byte_end":51017,"line_start":1787,"line_end":1787,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":51022,"byte_end":51033,"line_start":1788,"line_end":1788,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":51038,"byte_end":51080,"line_start":1789,"line_end":1789,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":51085,"byte_end":51088,"line_start":1790,"line_end":1790,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":51093,"byte_end":51126,"line_start":1791,"line_end":1791,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_i128(&mut numbers);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":51131,"byte_end":51176,"line_start":1792,"line_end":1792,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(numbers, [5i128.to_be(), 65000i128.to_be()]);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":51181,"byte_end":51241,"line_start":1793,"line_end":1793,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":51246,"byte_end":51253,"line_start":1794,"line_end":1794,"column_start":5,"column_end":12}},{"value":"cfg(byteorder_i128)","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":51258,"byte_end":51280,"line_start":1795,"line_end":1795,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":51285,"byte_end":51294,"line_start":1796,"line_end":1796,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":51741,"byte_end":51755,"line_start":1809,"line_end":1809,"column_start":8,"column_end":22},"name":"from_slice_f32","qualname":"::ByteOrder::from_slice_f32","value":"pub fn from_slice_f32(&mut [f32])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Converts the given slice of IEEE754 single-precision (4 bytes) floating\n point numbers to a particular endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of IEEE754 single-precision (4 bytes) floating","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":51499,"byte_end":51574,"line_start":1804,"line_end":1804,"column_start":5,"column_end":80}},{"value":"/ point numbers to a particular endianness.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":51579,"byte_end":51624,"line_start":1805,"line_end":1805,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":51629,"byte_end":51632,"line_start":1806,"line_end":1806,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":51637,"byte_end":51708,"line_start":1807,"line_end":1807,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":51713,"byte_end":51733,"line_start":1808,"line_end":1808,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52025,"byte_end":52039,"line_start":1816,"line_end":1816,"column_start":8,"column_end":22},"name":"from_slice_f64","qualname":"::ByteOrder::from_slice_f64","value":"pub fn from_slice_f64(&mut [f64])","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Converts the given slice of IEEE754 double-precision (8 bytes) floating\n point numbers to a particular endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of IEEE754 double-precision (8 bytes) floating","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":51783,"byte_end":51858,"line_start":1811,"line_end":1811,"column_start":5,"column_end":80}},{"value":"/ point numbers to a particular endianness.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":51863,"byte_end":51908,"line_start":1812,"line_end":1812,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":51913,"byte_end":51916,"line_start":1813,"line_end":1813,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":51921,"byte_end":51992,"line_start":1814,"line_end":1814,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":51997,"byte_end":52017,"line_start":1815,"line_end":1815,"column_start":5,"column_end":25}}]},{"kind":"Enum","id":{"krate":0,"index":338},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52550,"byte_end":52559,"line_start":1836,"line_end":1836,"column_start":10,"column_end":19},"name":"BigEndian","qualname":"::BigEndian","value":"pub enum BigEndian { }","parent":null,"children":[],"decl_id":null,"docs":" Defines big-endian serialization.","sig":null,"attributes":[{"value":"/ Defines big-endian serialization.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52065,"byte_end":52102,"line_start":1819,"line_end":1819,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52103,"byte_end":52106,"line_start":1820,"line_end":1820,"column_start":1,"column_end":4}},{"value":"/ Note that this type has no value constructor. It is used purely at the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52107,"byte_end":52181,"line_start":1821,"line_end":1821,"column_start":1,"column_end":75}},{"value":"/ type level.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52182,"byte_end":52197,"line_start":1822,"line_end":1822,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52198,"byte_end":52201,"line_start":1823,"line_end":1823,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52202,"byte_end":52216,"line_start":1824,"line_end":1824,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52217,"byte_end":52220,"line_start":1825,"line_end":1825,"column_start":1,"column_end":4}},{"value":"/ Write and read `u32` numbers in big endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52221,"byte_end":52274,"line_start":1826,"line_end":1826,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52275,"byte_end":52278,"line_start":1827,"line_end":1827,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52279,"byte_end":52290,"line_start":1828,"line_end":1828,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52291,"byte_end":52333,"line_start":1829,"line_end":1829,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52334,"byte_end":52337,"line_start":1830,"line_end":1830,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52338,"byte_end":52363,"line_start":1831,"line_end":1831,"column_start":1,"column_end":26}},{"value":"/ BigEndian::write_u32(&mut buf, 1_000_000);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52364,"byte_end":52410,"line_start":1832,"line_end":1832,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(1_000_000, BigEndian::read_u32(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52411,"byte_end":52464,"line_start":1833,"line_end":1833,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52465,"byte_end":52472,"line_start":1834,"line_end":1834,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":269},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52758,"byte_end":52760,"line_start":1847,"line_end":1847,"column_start":10,"column_end":12},"name":"BE","qualname":"::BE","value":"BigEndian","parent":null,"children":[],"decl_id":null,"docs":" A type alias for [`BigEndian`].","sig":null,"attributes":[{"value":"/ A type alias for [`BigEndian`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52670,"byte_end":52705,"line_start":1844,"line_end":1844,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52706,"byte_end":52709,"line_start":1845,"line_end":1845,"column_start":1,"column_end":4}},{"value":"/ [`BigEndian`]: enum.BigEndian.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52710,"byte_end":52748,"line_start":1846,"line_end":1846,"column_start":1,"column_end":39}}]},{"kind":"Enum","id":{"krate":0,"index":357},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53275,"byte_end":53287,"line_start":1866,"line_end":1866,"column_start":10,"column_end":22},"name":"LittleEndian","qualname":"::LittleEndian","value":"pub enum LittleEndian { }","parent":null,"children":[],"decl_id":null,"docs":" Defines little-endian serialization.","sig":null,"attributes":[{"value":"/ Defines little-endian serialization.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52775,"byte_end":52815,"line_start":1849,"line_end":1849,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52816,"byte_end":52819,"line_start":1850,"line_end":1850,"column_start":1,"column_end":4}},{"value":"/ Note that this type has no value constructor. It is used purely at the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52820,"byte_end":52894,"line_start":1851,"line_end":1851,"column_start":1,"column_end":75}},{"value":"/ type level.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52895,"byte_end":52910,"line_start":1852,"line_end":1852,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52911,"byte_end":52914,"line_start":1853,"line_end":1853,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52915,"byte_end":52929,"line_start":1854,"line_end":1854,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52930,"byte_end":52933,"line_start":1855,"line_end":1855,"column_start":1,"column_end":4}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52934,"byte_end":52990,"line_start":1856,"line_end":1856,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52991,"byte_end":52994,"line_start":1857,"line_end":1857,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52995,"byte_end":53006,"line_start":1858,"line_end":1858,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53007,"byte_end":53052,"line_start":1859,"line_end":1859,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53053,"byte_end":53056,"line_start":1860,"line_end":1860,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53057,"byte_end":53082,"line_start":1861,"line_end":1861,"column_start":1,"column_end":26}},{"value":"/ LittleEndian::write_u32(&mut buf, 1_000_000);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53083,"byte_end":53132,"line_start":1862,"line_end":1862,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u32(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53133,"byte_end":53189,"line_start":1863,"line_end":1863,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53190,"byte_end":53197,"line_start":1864,"line_end":1864,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":272},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53504,"byte_end":53506,"line_start":1877,"line_end":1877,"column_start":10,"column_end":12},"name":"LE","qualname":"::LE","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" A type alias for [`LittleEndian`].","sig":null,"attributes":[{"value":"/ A type alias for [`LittleEndian`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53407,"byte_end":53445,"line_start":1874,"line_end":1874,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53446,"byte_end":53449,"line_start":1875,"line_end":1875,"column_start":1,"column_end":4}},{"value":"/ [`LittleEndian`]: enum.LittleEndian.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53450,"byte_end":53494,"line_start":1876,"line_end":1876,"column_start":1,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":273},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":54231,"byte_end":54244,"line_start":1903,"line_end":1903,"column_start":10,"column_end":23},"name":"NetworkEndian","qualname":"::NetworkEndian","value":"BigEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines network byte order serialization.","sig":null,"attributes":[{"value":"/ Defines network byte order serialization.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53524,"byte_end":53569,"line_start":1879,"line_end":1879,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53570,"byte_end":53573,"line_start":1880,"line_end":1880,"column_start":1,"column_end":4}},{"value":"/ Network byte order is defined by [RFC 1700][1] to be big-endian, and is","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53574,"byte_end":53649,"line_start":1881,"line_end":1881,"column_start":1,"column_end":76}},{"value":"/ referred to in several protocol specifications.  This type is an alias of","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53650,"byte_end":53727,"line_start":1882,"line_end":1882,"column_start":1,"column_end":78}},{"value":"/ [`BigEndian`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53728,"byte_end":53746,"line_start":1883,"line_end":1883,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53747,"byte_end":53750,"line_start":1884,"line_end":1884,"column_start":1,"column_end":4}},{"value":"/ [1]: https://tools.ietf.org/html/rfc1700","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53751,"byte_end":53795,"line_start":1885,"line_end":1885,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53796,"byte_end":53799,"line_start":1886,"line_end":1886,"column_start":1,"column_end":4}},{"value":"/ Note that this type has no value constructor. It is used purely at the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53800,"byte_end":53874,"line_start":1887,"line_end":1887,"column_start":1,"column_end":75}},{"value":"/ type level.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53875,"byte_end":53890,"line_start":1888,"line_end":1888,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53891,"byte_end":53894,"line_start":1889,"line_end":1889,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53895,"byte_end":53909,"line_start":1890,"line_end":1890,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53910,"byte_end":53913,"line_start":1891,"line_end":1891,"column_start":1,"column_end":4}},{"value":"/ Write and read `i16` numbers in big endian order:","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53914,"byte_end":53967,"line_start":1892,"line_end":1892,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53968,"byte_end":53971,"line_start":1893,"line_end":1893,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53972,"byte_end":53983,"line_start":1894,"line_end":1894,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{ByteOrder, NetworkEndian, BigEndian};","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53984,"byte_end":54041,"line_start":1895,"line_end":1895,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":54042,"byte_end":54045,"line_start":1896,"line_end":1896,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 2];","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":54046,"byte_end":54071,"line_start":1897,"line_end":1897,"column_start":1,"column_end":26}},{"value":"/ BigEndian::write_i16(&mut buf, -5_000);","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":54072,"byte_end":54115,"line_start":1898,"line_end":1898,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(-5_000, NetworkEndian::read_i16(&buf));","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":54116,"byte_end":54170,"line_start":1899,"line_end":1899,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":54171,"byte_end":54178,"line_start":1900,"line_end":1900,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":54179,"byte_end":54182,"line_start":1901,"line_end":1901,"column_start":1,"column_end":4}},{"value":"/ [`BigEndian`]: enum.BigEndian.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":54183,"byte_end":54221,"line_start":1902,"line_end":1902,"column_start":1,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":274},"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":54558,"byte_end":54570,"line_start":1914,"line_end":1914,"column_start":10,"column_end":22},"name":"NativeEndian","qualname":"::NativeEndian","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines system native-endian serialization.","sig":null,"attributes":[{"value":"/ Defines system native-endian serialization.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":54259,"byte_end":54306,"line_start":1905,"line_end":1905,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":54307,"byte_end":54310,"line_start":1906,"line_end":1906,"column_start":1,"column_end":4}},{"value":"/ Note that this type has no value constructor. It is used purely at the","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":54311,"byte_end":54385,"line_start":1907,"line_end":1907,"column_start":1,"column_end":75}},{"value":"/ type level.","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":54386,"byte_end":54401,"line_start":1908,"line_end":1908,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":54402,"byte_end":54405,"line_start":1909,"line_end":1909,"column_start":1,"column_end":4}},{"value":"/ On this platform, this is an alias for [`LittleEndian`].","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":54406,"byte_end":54466,"line_start":1910,"line_end":1910,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":54467,"byte_end":54470,"line_start":1911,"line_end":1911,"column_start":1,"column_end":4}},{"value":"/ [`LittleEndian`]: enum.LittleEndian.html","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":54471,"byte_end":54515,"line_start":1912,"line_end":1912,"column_start":1,"column_end":45}},{"value":"cfg(target_endian = \"little\")","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":54516,"byte_end":54548,"line_start":1913,"line_end":1913,"column_start":1,"column_end":33}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":138355,"byte_end":138356,"line_start":1059,"line_end":1059,"column_start":45,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":155105,"byte_end":155106,"line_start":1593,"line_end":1593,"column_start":47,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":4586,"byte_end":4598,"line_start":186,"line_end":186,"column_start":28,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":4629,"byte_end":4638,"line_start":187,"line_end":187,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52581,"byte_end":52590,"line_start":1838,"line_end":1838,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53309,"byte_end":53321,"line_start":1868,"line_end":1868,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":56811,"byte_end":56820,"line_start":1994,"line_end":1994,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":293},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":62496,"byte_end":62508,"line_start":2209,"line_end":2209,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":105396,"byte_end":105400,"line_start":28,"line_end":28,"column_start":29,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":4334},"to":{"krate":0,"index":37}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":138355,"byte_end":138356,"line_start":1059,"line_end":1059,"column_start":45,"column_end":46},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":122},"to":{"krate":0,"index":37}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":139166,"byte_end":139171,"line_start":1083,"line_end":1083,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":4395},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/io.rs","byte_start":155105,"byte_end":155106,"line_start":1593,"line_end":1593,"column_start":47,"column_end":48},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":181},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":4586,"byte_end":4598,"line_start":186,"line_end":186,"column_start":28,"column_end":40},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":357},"to":{"krate":0,"index":194}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":4629,"byte_end":4638,"line_start":187,"line_end":187,"column_start":28,"column_end":37},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":338},"to":{"krate":0,"index":194}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5818,"byte_end":5823,"line_start":226,"line_end":226,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":2610},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5826,"byte_end":5830,"line_start":226,"line_end":226,"column_start":15,"column_end":19},"kind":"SuperTrait","from":{"krate":2,"index":2999},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5833,"byte_end":5838,"line_start":226,"line_end":226,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":9293},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5841,"byte_end":5848,"line_start":226,"line_end":226,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":2967},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5851,"byte_end":5853,"line_start":226,"line_end":226,"column_start":40,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":2645},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5856,"byte_end":5860,"line_start":226,"line_end":226,"column_start":45,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":9499},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5863,"byte_end":5866,"line_start":226,"line_end":226,"column_start":52,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":2676},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5869,"byte_end":5878,"line_start":226,"line_end":226,"column_start":58,"column_end":67},"kind":"SuperTrait","from":{"krate":2,"index":2640},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5881,"byte_end":5891,"line_start":226,"line_end":226,"column_start":70,"column_end":80},"kind":"SuperTrait","from":{"krate":2,"index":2687},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":5907,"byte_end":5913,"line_start":227,"line_end":227,"column_start":16,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":194},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":52581,"byte_end":52590,"line_start":1838,"line_end":1838,"column_start":18,"column_end":27},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":338},"to":{"krate":2,"index":2967}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":53309,"byte_end":53321,"line_start":1868,"line_end":1868,"column_start":18,"column_end":30},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":357},"to":{"krate":2,"index":2967}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":56811,"byte_end":56820,"line_start":1994,"line_end":1994,"column_start":20,"column_end":29},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":338},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/pavel/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.4/src/lib.rs","byte_start":62496,"byte_end":62508,"line_start":2209,"line_end":2209,"column_start":20,"column_end":32},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":357},"to":{"krate":0,"index":197}}]}